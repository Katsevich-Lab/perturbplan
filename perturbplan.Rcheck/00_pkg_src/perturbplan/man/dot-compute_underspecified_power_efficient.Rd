% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scratch.R
\name{.compute_underspecified_power_efficient}
\alias{.compute_underspecified_power_efficient}
\title{Internal function for efficient separated power computation using C++}
\usage{
.compute_underspecified_power_efficient(
  num_total_cells,
  library_size,
  MOI = 10,
  num_targets = 100,
  gRNAs_per_target = 4,
  non_targeting_gRNAs = 10,
  multiple_testing_alpha = 0.05,
  multiple_testing_method = "BH",
  control_group = "complement",
  side = "left",
  num_pairs = 1000,
  fc_expression_df,
  expression_dispersion_curve,
  fc_output_grid,
  expr_output_grid,
  prop_non_null = 0.1
)

.compute_underspecified_power_efficient(
  num_total_cells,
  library_size,
  MOI = 10,
  num_targets = 100,
  gRNAs_per_target = 4,
  non_targeting_gRNAs = 10,
  multiple_testing_alpha = 0.05,
  multiple_testing_method = "BH",
  control_group = "complement",
  side = "left",
  num_pairs = 1000,
  fc_expression_df,
  expression_dispersion_curve,
  fc_output_grid,
  expr_output_grid,
  prop_non_null = 0.1
)
}
\arguments{
\item{num_total_cells}{Total number of cells}

\item{library_size}{Library size (reads per cell)}

\item{MOI}{Multiplicity of infection}

\item{num_targets}{Number of targets}

\item{gRNAs_per_target}{Number of gRNAs per target}

\item{non_targeting_gRNAs}{Number of non-targeting gRNAs}

\item{multiple_testing_alpha}{Alpha level for multiple testing}

\item{multiple_testing_method}{Multiple testing method}

\item{control_group}{Control group type}

\item{side}{Test sidedness}

\item{num_pairs}{Number of pairs}

\item{fc_expression_df}{Data frame with fold change and expression info}

\item{expression_dispersion_curve}{Function for expression-size relationship}

\item{fc_output_grid}{Grid points for fold change curve}

\item{expr_output_grid}{Grid points for expression curve}

\item{prop_non_null}{Proportion of non-null hypotheses}
}
\value{
List with overall power and power curves

List with overall power and power curves
}
\description{
Internal function for efficient separated power computation using C++

Internal function for efficient separated power computation using C++
}
