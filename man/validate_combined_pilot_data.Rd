% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plan_help.R
\name{validate_combined_pilot_data}
\alias{validate_combined_pilot_data}
\title{Validate combined pilot data RDS file structure}
\usage{
validate_combined_pilot_data(data, file_path = "uploaded file")
}
\arguments{
\item{data}{A list object loaded from an RDS file, expected to contain:
\itemize{
\item baseline_expression: A list with baseline expression data and dispersion curve
\item library_parameters: A list with UMI_per_cell and variation parameters
}}

\item{file_path}{Character. Path or description of the uploaded file for error messages.}
}
\value{
A list with elements:
\describe{
\item{valid}{Logical indicating if validation passed}
\item{data}{The validated data (if valid) or NULL}
\item{errors}{Character vector of error messages}
\item{warnings}{Character vector of warning messages}
\item{summary}{HTML-formatted summary text for display}
}
}
\description{
This function validates the structure of a combined pilot data RDS file that contains
both baseline expression data and library parameters in a single list.
Also, it checks whether the value of parameters makes sense.
}
\details{
This function validates the overall structure of the combined pilot data, then
delegates validation of individual components to \code{\link{validate_custom_baseline_rds}}
and \code{\link{validate_custom_library_rds}}.

Expected structure:
\preformatted{
list(
  baseline_expression = list(
    baseline_expression = data.frame(...),
    expression_dispersion_curve = function(v) {...}
  ),
  library_parameters = list(
    UMI_per_cell = numeric_value,
    variation = numeric_value
  )
)
}
}
\examples{
# set seed for reproducibility
set.seed(123)
# First create pilot data using the preprocessing pipeline
extdata_path <- system.file("extdata", package = "perturbplan")
# Get raw data from 10x output
raw_data <- reference_data_preprocessing_10x(
  path_to_top_level_output = extdata_path,
  path_to_run_level_output = "cellranger_tiny",
  h5_rough = TRUE
)
# Process into final pilot data format
pilot_data <- reference_data_processing(
  response_matrix = raw_data$response_matrix,
  read_umi_table = raw_data$read_umi_table,
  mapping_efficiency = raw_data$mapping_efficiency,
  TPM_thres = 0.1,
  h5_only = FALSE
)

# Validate the processed pilot data
validation_result <- validate_combined_pilot_data(pilot_data)
if (validation_result$valid) {
  cat("Validation passed:", validation_result$summary)
} else {
  cat("Validation failed:", validation_result$errors)
}

pilot_data_corrected <- pilot_data
pilot_data_corrected$library_parameters$variation <- 0.3
validation_result2 <- validate_combined_pilot_data(pilot_data_corrected)
if (validation_result2$valid) {
  cat("Validation passed:", validation_result2$summary)
} else {
  cat("Validation failed:", validation_result2$errors)
}

}
\seealso{
\code{\link{validate_custom_baseline_rds}} for baseline expression validation
\code{\link{validate_custom_library_rds}} for library parameter validation
}
