% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{compute_power_plan_overall_cpp}
\alias{compute_power_plan_overall_cpp}
\title{Compute overall power for power analysis (C++)}
\usage{
compute_power_plan_overall_cpp(
  fc_expression_df,
  library_size,
  num_trt_cells,
  num_cntrl_cells,
  multiple_testing_alpha = 0.05,
  multiple_testing_method = "BH",
  side = "left",
  prop_non_null = 0.1,
  return_full_results = FALSE
)
}
\arguments{
\item{fc_expression_df}{DataFrame with fold change and expression info}

\item{library_size}{Numeric. Effective library size}

\item{num_trt_cells}{Numeric. Number of treatment cells}

\item{num_cntrl_cells}{Numeric. Number of control cells}

\item{multiple_testing_alpha}{Numeric. FDR target level (default 0.05)}

\item{multiple_testing_method}{String. Method ("BH" only supported)}

\item{side}{String. Test sidedness ("left", "right", "both")}

\item{prop_non_null}{Numeric. Proportion of non-null hypotheses (default 0.1)}

\item{return_full_results}{Logical. Return full results or just overall power}
}
\value{
Numeric overall power (if return_full_results=FALSE) or List with full results
}
\description{
C++ implementation of compute_power_plan_overall that provides significant
performance improvements for power analysis computations.
}
\details{
This C++ implementation orchestrates existing optimized C++ functions:
\itemize{
\item compute_monte_carlo_teststat_cpp(): Monte Carlo test statistics
\item compute_BH_plan(): Benjamini-Hochberg significance cutoff
\item rejection_computation_cpp(): Power calculations
}

The function provides identical results to the R version while offering
significant performance improvements by eliminating R function call overhead.
}
\seealso{
\code{\link{compute_power_plan_overall}} for R version
}
