[{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"CLAUDE.md","text":"PerturbPlan R package experimental design power analysis perturb-seq experiments (CRISPR-based single-cell perturbation experiments). combines R C++ code efficient statistical computations.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"build-and-check","dir":"","previous_headings":"Common Development Commands","what":"Build and Check","title":"CLAUDE.md","text":"","code":"# Build the package R CMD build .  # Check the package (replace version as needed) R CMD check perturbplan_0.0.1.tar.gz  # Install the package locally R CMD INSTALL ."},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"development-workflow","dir":"","previous_headings":"Common Development Commands","what":"Development Workflow","title":"CLAUDE.md","text":"","code":"# Load package during development devtools::load_all()  # Run all tests devtools::test()  # Run a specific test file devtools::test(filter = \"test-library_computation\")  # Generate documentation from roxygen2 comments devtools::document()  # Check package without building devtools::check()"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"shiny-app","dir":"","previous_headings":"Common Development Commands","what":"Shiny App","title":"CLAUDE.md","text":"","code":"# Launch the interactive app (runs app.R) perturbplan::launch_app()"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Architecture","what":"Core Components","title":"CLAUDE.md","text":"calculate_power_grid(): Main function heatmap power analysis compute_power_grid_efficient(): Efficient grid-based power analysis using C++ Monte Carlo compute_power_posthoc(): Main function post-hoc power analysis Integrates C++ implementations performance library_estimation(): Estimates parameters existing data library_computation(): Computes QC-aware library statistics BH_cutoff.cpp: Benjamini-Hochberg multiple testing corrections compute_distribution_teststat_*.cpp: Test statistic distributions power_curves.cpp: Monte Carlo integration power curves Key C++ functions: compute_monte_carlo_teststat_cpp(), compute_fc_curve_cpp(), compute_expression_curve_cpp() Uses Rcpp seamless R/C++ integration Implements pairwise QC checks perturb-seq data Filters based minimum non-zero cell counts Comprehensive validation functions major operations Ensures data consistency across pipeline","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"data-flow","dir":"","previous_headings":"Architecture","what":"Data Flow","title":"CLAUDE.md","text":"Cell counts per gRNA Baseline expression statistics Perturbation-gene pairs analyze (Random mode Custom CSV grna_target, response_id columns) Analysis parameters (control group, test side, QC thresholds) Validates inputs CSV format (Custom mode) Handles gene multiplicity using weighted sampling duplicate genes pairs Computes QC-aware library sizes Calculates test statistic distributions using C++ Estimates power perturbation-gene pair Individual power pair Expected total discoveries","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"key-design-decisions","dir":"","previous_headings":"Architecture","what":"Key Design Decisions","title":"CLAUDE.md","text":"Rcpp Integration: C++ code handles computationally intensive operations (distribution calculations, multiple testing corrections) Modular Design: Separate functions parameter estimation, QC computation, power analysis allow flexible workflows Shiny Interface: Provides non-programmatic access via inst/shiny/app.R C++ Optimization: Monte Carlo loops implemented C++ significant performance improvements Weighted Sampling: Preserves gene multiplicity perturbation-gene pairs using efficient weighted sampling instead row duplication","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"CLAUDE.md","text":"package optimized computational efficiency: C++ Monte Carlo: .compute_power_plan_efficient() replaces older R-based .compute_underspecified_power_efficient() C++ implementations Batch Processing: Monte Carlo samples processed batch using compute_monte_carlo_teststat_cpp() Efficient Curves: Power curves computed using optimized C++ functions (compute_fc_curve_cpp, compute_expression_curve_cpp) Memory-Efficient Sampling: Uses weighted sampling gene multiplicity instead duplicating rows, reducing memory usage preserving statistical correctness","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"perturbation-gene-pairs-analysis","dir":"","previous_headings":"Shiny Application Features","what":"Perturbation-Gene Pairs Analysis","title":"CLAUDE.md","text":"Shiny app provides intuitive interface specifying perturbation-gene pairs: Random Mode: Randomly samples genes baseline expression dataset Required format: CSV grna_target response_id columns response_id must contain Ensembl gene IDs (e.g., ENSG00000141510) Preserves gene multiplicity: genes appearing multiple pairs get proportional weight power calculations Example file: inst/extdata/sample_pairs.csv","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"ui-organization","dir":"","previous_headings":"Shiny Application Features","what":"UI Organization","title":"CLAUDE.md","text":"application features streamlined two-tab structure: Overall Power: Unified tab sub-tabs “Heatmap” “Slice” views Drill-Power: Detailed power curve analysis selected experimental conditions Analysis choices ordered logical workflow: 1. Perturbation-gene pairs analyze: Random/Custom dropdown 2. Minimum TPM threshold: Gene expression filtering 3. Test side: Left (knockdown), Right (overexpression) 4. Control group: Complement cells vs Non-targeting cells 5. FDR target level: Multiple testing correction threshold","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"overall-power-tab","dir":"","previous_headings":"Shiny Application Features > Power Visualization Interface","what":"Overall Power Tab","title":"CLAUDE.md","text":"Drill-controls cells, reads per cell, (tiles) Context-sensitive sidebar showing relevant controls Conditional display: shows instruction message slices selected Interactive point selection multiple selection support","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"drill-down-power-tab","dir":"","previous_headings":"Shiny Application Features > Power Visualization Interface","what":"Drill-down Power Tab","title":"CLAUDE.md","text":"Provides detailed power curve analysis : Tabbed Interface: Separate tabs “Expression” “Fold Change” plots Color representing number cells Linetype point shape representing reads per cell Legends positioned right optimal space usage Clean legend labels (redundant “reads/cell” text) “Facet cells”: Horizontal panels separated cell count, colored reads per cell “Facet reads per cell”: Horizontal panels separated reads per cell, colored cell count ggside marginal histograms showing distribution expression/fold change values Points added line plots better data visibility Square aspect ratio panels optimal viewing Consistent 570px box heights across tabs Performance Optimization: Default 10×10 grid (instead 20×20) faster computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"file-validation","dir":"","previous_headings":"Shiny Application Features","what":"File Validation","title":"CLAUDE.md","text":"Validates CSV format required columns Provides clear error messages format issues Shows loading status: “Loaded X pairs (Y unique genes)” Warns genes filtered due low TPM","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"excel-download-organization","dir":"","previous_headings":"Shiny Application Features","what":"Excel Download Organization","title":"CLAUDE.md","text":"results Excel file organized numbered sheets logical reading: 1_Parameters: Analysis settings input parameters 2_Power_Grid: Main heatmap results (cells × reads per cell power grid) 3_Gene_List: Input gene list (custom pairs provided) 4_Selected_Designs: Information drill-selections 5_Fold_Change_Power: Detailed fold change power curves 6_Expression_Power: Detailed expression (TPM) power curves sheet uses logical column ordering: - Design column shows “cells × reads” format easy identification - Cells Reads_per_Cell separate numeric columns analysis - Data columns (Expression_TPM, Fold_Change, Power) follow design info - Clear naming: Descriptive column headers without redundancy","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"CLAUDE.md","text":"package uses testthat (edition 3) helper functions tests/testthat/helper-*.R test data generation. Tests compare analytical computations simulations ensure accuracy.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"known-issues","dir":"","previous_headings":"","what":"Known Issues","title":"CLAUDE.md","text":"Current R CMD check warnings need attention: Missing Imports: Need declare imports Matrix, sceptre, shiny packages Namespace Issues: Missing imports standard R functions (setNames, read.csv, ) Hidden Files: .claude directory added .Rbuildignore fix namespace issues, add NAMESPACE:","code":"importFrom(\"methods\", \"as\") importFrom(\"stats\", \"setNames\") importFrom(\"utils\", \"read.csv\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"parameter-naming-convention","dir":"","previous_headings":"","what":"Parameter Naming Convention","title":"CLAUDE.md","text":"IMPORTANT: Use TPM_threshold instead TPM_threshold everywhere package. function parameters use TPM_threshold variable names use TPM_threshold documentation reference TPM_threshold UI inputs use \"TPM_threshold\" input ID ensures consistency across entire codebase avoids confusion “TPM” (Transcripts Per Million) “tmp” (temporary).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"common-typos-to-avoid","dir":"","previous_headings":"","what":"Common Typos to Avoid","title":"CLAUDE.md","text":"TPM_threshold vs TPM_threshold: Always use TPM_threshold (Transcripts Per Million), TPM_threshold (temporary) Parameter consistency: adding parameters functions, double-check spelling matches existing usage Function signatures: Ensure parameter names match function definitions calls Careful attention existing code: modifying existing functions, preserve existing parameter names exactly ","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"combined-pilot-data-upload","dir":"","previous_headings":"","what":"Combined Pilot Data Upload","title":"CLAUDE.md","text":"Shiny application supports uploading combined pilot data includes baseline expression library parameters single RDS file. ensures consistency components simplifies upload process.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"using-combined-pilot-data","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Using Combined Pilot Data","title":"CLAUDE.md","text":"Navigate “Experimental setup” section sidebar Select “Custom” pilot data Upload RDS file required combined structure (see ) Proceed analysis - power calculations use custom data","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"required-rds-file-structure","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Required RDS File Structure","title":"CLAUDE.md","text":"RDS file must contain list exactly two named elements:","code":"combined_pilot_data <- list(   baseline_expression_stats = data.frame(     response_id = c(\"ENSG00000141510\", \"ENSG00000157764\", ...),    # Ensembl gene IDs     relative_expression = c(1.23e-05, 4.56e-06, ...),             # TPM/1e6 scale     expression_size = c(0.45, 1.23, ...)                          # Dispersion parameters   ),   library_parameters = list(     UMI_per_cell = 15000,    # Maximum UMI per cell parameter (positive numeric)     variation = 0.25         # Variation parameter for PCR bias (positive numeric)   ) )  # Save as RDS file saveRDS(combined_pilot_data, \"my_combined_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"data-requirements","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Data Requirements","title":"CLAUDE.md","text":"baseline_expression_stats component: - baseline_expression_stats: Data frame required columns: - response_id: Character vector gene IDs (preferably Ensembl format: ENSGXXXXXXXXXXX) - relative_expression: Numeric vector expression levels TPM/1e6 scale (.e., raw TPM divided 1,000,000) - expression_size: Numeric vector positive dispersion parameters - missing values column - Unique gene IDs (duplicates removed, keeping first occurrence) library_parameters component: - UMI_per_cell: Maximum UMI per cell parameter saturation curve fitting (typically 1000-50000) - variation: Variation parameter characterizing PCR amplification bias (typically 0.1-1.0) - parameters must positive single numeric values - missing values allowed","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-1-from-default-data","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 1: From Default Data","title":"CLAUDE.md","text":"","code":"# Load the package and default data library(perturbplan) pilot_data <- get_pilot_data_from_package(\"K562\") baseline_data <- if (!is.null(pilot_data$baseline_expression_stats)) {   pilot_data$baseline_expression_stats } else {   pilot_data$baseline_expression$baseline_expression } library_data <- pilot_data$library_parameters  # Combine into the expected structure combined_pilot_data <- list(   baseline_expression_stats = baseline_data,   library_parameters = library_data )  # Save as RDS saveRDS(combined_pilot_data, \"my_combined_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-2-from-your-own-measurements","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 2: From Your Own Measurements","title":"CLAUDE.md","text":"","code":"# Create your own baseline expression data my_baseline <- data.frame(   response_id = c(\"ENSG00000141510\", \"ENSG00000157764\"),   relative_expression = c(1.23e-05, 4.56e-06),   expression_size = c(0.45, 1.23) )  # Create your own library parameters my_library <- list(   UMI_per_cell = 18000,   variation = 0.22 )  # Combine and save combined_pilot_data <- list(   baseline_expression_stats = my_baseline,   library_parameters = my_library )  saveRDS(combined_pilot_data, \"my_custom_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-3-using-the-example-script","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 3: Using the Example Script","title":"CLAUDE.md","text":"Use example script inst/extdata/create_combined_pilot_example.R guidance creating combined pilot data files.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"file-validation-1","dir":"","previous_headings":"Combined Pilot Data Upload","what":"File Validation","title":"CLAUDE.md","text":"application automatically validates uploaded RDS files using validate_combined_pilot_data() provides detailed error messages : - Incorrect overall file structure missing top-level elements - Invalid baseline expression data (delegates validate_custom_baseline_rds()) - Invalid library parameters (delegates validate_custom_library_rds()) - Missing values duplicate gene IDs - File size limits (50MB maximum) - R version compatibility issues","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"integration-with-analysis-workflow","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Integration with Analysis Workflow","title":"CLAUDE.md","text":"Combined pilot data integrates seamlessly analysis features: - Compatible Random Custom gene list modes - Works analysis parameters (test side, control group, FDR levels) - Included Excel downloads clear documentation data source - Supports visualization features (heatmaps, power curves, drill-analysis) - Ensures consistency baseline expression library parameters experiment","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"performance-considerations","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Performance Considerations","title":"CLAUDE.md","text":"File size: Keep RDS files 50MB optimal performance Gene count: 1,000-10,000 genes typically provide good balance comprehensiveness speed Memory usage: Large datasets may require RAM analysis Parameter ranges: Extreme values may affect analysis speed accuracy","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"example-files","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Example Files","title":"CLAUDE.md","text":"Pre-built example files available: - inst/extdata/example_combined_pilot_data.rds: Combined K562 baseline library data - inst/extdata/create_combined_pilot_example.R: Script creating combined files","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"summary-display","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Summary Display","title":"CLAUDE.md","text":"combined pilot data loaded successfully, application displays: “Loaded custom baseline expression (X,XXX genes) Average TPM: XX.X Loaded custom library parameters UMI per cell: XX,XXX Variation: X.XXXe-XX”","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"development-notes","dir":"","previous_headings":"","what":"Development Notes","title":"CLAUDE.md","text":"Function Migration: .compute_underspecified_power_efficient() replaced .compute_power_plan_efficient() better performance C++ Priority: possible, use C++ implementations R loops computationally intensive operations Grid Analysis: Use compute_power_grid_efficient() systematic power analysis across experimental conditions ggside Faceting: using ggplot2 faceting ggside histograms, convert numeric faceting variables factors explicitly avoid “Can’t combine factor double” errors. Use factor() proper levels labels facet_grid().","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"git-workflow-requirements","dir":"","previous_headings":"","what":"Git Workflow Requirements","title":"CLAUDE.md","text":"IMPORTANT: commit push requested, entire repository committed pushed, just specific changes. Complete Sync: commit push, difference local directory remote repository Clean Working Tree: git status show clean working tree pushing Full Commit: Use git add . stage changes committing, unless specifically instructed commit particular files Repository Consistency: remote repository always reflect complete current state local development environment ensures repository consistency prevents issues uncommitted changes left behind development sessions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"shiny-ui-tab-modification-guidelines","dir":"","previous_headings":"","what":"Shiny UI Tab Modification Guidelines","title":"CLAUDE.md","text":"IMPORTANT: making modifications tabs Shiny UI, always ensure changes align existing patterns: Tab Header Colors: Follow established color scheme defined CSS selectors (e.g., #exp-header, #perturbation-header, #analysis-header, #effects-header) Collapsibility: Maintain collapsible functionality proper JavaScript integration CSS Consistency: Update relevant CSS selectors JavaScript arrays adding/removing/modifying tabs Header styling hover effects Chevron icons proper rotation Content containers consistent padding background Display states (display: none collapsed, display: block expanded) adding modifying tabs, check: 1. CSS selectors ui_styles.R include new tab IDs 2. JavaScript arrays (allSections, allChevrons) updated 3. Initial state setup includes new tab 4. Color scheme hover effects match existing tabs","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 perturbplan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"dataset-summaries","dir":"Articles","previous_headings":"Posthoc power inputs","what":"1. Dataset summaries","title":"Posthoc Power Analysis","text":"Let us consider toy perturb-seq dataset 3 enhancers, targeted 2 gRNAs, 2 non-targeting gRNAs, 4 genes. Suppose 1000 total cells experiment: Based data, suppose information number cells received gRNA: Furthermore, computed mean size parameters baseline expression gene:","code":"num_total_cells <- 1000 cells_per_grna #>      grna_id   grna_target num_cells #> 1 enh1_grna1          enh1        93 #> 2 enh2_grna1          enh2       113 #> 3 enh3_grna1          enh3       112 #> 4   nt_grna1 non-targeting       104 #> 5 enh1_grna2          enh1        84 #> 6 enh2_grna2          enh2       104 #> 7 enh3_grna2          enh3       107 #> 8   nt_grna2 non-targeting       105 baseline_expression_stats #>   response_id expression_mean expression_size #> 1       gene1        2.002931       0.2967991 #> 2       gene2       12.326867       8.3723191 #> 3       gene3        4.014221       2.5988431 #> 4       gene4        1.460472       2.6746265"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"analysis-choices","dir":"Articles","previous_headings":"Posthoc power inputs","what":"2. Analysis choices","title":"Posthoc Power Analysis","text":"Suppose tested effects elements genes. can encode discovery_pairs data frame, sceptre: analyzed data using complement control group, left-sided tests, default values pairwise QC parameters:","code":"discovery_pairs #>    grna_target response_id #> 1         enh1       gene1 #> 2         enh2       gene1 #> 3         enh3       gene1 #> 4         enh1       gene2 #> 5         enh2       gene2 #> 6         enh3       gene2 #> 7         enh1       gene3 #> 8         enh2       gene3 #> 9         enh3       gene3 #> 10        enh1       gene4 #> 11        enh2       gene4 #> 12        enh3       gene4 control_group <- \"complement\" side <- \"both\" n_nonzero_trt_thresh <- 7 n_nonzero_cntrl_thresh <- 7"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"power-analysis-parameters","dir":"Articles","previous_headings":"Posthoc power inputs","what":"3. Power analysis parameters","title":"Posthoc Power Analysis","text":"want compute power enhancer-gene pair assuming gRNAs targeting enhancer fold changes gene mean standard deviations 0.85 0.13, respectively: want deem perturbation-gene pairs significant power analysis pass threshold 0.005: number may obtained \\(p\\)-value cutoff original analysis.","code":"fold_change_mean <- 0.85 fold_change_sd <- 0.13 cutoff <- 0.005"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"running-perturbplan-posthoc-power-analysis","dir":"Articles","previous_headings":"","what":"Running PerturbPlan posthoc power analysis","title":"Posthoc Power Analysis","text":"can now compute power enhancer-gene pair using compute_power_posthoc() function:","code":"power_results <- compute_power_posthoc(   num_total_cells = num_total_cells,   cells_per_grna = cells_per_grna,   baseline_expression_stats = baseline_expression_stats,   discovery_pairs = discovery_pairs,   control_group = control_group,   side = side,   n_nonzero_trt_thresh = n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh = n_nonzero_cntrl_thresh,   fold_change_mean = fold_change_mean,   fold_change_sd = fold_change_sd,   cutoff = cutoff )"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"perturbplan-posthoc-power-outputs","dir":"Articles","previous_headings":"","what":"PerturbPlan posthoc power outputs","title":"Posthoc Power Analysis","text":"result list fields expected_num_discoveries individual_power: field expected_num_discoveries contains expected number discoveries across enhancer-gene pairs: field individual_power data frame containing power enhancer-gene pair:","code":"names(power_results) #> [1] \"individual_power\"         \"expected_num_discoveries\" power_results$expected_num_discoveries #> [1] 4.38297 power_results$individual_power #> # A tibble: 12 × 3 #>    grna_target response_id  power #>    <chr>       <chr>        <dbl> #>  1 enh1        gene1       0.0430 #>  2 enh2        gene1       0.0561 #>  3 enh3        gene1       0.0567 #>  4 enh1        gene2       0.693  #>  5 enh2        gene2       0.724  #>  6 enh3        gene2       0.725  #>  7 enh1        gene3       0.389  #>  8 enh2        gene3       0.439  #>  9 enh3        gene3       0.441  #> 10 enh1        gene4       0.242  #> 11 enh2        gene4       0.286  #> 12 enh3        gene4       0.288"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Preprocess Reference Expression data for Web App","text":"preprocessing workflow consists two main steps: reference_data_preprocessing_10x(): Loading raw data multiple SRR runs raw Cell Ranger outputs processing list containing: Gene--cell expression matrix UMI-level molecule information dataframe Proportion reads confidently mapped whole transcriptome among reads reference_data_processing(): Fitting statistical models output Step 1 obtaining expression data, library sequencing parameters required power analysis. parameters include: Baseline expression statistics: Baseline gene expression data: response_id, relative_expression expression_size Library parameters: Reads-UMIs saturation curve parameters: UMI_per_cell variation. two parameters characterize library size PCR amplification bias, given cell type assay interest Mapping efficiency: Proportion reads confidently mapped transcripts genes ’re interested . output two-step preprocessing can uploaded Web App custom reference data.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"step-1-process-cell-ranger-outputs","dir":"Articles","previous_headings":"","what":"Step 1: Process Cell Ranger Outputs","title":"Preprocess Reference Expression data for Web App","text":"reference_data_preprocessing_10x() function aggregates Cell Ranger outputs multiple sequencing runs (SRRs) single data structure.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"input-requirements","dir":"Articles","previous_headings":"Step 1: Process Cell Ranger Outputs","what":"Input Requirements","title":"Preprocess Reference Expression data for Web App","text":"data organized Cell Ranger output directories top-level folder: SRR directories generated recent version Cell Ranger configured perturbation (CRISPR Perturb-seq) workflow. information input format required fields, see ?obtain_qc_response_data, ?obtain_qc_read_umi_table, ?obtain_mapping_efficiency. Note: cases, subfolder filtered_feature_bc_matrix may need created unzipping filtered_feature_bc_matrix.tar.gz file. metrics_summary.csv file must include column named “Number Reads”, required estimate mapping efficiency. column may need added edited manually Cell Ranger run multiple libraries multiple samples.","code":"path_to_top_level_output/ ├── SRR_run_1/ │   ├── outs/ │   │   ├── filtered_feature_bc_matrix/ │   │   │   ├── barcodes.tsv.gz │   │   │   ├── features.tsv.gz │   │   │   └── matrix.mtx.gz │   │   ├── molecule_info.h5 │   │   ├── filtered_feature_bc_matrix.h5 │   │   └── metrics_summary.csv ├── SRR_run_2/ │   └── ... └── SRR_run_3/     └── ..."},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"function-usage","dir":"Articles","previous_headings":"Step 1: Process Cell Ranger Outputs","what":"Function Usage","title":"Preprocess Reference Expression data for Web App","text":"’s example SRR folder called cellranger_tiny folder extdata package, ’ll use demonstration: Arguments: path_to_top_level_output: Path directory containing Cell Ranger run-level subdirectories path_to_run_level_output: Optional character vector specifying subset run directories process h5_rough: TRUE (default), function extract UMI-level molecule information dataframe first SRR speed. FALSE, combines UMI-level molecule information SRRs skip_mapping_efficiency: TRUE, skips estimation mapping efficiency. FALSE (default), calculates naive mapping efficiency using data properly formatted metrics_summary.csv file described .","code":"# Point to directory containing example Cell Ranger outputs extdata_path <- system.file(\"extdata\", package = \"perturbplan\")  # Aggregate data from all SRR runs raw_data <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",  # Only read subfolder cellranger_tiny    h5_rough = TRUE,  # Use first SRR for QC data (faster)   skip_mapping_efficiency = FALSE  # Estimate mapping efficiency )"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"function-output","dir":"Articles","previous_headings":"Step 1: Process Cell Ranger Outputs","what":"Function Output","title":"Preprocess Reference Expression data for Web App","text":"Format output: response_matrix: sparse gene--cell expression matrix (genes rows, cells columns) row column names num_reads: Number reads supporting UMI-cell combination UMI_id: UMI index UMI-cell combination cell_id: Cell barcode UMI-cell combination response_id: Gene identifier (e.g., Ensembl ID) srr_idx: SRR run identifier UMI mapping_efficiency: numeric value 0 1 skip_mapping_efficiency = FALSE, NULL skip_mapping_efficiency = TRUE","code":"# Inspect structure str(raw_data) #> List of 3 #>  $ response_matrix   :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:11] 0 1 2 3 4 1 2 1 4 1 ... #>   .. ..@ p       : int [1:9] 0 1 2 3 4 5 7 9 11 #>   .. ..@ Dim     : int [1:2] 5 8 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : chr [1:5] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" ... #>   .. .. ..$ : chr [1:8] \"AGCAGCCGTCCAAGTT-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAACCTGGTATATGAG-1\" ... #>   .. ..@ x       : num [1:11] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ read_umi_table    :'data.frame':  11 obs. of  5 variables: #>   ..$ num_reads  : int [1:11] 2 1 1 2 1 1 1 1 1 1 ... #>   ..$ UMI_id     : num [1:11] 139105 723247 998389 622094 584568 ... #>   ..$ cell_id    : chr [1:11] \"AAACCTGGTATATGAG-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAAGTAGTCCAAATGC-1\" ... #>   ..$ response_id: chr [1:11] \"ENSG00000241860\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000286448\" ... #>   ..$ srr_idx    : chr [1:11] \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" ... #>  $ mapping_efficiency: num 1"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"step-2-extract-reference-data","dir":"Articles","previous_headings":"","what":"Step 2: Extract Reference Data","title":"Preprocess Reference Expression data for Web App","text":"reference_data_processing() function fits statistical models extract gene expression data, library parameters sophisticated mapping efficiency required PerturbPlan. postpone details two models end document.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"input-requirements-1","dir":"Articles","previous_headings":"Step 2: Extract Reference Data","what":"Input Requirements","title":"Preprocess Reference Expression data for Web App","text":"input format function output format function reference_data_preprocessing_10x().","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"function-usage-1","dir":"Articles","previous_headings":"Step 2: Extract Reference Data","what":"Function Usage","title":"Preprocess Reference Expression data for Web App","text":"demonstrate two use cases reference_data_processing() aggregated data Step 1 (raw_data): one perturb-seq experimental design using genes, one TAP-seq experimental design using targeted gene list. Arguments: response_matrix: Gene--cell expression matrix Step 1 (NULL h5_only = TRUE) read_umi_table: QC dataframe Step 1 mapping_efficiency: Mapping efficiency Step 1 gene_list: Optional character vector restrict analysis specific genes TPM_thres: Threshold filtering lowly expressed genes (default: 0.1) downsample_ratio: Proportion downsampling learning read-UMI model (default: 0.7) D2_rough: Rough prior value library variation parameter (default perturbseq experiment: 0.3) h5_only: TRUE, function skip construction baseline expression dataframe save time (default: FALSE) n_threads: Number parallel processing threads (default: NULL single-threaded) Note: practice, function demonstrates robustness downsampling different seeds moderate misspecification prior variation parameter (D2_rough).","code":"# Set seed for reproducibility set.seed(123)  # Process into final pilot data format with all genes, suitable for perturb-seq experimental design pilot_data_perturbseq <- reference_data_processing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   gene_list = NULL,     # Use all genes   TPM_thres = 0.1,      # Default expression threshold for filtering   downsample_ratio = 0.6,  # Downsampling for sequencing   D2_rough = 0.4,       # prior for variation parameter   h5_only = FALSE,      # Set TRUE to skip expression model fitting   n_threads = NULL      # No parallel processing ) #> Starting pilot data preprocessing @ 2025-10-13 22:56:33.52766 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-10-13 22:56:33.552606 #> Finish relative expression calculation @ 2025-10-13 22:56:33.555532 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (8 thread(s)) @ 2025-10-13 22:56:33.556631 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_mle_row result = 401.014 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_mle_row result = 484.176 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_mle_row result = 468.498 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_mle_row result = 468.498 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_mle_row result = 468.498 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-13 22:56:33.561745 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-10-13 22:56:33.578881 #> Processed 5 genes #> Library parameters: UMI_per_cell = 6, variation = 0.371 #> Mapping efficiency = 1  # Process into pilot data format with targetd genes only, suitable for TAP-seq experimental design gene_list <- c(\"ENSG00000241860\", \"ENSG00000238009\", \"ENSG00000239945\") pilot_data_tapseq <- reference_data_processing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   gene_list = gene_list, # Restrict to specific genes   TPM_thres = 0          # No expression threshold for filtering ) #> Starting pilot data preprocessing @ 2025-10-13 22:56:33.582692 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-10-13 22:56:33.597784 #> Finish relative expression calculation @ 2025-10-13 22:56:33.59869 #> Number of genes passing TPM threshold: 3 #> Start dispersion estimation (8 thread(s)) @ 2025-10-13 22:56:33.599555 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 3 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.5 #> [gene 0] t_0 = 1.33333 #> [gene 0] theta_mle_row result = 486.513 #> [gene 1] rel_expr = 0.25 #> [gene 1] t_0 = 0.5 #> [gene 1] theta_mle_row result = 475.754 #> [gene 2] rel_expr = 0.25 #> [gene 2] t_0 = 0.5 #> [gene 2] theta_mle_row result = 475.754 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-13 22:56:33.601596 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-10-13 22:56:33.611949 #> Processed 3 genes #> Library parameters: UMI_per_cell = 7, variation = 0.366 #> Mapping efficiency = 0.727"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"function-output-1","dir":"Articles","previous_headings":"Step 2: Extract Reference Data","what":"Function Output","title":"Preprocess Reference Expression data for Web App","text":"Format output: response_id: Ensembl gene identifier relative_expression: Estimated relative expression proportions gene, normalized sum 1 across genes interest expression_size: Estimated dispersion representing gene-specific expression variability UMI_per_cell: Estimated maximum UMI count per cell variation: Estimated PCR amplification variation parameter mapping_efficiency: Adjusted mapping efficiency, accounting fraction reads mapped genes interest Note: relative expression higher mapping efficiency lower TAP-seq example significantly smaller target gene panel compared Perturb-seq.","code":"# Inspect structure of perturb-seq pilot data str(pilot_data_perturbseq) #> List of 3 #>  $ baseline_expression_stats:'data.frame':   5 obs. of  3 variables: #>   ..$ response_id        : chr [1:5] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" ... #>   ..$ relative_expression: num [1:5] 0.0909 0.3636 0.1818 0.1818 0.1818 #>   ..$ expression_size    : num [1:5] 401 484 468 468 468 #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 6.12 #>   ..$ variation   : num 0.371 #>  $ mapping_efficiency       : num 1  # Inspect structure of TAP-seq pilot data str(pilot_data_tapseq) #> List of 3 #>  $ baseline_expression_stats:'data.frame':   3 obs. of  3 variables: #>   ..$ response_id        : chr [1:3] \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" #>   ..$ relative_expression: num [1:3] 0.5 0.25 0.25 #>   ..$ expression_size    : num [1:3] 487 476 476 #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 6.82 #>   ..$ variation   : num 0.366 #>  $ mapping_efficiency       : num 0.727"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"mathematical-details-of-the-models-used-in-step-2","dir":"Articles","previous_headings":"","what":"Mathematical details of the models used in Step 2","title":"Preprocess Reference Expression data for Web App","text":"consider two models, one modeling gene expression one modeling read-UMI relationship.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"negative-binomial-expression-model","dir":"Articles","previous_headings":"Mathematical details of the models used in Step 2","what":"Negative binomial expression model","title":"Preprocess Reference Expression data for Web App","text":"gene, function fits negative binomial (NB) model characterize distribution gene expression levels across cells: \\[\\text{gene_expression} \\sim \\text{NB}(\\text{mean} = \\text{library_size} \\times \\text{relative_expression}, \\text{size} = \\text{expression_size})\\] gene_expression: Number observed UMIs gene cell library_size: Number observed UMIs per cell data use, relative_expression: Relative expression level gene expression_size: Reciprocal dispersion estimated values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"read-umi-model","dir":"Articles","previous_headings":"Mathematical details of the models used in Step 2","what":"Read-UMI model","title":"Preprocess Reference Expression data for Web App","text":"function fits saturation curve relates mapped reads per cell observed UMIs per cell (library_size): \\[\\text{library_size} = \\text{UMI_per_cell} \\times \\left(1 - \\exp\\left(-\\frac{\\text{mapped_reads_per_cell}}{\\text{UMI_per_cell}}\\right) \\times \\left(1 + \\text{variation} \\times \\frac{\\text{mapped_reads_per_cell}^2}{2 \\times \\text{UMI_per_cell}^2}\\right)\\right)\\] mapped_reads_per_cell: Number mapped reads per cell library_size: Number observed UMIs per cell data used fit model, UMI_per_cell: Total UMI per cell obtained sequencing saturation variation: Variation parameter characterizing PCR amplification bias (0 1) fitted parameters.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/preprocess-reference.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Preprocess Reference Expression data for Web App","text":"?reference_data_preprocessing_10x: Detailed documentation reference_data_preprocessing_10x(). ?reference_data_processing: Detailed documentation reference_data_processing(). ?obtain_qc_response_data, ?obtain_qc_read_umi_table, ?obtain_mapping_efficiency: Documentation obtaining component output reference_data_preprocessing_10x(). ?obtain_expression_information: Documentation fitting negative binomial expression model reference_data_processing(). ?library_computation: Documentation fitting read-UMI model reference_data_processing().","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"comparing-perturb-seq-and-tap-seq-technologies","dir":"Articles","previous_headings":"","what":"1. Comparing Perturb-seq and TAP-seq Technologies","title":"Prospective Power Analysis Beyond the Web App","text":"One common question whether use standard perturb-seq (whole transcriptome) TAP-seq (targeted amplification sequencing) specific experiment. can compare technologies using two pilot datasets: Gasperini et al. (2019) perturb-seq data Ray et al. (2025) TAP-seq data.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"load-pilot-data","dir":"Articles","previous_headings":"1. Comparing Perturb-seq and TAP-seq Technologies","what":"Load Pilot Data","title":"Prospective Power Analysis Beyond the Web App","text":"First, let’s load K562 perturb-seq pilot data K562 TAP-seq pilot data comes package:","code":"# Load K562 pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Extract components baseline_expression <- pilot_data$baseline_expression_stats library_params <- pilot_data$library_parameters mapping_efficiency <- pilot_data$mapping_efficiency  # View data structure str(baseline_expression) #> 'data.frame':    19942 obs. of  3 variables: #>  $ response_id        : chr  \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000286448\" ... #>  $ relative_expression: num  1.50e-07 1.55e-06 7.33e-07 9.31e-07 7.43e-06 ... #>  $ expression_size    : num  0.3556 2.4156 7.7329 0.0341 3.4513 ... cat(\"Number of genes:\", nrow(baseline_expression), \"\\n\") #> Number of genes: 19942 str(library_params) #> List of 2 #>  $ UMI_per_cell: num 59163 #>  $ variation   : num 0.397 str(mapping_efficiency) #>  num 0.711  # load the K562 TAP-seq pilot data tapseq_data <- data(\"K562_Ray\")  # Extract TAP-seq components tapseq_baseline_expression <- K562_Ray$baseline_expression_stats tapseq_library_params <- K562_Ray$library_parameters tapseq_mapping_efficiency <- K562_Ray$mapping_efficiency  # View TAP-seq data structure str(tapseq_baseline_expression) #> 'data.frame':    303 obs. of  3 variables: #>  $ response_id        : chr  \"ENSG00000235169\" \"ENSG00000130764\" \"ENSG00000116198\" \"ENSG00000159023\" ... #>  $ relative_expression: num  0.003732 0.000337 0.000121 0.001622 0.00034 ... #>  $ expression_size    : num  2.55 3.92 18.58 5.21 1.73 ... cat(\"Number of genes:\", nrow(tapseq_baseline_expression), \"\\n\") #> Number of genes: 303 str(tapseq_library_params) #> List of 2 #>  $ UMI_per_cell: num 2377 #>  $ variation   : num 0.809 str(tapseq_mapping_efficiency) #>  num 0.349"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"key-differences-between-technologies","dir":"Articles","previous_headings":"1. Comparing Perturb-seq and TAP-seq Technologies","what":"Key Differences Between Technologies","title":"Prospective Power Analysis Beyond the Web App","text":"two technologies differ several important ways: Gene coverage: Perturb-seq measures ~20,000 genes genome-wide, TAP-seq focuses targeted panel ~300 genes Mapping efficiency: TAP-seq higher mapping efficiency target gene panel (~70%) compared perturb-seq (~30%) Library parameters: TAP-seq shows lower UMI_per_cell higher variation PCR amplification compared perturb-seq","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"power-comparison","dir":"Articles","previous_headings":"1. Comparing Perturb-seq and TAP-seq Technologies","what":"Power Comparison","title":"Prospective Power Analysis Beyond the Web App","text":"Suppose use TAP-seq perturb-seq analyze set pairs targeting TAP-seq genes. Let’s first compare overall power scales sequencing depth technologies, fixing number cells 2,000 per gRNA target:  , let’s compare power scales number cells per target, fixing sequencing depth 40,000 reads per cell:","code":"# Define read depth range read_depths <- c(10000, 20000, 40000, 80000, 1600000) cells_per_target <- 500  # Experimental parameters MOI <- 10 num_targets <- 100 minimum_fold_change <- 0.8 prop_non_null <- 0.005 multiple_testing_alpha <- 0.1 TPM_threshold <- 0.1  # Gene list we consider  gene_list <- tapseq_baseline_expression$response_id  comparison_results_reads <- list()  for (i in seq_along(read_depths)) {   reads <- read_depths[i]    set.seed(123)    # Perturb-seq power   # only keep the genes in the TAP-seq panel   baseline_expression_on_gene_list <- baseline_expression %>%     filter(response_id %in% gene_list)   power_ps <- compute_power_plan(     baseline_expression_stats = baseline_expression_on_gene_list,     library_parameters = library_params,     cells_per_target = cells_per_target,     sequenced_reads_per_cell = reads,     MOI = MOI,     num_targets = num_targets,     control_group = \"complement\",     side = \"left\",     prop_non_null = prop_non_null,     multiple_testing_alpha = multiple_testing_alpha,     TPM_threshold = TPM_threshold,     minimum_fold_change = minimum_fold_change   )    # TAP-seq power   power_ts <- compute_power_plan(     baseline_expression_stats = tapseq_baseline_expression,     library_parameters = tapseq_library_params,     cells_per_target = cells_per_target,     sequenced_reads_per_cell = reads,     MOI = MOI,     num_targets = num_targets,     control_group = \"complement\",     side = \"left\",     prop_non_null = prop_non_null,     multiple_testing_alpha = multiple_testing_alpha,     TPM_threshold = TPM_threshold,     minimum_fold_change = minimum_fold_change   )    comparison_results_reads[[i]] <- data.frame(     Reads_per_Cell = reads,     Technology = c(\"Perturb-seq\", \"TAP-seq\"),     Overall_Power = c(power_ps$overall_power, power_ts$overall_power)   ) }  comparison_reads_df <- bind_rows(comparison_results_reads)  # Plot overall power vs read depth ggplot(comparison_reads_df, aes(x = Reads_per_Cell, y = Overall_Power,                           color = Technology, linetype = Technology)) +   geom_line(linewidth = 1) +   geom_point(size = 3) +   scale_x_continuous(labels = scales::comma) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Technology Comparison: Power vs Sequencing Depth\",     subtitle = sprintf(\"%s cells per target, FC = %.2f, FDR = %.0f%%\",                       scales::comma(cells_per_target), minimum_fold_change,                       multiple_testing_alpha * 100),     x = \"Reads per Cell\",     y = \"Overall Power\",     color = \"Technology\",     linetype = \"Technology\"   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     plot.title = element_text(face = \"bold\"),     panel.grid.minor = element_blank()   ) # Define cell number range cell_numbers <- c(200, 500, 1000, 2000, 4000) reads_per_cell <- 40000  comparison_results_cells <- list()  for (i in seq_along(cell_numbers)) {   cells <- cell_numbers[i]    set.seed(123)    # Perturb-seq power   power_ps <- compute_power_plan(     baseline_expression_stats = baseline_expression_on_gene_list,     library_parameters = library_params,     cells_per_target = cells,     sequenced_reads_per_cell = reads_per_cell,     MOI = MOI,     num_targets = num_targets,     control_group = \"complement\",     side = \"left\",     prop_non_null = prop_non_null,     multiple_testing_alpha = multiple_testing_alpha,     TPM_threshold = TPM_threshold,     minimum_fold_change = minimum_fold_change   )    # TAP-seq power   power_ts <- compute_power_plan(     baseline_expression_stats = tapseq_baseline_expression,     library_parameters = tapseq_library_params,     cells_per_target = cells,     sequenced_reads_per_cell = reads_per_cell,     MOI = MOI,     num_targets = num_targets,     control_group = \"complement\",     side = \"left\",     prop_non_null = prop_non_null,     multiple_testing_alpha = multiple_testing_alpha,     TPM_threshold = TPM_threshold,     minimum_fold_change = minimum_fold_change   )    comparison_results_cells[[i]] <- data.frame(     Cells_per_Target = cells,     Technology = c(\"Perturb-seq\", \"TAP-seq\"),     Overall_Power = c(power_ps$overall_power, power_ts$overall_power)   ) }  comparison_cells_df <- bind_rows(comparison_results_cells)  # Plot overall power vs cell number ggplot(comparison_cells_df, aes(x = Cells_per_Target, y = Overall_Power,                           color = Technology, linetype = Technology)) +   geom_line(linewidth = 1) +   geom_point(size = 3) +   scale_x_continuous(labels = scales::comma) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Technology Comparison: Power vs Cell Numbers\",     subtitle = sprintf(\"%s reads per cell, FC = %.2f, FDR = %.0f%%\",                       scales::comma(reads_per_cell), minimum_fold_change,                       multiple_testing_alpha * 100),     x = \"Cells per Target\",     y = \"Overall Power\",     color = \"Technology\",     linetype = \"Technology\"   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     plot.title = element_text(face = \"bold\"),     panel.grid.minor = element_blank()   )"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"interpretation","dir":"Articles","previous_headings":"1. Comparing Perturb-seq and TAP-seq Technologies","what":"Interpretation","title":"Prospective Power Analysis Beyond the Web App","text":"Power differences across sequencing depths. TAP-seq consistently achieves higher overall power perturb-seq sequencing depth cell numbers held constant. advantage stems TAP-seq’s higher mapping efficiency (~70% vs ~30%), effectively provides UMIs mapped genes interest per read. However, technologies show diminishing returns higher read depths due UMI saturation effects. power gap technologies narrows high read depths (>80,000 reads/cell), suggesting extreme sequencing depths may justify TAP-seq’s additional panel design costs reads abundant. Power differences across cell numbers. varying cell numbers fixed sequencing depth, TAP-seq maintains power advantage, relative benefit smaller varying read depth. technologies show roughly square-root scaling power cell numbers (power ∝ √n), expected statistical theory. suggests technologies, increasing cell numbers provides consistent diminishing returns. similar scaling patterns indicate choice technologies primarily driven sequencing depth regime plan operate , rather number cells can collect. Practical implications. TAP-seq advantageous well-defined target genes operate moderate sequencing depths (20,000-60,000 reads/cell), higher mapping efficiency translates substantial power gains. Perturb-seq remains preferable exploratory studies target genes uncertain, provides genome-wide coverage without requiring panel design. validation experiments known targets moderate depths, TAP-seq’s power advantage often justifies panel design investment. However, can afford deep sequencing (>80,000 reads/cell), technologies converge performance, perturb-seq’s flexibility may outweigh TAP-seq’s marginal power advantage.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"comparing-pre-existing-experimental-designs","dir":"Articles","previous_headings":"","what":"2. Comparing Pre-existing Experimental Designs","title":"Prospective Power Analysis Beyond the Web App","text":"Sometimes want compare power experiments already performed constrained available resources. Let’s compare four experimental designs:","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"define-competing-designs","dir":"Articles","previous_headings":"2. Comparing Pre-existing Experimental Designs","what":"Define Competing Designs","title":"Prospective Power Analysis Beyond the Web App","text":"","code":"# Three competing designs with similar total sequencing budget designs <- data.frame(   Design = c(\"Deep\", \"Balanced\", \"Wide\", \"Complete\"),   Cells_per_gRNA = c(2000, 5000, 10000, 10000),   Reads_per_Cell = c(80000, 40000, 20000, 80000),   Description = c(     \"Fewer cells, deeper sequencing\",     \"Balanced cells and depth\",     \"More cells, shallow sequencing\",     \"More cells, deeper sequencing\"   ) )  print(designs) #>     Design Cells_per_gRNA Reads_per_Cell                    Description #> 1     Deep           2000          80000 Fewer cells, deeper sequencing #> 2 Balanced           5000          40000       Balanced cells and depth #> 3     Wide          10000          20000 More cells, shallow sequencing #> 4 Complete          10000          80000  More cells, deeper sequencing"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"calculate-power-for-each-design","dir":"Articles","previous_headings":"2. Comparing Pre-existing Experimental Designs","what":"Calculate Power for Each Design","title":"Prospective Power Analysis Beyond the Web App","text":"Suppose ’re designing perturb-seq experiment K562 cell line. Suppose want perturb 100 targeted genes MOI 10, expect minimum fold change 0.8 10% target-gene pairs test, want control FDR 10%. Let’s compare overall power overall cost design:","code":"design_power_results <- list()  for (i in 1:nrow(designs)) {   set.seed(123)   power_result <- compute_power_plan(     baseline_expression_stats = baseline_expression,     library_parameters = library_params,     cells_per_target = designs$Cells_per_gRNA[i],     sequenced_reads_per_cell = designs$Reads_per_Cell[i],     MOI = 10,     num_targets = 100,     control_group = \"complement\",     side = \"left\",     prop_non_null = 0.1,     multiple_testing_alpha = 0.1,     TPM_threshold = 0.1,     minimum_fold_change = 0.8   )    design_power_results[[i]] <- data.frame(     Design = designs$Design[i],     Cells_per_gRNA = designs$Cells_per_gRNA[i],     Num_captured_Cells = power_result$num_captured_cells,     Reads_per_Cell = designs$Reads_per_Cell[i],     Overall_Power = power_result$overall_power,     Overall_Cost = perturbplan:::cost_computation(       num_captured_cells = power_result$num_captured_cells,       sequenced_reads_per_cell = power_result$sequenced_reads_per_cell       )   ) }  design_comparison <- bind_rows(design_power_results) print(design_comparison) #>     Design Cells_per_gRNA Num_captured_Cells Reads_per_Cell Overall_Power #> 1     Deep           2000              20500          80000     0.5522817 #> 2 Balanced           5000              51250          40000     0.6192765 #> 3     Wide          10000             102500          20000     0.6430014 #> 4 Complete          10000             102500          80000     0.7466946 #>   Overall_Cost #> 1      2376.36 #> 2      5174.20 #> 3      9581.70 #> 4     11881.80"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"visualize-power-comparison","dir":"Articles","previous_headings":"2. Comparing Pre-existing Experimental Designs","what":"Visualize Power Comparison","title":"Prospective Power Analysis Beyond the Web App","text":"Let’s visualize four designs two dimensional space overall power cost:","code":"ggplot(design_comparison, aes(x = Overall_Cost, y = Overall_Power, color = Design)) +   geom_point(size = 4) +   labs(     title = \"Power Comparison of Pre-existing Designs\",     x = \"Total Cost (USD)\",     y = \"Overall Power\",     color = \"Design\"   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     plot.title = element_text(face = \"bold\"),     panel.grid.minor = element_blank()   )"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"interpretation-1","dir":"Articles","previous_headings":"2. Comparing Pre-existing Experimental Designs","what":"Interpretation","title":"Prospective Power Analysis Beyond the Web App","text":"Non-linear cost-power relationship. comparison reveals important trade-offs overall cost overall power across four experimental designs. Higher cost generally leads higher power, relationship highly non-linear, critical implications experimental planning. Although cost differences consecutive designs similar magnitude, power gains vary dramatically. largest power improvements come moving away extreme designs: transitioning “Deep” (2,000 cells, 80K reads) “Balanced” (5,000 cells, 40K reads) “Wide” (10,000 cells, 20K reads) “Complete” (10,000 cells, 80K reads) yields substantial power gains. Statistical mechanisms underlying non-linear relationship. different power gain change experimental parameters emerges interaction two distinct statistical effects. First, saturation curve (explored Section 3) shows UMI counts plateau high read depths, limiting benefit deeper sequencing beyond ~40,000 reads per cell dataset. Second, statistical power increased cell numbers follows square-root relationship (power scales roughly √n), meaning doubling number cells provides diminishing marginal returns. Resource allocation strategies budget-constrained experiments. budget limited can afford incremental increases, prioritize moving away extreme designs. example, currently “Deep” design, adding cells (moving toward “Balanced”) typically provides better return investment adding sequencing depth.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"visualizing-expression-distributions-and-saturation-curves","dir":"Articles","previous_headings":"","what":"3. Visualizing Expression Distributions and Saturation Curves","title":"Prospective Power Analysis Beyond the Web App","text":"section, ’ll visualize K562 perturb-seq pilot data Gasperini et. al.(2019) terms baseline_expression_stats library_params. visualizations help understand cases data Gasperini et. al.(2019) good reference experiment statistical mechanisms underlying power analyses Sections 1 2.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"gene-expression-distribution","dir":"Articles","previous_headings":"3. Visualizing Expression Distributions and Saturation Curves","what":"Gene Expression Distribution","title":"Prospective Power Analysis Beyond the Web App","text":"baseline_expression_stats pilot data, let’s visualize distribution relative expression (TPM) dispersion size across genes K562 pilot data:","code":"# Prepare expression data expression_df <- baseline_expression %>%   mutate(     TPM = relative_expression * 1e6,     Log10_TPM = log10(TPM + 0.1)  # Add pseudocount for log   )  # Histogram of TPM values ggplot(expression_df, aes(x = TPM)) +   geom_histogram(bins = 50, fill = \"steelblue\", alpha = 0.7) +   scale_x_log10(     labels = scales::comma,     breaks = c(0.1, 1, 10, 100, 1000, 10000)   ) +   labs(     title = \"Distribution of Gene Expression Levels\",     subtitle = sprintf(\"%d genes in baseline data\", nrow(expression_df)),     x = \"Expression Level (TPM)\",     y = \"Number of Genes\"   ) +   theme_minimal() +   theme(panel.grid.minor.x = element_line(color = \"gray90\", linewidth = 0.5)) # Expression vs dispersion relationship ggplot(expression_df, aes(x = TPM, y = expression_size)) +   geom_point(alpha = 0.3, size = 1) +   geom_smooth(method = \"loess\", color = \"red\", linewidth = 1) +   scale_x_log10(labels = scales::comma) +   scale_y_log10() +   labs(     title = \"Gene Expression vs Dispersion Parameter\",     subtitle = \"Lower dispersion = higher biological variability\",     x = \"Expression Level (TPM)\",     y = \"Dispersion Size Parameter\"   ) +   theme_minimal() #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"read-saturation-curve-visualization","dir":"Articles","previous_headings":"3. Visualizing Expression Distributions and Saturation Curves","what":"Read saturation Curve Visualization","title":"Prospective Power Analysis Beyond the Web App","text":"library_params pilot data, let’s first visualize relationship reads per cell UMIs per cell, see experimental designs Section 2 map onto curve:  Also, can visualize percentage UMI detected (saturation) increases read depth:","code":"# Extract library parameters UMI_max <- library_params$UMI_per_cell variation <- library_params$variation  # Generate saturation curve reads_range <- seq(1000, 100000, length.out = 200) umis_predicted <- UMI_max * (1 - exp(-reads_range / UMI_max) *                                (1 + variation * reads_range^2 / (2 * UMI_max^2)))  saturation_df <- data.frame(   Reads_per_Cell = reads_range,   UMIs_per_Cell = umis_predicted,   Saturation_Pct = (umis_predicted / UMI_max) * 100 )  # Plot saturation curve ggplot(saturation_df, aes(x = Reads_per_Cell, y = UMIs_per_Cell)) +   geom_line(linewidth = 1, color = \"steelblue\") +   geom_hline(yintercept = UMI_max, linetype = \"dashed\", color = \"red\") +   annotate(\"text\", x = 80000, y = UMI_max * 1.05,            label = sprintf(\"Max UMI = %d\", round(UMI_max)),            color = \"red\", hjust = 1) +   # Add example design points   geom_point(data = data.frame(     Reads_per_Cell = c(20000, 40000, 80000),     Design = c(\"Wide\", \"Balanced\", \"Deep\")   ), aes(x = Reads_per_Cell, y = UMI_max * (1 - exp(-Reads_per_Cell / UMI_max) *                                               (1 + variation * Reads_per_Cell^2 / (2 * UMI_max^2)))),   size = 3, color = \"darkgreen\") +   geom_text(data = data.frame(     Reads_per_Cell = c(20000, 40000, 80000),     Design = c(\"Wide\", \"Balanced\", \"Deep\"),     UMI = UMI_max * (1 - exp(-c(20000, 40000, 80000) / UMI_max) *                        (1 + variation * c(20000, 40000, 80000)^2 / (2 * UMI_max^2)))   ), aes(x = Reads_per_Cell, y = UMI, label = Design),   vjust = -1, color = \"darkgreen\") +   scale_x_continuous(labels = scales::comma) +   scale_y_continuous(labels = scales::comma) +   labs(     title = \"Read-to-UMI Saturation Curve\",     subtitle = sprintf(\"UMI_per_cell = %d, variation = %.3f\",                       round(UMI_max), variation),     x = \"Reads per Cell\",     y = \"UMIs per Cell\",     caption = \"Green points show example experimental designs\"   ) +   theme_minimal() +   theme(panel.grid.minor = element_blank()) # Saturation percentage vs reads ggplot(saturation_df, aes(x = Reads_per_Cell, y = Saturation_Pct)) +   geom_line(linewidth = 1, color = \"steelblue\") +   geom_hline(yintercept = 80, linetype = \"dashed\", color = \"orange\", alpha = 0.5) +   geom_hline(yintercept = 90, linetype = \"dashed\", color = \"red\", alpha = 0.5) +   annotate(\"text\", x = 90000, y = 82, label = \"80% saturation\",            color = \"orange\", hjust = 1) +   annotate(\"text\", x = 90000, y = 92, label = \"90% saturation\",            color = \"red\", hjust = 1) +   scale_x_continuous(labels = scales::comma) +   labs(     title = \"Sequencing Saturation vs Read Depth\",     x = \"Reads per Cell\",     y = \"Saturation (%)\"   ) +   theme_minimal()"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/prospective-power.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Prospective Power Analysis Beyond the Web App","text":"?compute_power_plan: Prospective power analysis experimental planning ?compute_power_plan_per_grid: Grid-based power analysis ?library_estimation: Library parameter estimation QC data Vignette “Preprocess Reference Expression Data”: Creating custom pilot data Vignette “Getting Started PerturbPlan”: Basic power analysis workflow","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziang Niu. Author, maintainer. Yihui . Author. Eugene Katsevich. Author.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niu Z, Y, Katsevich E (2025). perturbplan: Perturbplan: Power Design Tools CRISPR Screens. R package version 0.2.0, https://katsevich-lab.github.io/perturbplan.","code":"@Manual{,   title = {perturbplan: Perturbplan: Power and Design Tools for CRISPR Screens},   author = {Ziang Niu and Yihui He and Eugene Katsevich},   year = {2025},   note = {R package version 0.2.0},   url = {https://katsevich-lab.github.io/perturbplan}, }"},{"path":"https://katsevich-lab.github.io/perturbplan/index.html","id":"perturbplan","dir":"","previous_headings":"","what":"PerturbPlan","title":"PerturbPlan","text":"PerturbPlan R package power analysis perturb-seq TAP-seq experiments. complements PerturbPlan web app, provides interactive interface experimental design. present, PerturbPlan package’s primary function prepare reference data web app: Shiny app users wishing provide custom reference data app use package prepare data upload. future, package include functionality carry sophisticated experimental design analyses supported web app.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PerturbPlan","text":"can install PerturbPlan GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"Katsevich-Lab/perturbplan\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":null,"dir":"Reference","previous_headings":"","what":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"Pre-computed pilot data A549 lung adenocarcinoma cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"","code":"A549_Sakellaropoulos"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (20,406 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (42,377) variation: Variation parameter PCR bias (0.376) mapping_efficiency Numeric. Mapping efficiency value (0.794)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"Paper: MethNet: robust approach identify regulatory hubs distal targets cancer methylomes Author Year: Sakellaropoulos et al., 2024 Journal: Nature Communications Accession: GSE236304 PMID: 37577603","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"dataset generated A549 lung adenocarcinoma cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition data processed extract key statistical parameters needed power analysis calculations.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"","code":"data(A549_Sakellaropoulos) str(A549_Sakellaropoulos) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t20406 obs. of  3 variables: #>   ..$ response_id        : chr [1:20406] \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" \"ENSG00000225880\" ... #>   ..$ relative_expression: num [1:20406] 3.92e-07 5.60e-06 8.59e-06 2.62e-07 1.93e-06 ... #>   ..$ expression_size    : num [1:20406] 0.601 2.767 173.024 0.326 431.582 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 42377 #>   ..$ variation   : num 0.376 #>  $ mapping_efficiency       : num 0.794"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":null,"dir":"Reference","previous_headings":"","what":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"Thin wrapper validates inputs forwards compiled routine.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"","code":"BH_cutoff_bisection(mean_list, sd_list, side, multiple_testing_alpha, QC_prob)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". multiple_testing_alpha Numeric. Target false discovery rate family-wise error rate. QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"Adjusted cutoff/significance level.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"function estimates false discovery proportion (FDP) computing expected number false discoveries divided expected total number discoveries, accounting quality control failures.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"","code":"FDP_estimate(mean_list, sd_list, side, cutoff, QC_prob)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". cutoff Numeric. Significance threshold rejecting hypotheses. QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"Numeric. estimated false discovery proportion (FDP).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"FDP computed : $$FDP = \\frac{E[\\text{False Discoveries}]}{E[\\text{Total Discoveries}]}$$ : False discoveries assumed follow null distribution Total discoveries include true false positives QC failure probabilities incorporated calculations","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"Pre-computed pilot data K562 chronic myelogenous leukemia cells generated using 10x Chromium technology. reference dataset 10x Genomics. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"","code":"K562_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (16,395 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (61,081) variation: Variation parameter PCR bias (0.421) mapping_efficiency Numeric. Mapping efficiency value (0.801)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"Paper: 10X Genomics dataset: 10k K562 cells Author Year: 10x Genomics (example data K562), 2018","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"dataset generated K562 chronic myelogenous leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"","code":"data(K562_10x) str(K562_10x) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t16395 obs. of  3 variables: #>   ..$ response_id        : chr [1:16395] \"ENSG00000243485\" \"ENSG00000241860\" \"ENSG00000286448\" \"ENSG00000237491\" ... #>   ..$ relative_expression: num [1:16395] 1.12e-07 7.65e-07 1.41e-07 6.94e-06 1.48e-05 ... #>   ..$ expression_size    : num [1:16395] 414.4428 0.6555 0.0515 7.965 8.8552 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 61082 #>   ..$ variation   : num 0.421 #>  $ mapping_efficiency       : num 0.801"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":null,"dir":"Reference","previous_headings":"","what":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"Pre-computed pilot data K562 chronic myelogenous leukemia cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"","code":"K562_Gasperini"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (19,942 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (59,163) variation: Variation parameter PCR bias (0.397) mapping_efficiency Numeric. Mapping efficiency value (0.711)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"Paper: Genome-wide Framework Mapping Gene Regulation via Cellular Genetic Screens Author Year: Gasperini et al., 2019 Journal: Cell Accession: GSE120861 PMID: 30612741","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"dataset generated K562 chronic myelogenous leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"","code":"data(K562_Gasperini) str(K562_Gasperini) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t19942 obs. of  3 variables: #>   ..$ response_id        : chr [1:19942] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000286448\" ... #>   ..$ relative_expression: num [1:19942] 1.50e-07 1.55e-06 7.33e-07 9.31e-07 7.43e-06 ... #>   ..$ expression_size    : num [1:19942] 0.3556 2.4156 7.7329 0.0341 3.4513 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 59163 #>   ..$ variation   : num 0.397 #>  $ mapping_efficiency       : num 0.711"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":null,"dir":"Reference","previous_headings":"","what":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"Pre-computed pilot data K562 chronic myelogenous leukemia cells generated using TAP-seq (targeted perturb-seq) 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments. TAP-seq uses targeted sequencing profile focused gene panel, providing cost-effective power analysis experiments targeting specific pathways gene sets.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"","code":"K562_Ray"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (303 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (2,377) variation: Variation parameter PCR bias (0.809) mapping_efficiency Numeric. Mapping efficiency value (0.349)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"Paper: unbiased survey distal element-gene regulatory interactions direct-capture targeted Perturb-seq Author Year: Ray et al., 2025 Journal: (Publication details pending) Accession: GSE303901 PMID: 41000760","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"dataset generated using DC TAP-seq (Direct-Capture Targeted Perturb-seq), enhanced version targeted perturb-seq integrates CRISPR-based perturbations direct-capture single-cell RNA sequencing. capturing guide RNAs alongside targeted gene transcripts within sequencing reaction, DC TAP-seq enables high-throughput, unbiased mapping distal regulatory element–gene interactions improved sensitivity reduced technical noise. approach allows simultaneous measurement perturbation identity gene expression thousands single cells, facilitating large-scale functional dissection noncoding regions single-cell resolution. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Ray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K562 Ray TAP-seq reference data for CRISPR power analysis — K562_Ray","text":"","code":"data(K562_Ray) str(K562_Ray) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t303 obs. of  3 variables: #>   ..$ response_id        : chr [1:303] \"ENSG00000235169\" \"ENSG00000130764\" \"ENSG00000116198\" \"ENSG00000159023\" ... #>   ..$ relative_expression: num [1:303] 0.003732 0.000337 0.000121 0.001622 0.00034 ... #>   ..$ expression_size    : num [1:303] 2.55 3.92 18.58 5.21 1.73 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 2377 #>   ..$ variation   : num 0.809 #>  $ mapping_efficiency       : num 0.349"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"Pre-computed pilot data THP-1 monocytic leukemia cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"","code":"THP1_Yao"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (16,373 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (77,799) variation: Variation parameter PCR bias (0.354) mapping_efficiency Numeric. Mapping efficiency value (0.677)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"Paper: Scalable genetic screening regulatory circuits using compressed Perturb-seq Author Year: Yao et al., 2023 Journal: Nature Biotechnology Accession: GSE221321 PMID: 36747806","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"dataset generated THP-1 monocytic leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: NT (non-targeting) cells low-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"","code":"data(THP1_Yao) str(THP1_Yao) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t16373 obs. of  3 variables: #>   ..$ response_id        : chr [1:16373] \"ENSG00000238009\" \"ENSG00000225880\" \"ENSG00000230368\" \"ENSG00000224969\" ... #>   ..$ relative_expression: num [1:16373] 1.84e-07 1.49e-06 1.26e-06 5.81e-06 4.16e-06 ... #>   ..$ expression_size    : num [1:16373] 293.372 422.253 420.589 0.604 0.193 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 77799 #>   ..$ variation   : num 0.354 #>  $ mapping_efficiency       : num 0.677"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":null,"dir":"Reference","previous_headings":"","what":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"Pre-computed pilot data primary CD8+ T cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"","code":"T_CD8_Shifrut"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (20,935 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (8,801) variation: Variation parameter PCR bias (0.297) mapping_efficiency Numeric. Mapping efficiency value (0.679)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"Paper: Genome-wide CRISPR Screens Primary Human T Cells Reveal Key Regulators Immune Function Author Year: Shifrut et al., 2018 Journal: Cell Accession: GSE119450 PMID: 30449619","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"dataset generated primary CD8+ T cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"","code":"data(T_CD8_Shifrut) str(T_CD8_Shifrut) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t20935 obs. of  3 variables: #>   ..$ response_id        : chr [1:20935] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:20935] 2.27e-07 4.66e-07 1.98e-05 1.25e-05 1.26e-06 ... #>   ..$ expression_size    : num [1:20935] 355.245 408.681 0.811 8.116 2.517 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 8801 #>   ..$ variation   : num 0.297 #>  $ mapping_efficiency       : num 0.679"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"function computes adjusted significance level (cutoff) multiple hypothesis testing using either Benjamini-Hochberg (BH) Bonferroni correction, accounting quality control failures.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"","code":"adjusted_cutoff(   mean_list,   sd_list,   multiple_testing_alpha,   multiple_testing_method,   side,   QC_prob )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. multiple_testing_alpha Numeric. Target false discovery rate family-wise error rate. multiple_testing_method Character. Multiple testing method, either \"BH\" \"bonferroni\". side Character. Test sidedness: \"left\", \"right\", \"\". QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"Numeric. adjusted significance level (cutoff threshold).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"function implements: BH method: Uses bisection search find appropriate cutoff controls false discovery rate specified level Bonferroni method: Divides target alpha effective number tests (accounting QC failures)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Power Analysis Results — check_power_results","title":"Validate Power Analysis Results — check_power_results","text":"Validates power analysis results sufficient data applying cost power filters. Returns original unfiltered data validation passes.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Power Analysis Results — check_power_results","text":"","code":"check_power_results(   power_df,   cost_constraint,   cost_precision,   power_target,   power_precision )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Power Analysis Results — check_power_results","text":"power_df Data frame. Power analysis results columns including overall_power, total_cost. cost_constraint Numeric. Maximum budget constraint dollars. Set NULL disable cost filtering. cost_precision Numeric. Cost utilization factor. Filters designs total cost \\le cost_precision × cost_constraint. power_target Numeric. Target statistical power. power_precision Numeric. Acceptable precision around power target. Filters designs power \\ge power_target - power_precision.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Power Analysis Results — check_power_results","text":"Data frame. original unfiltered power analysis results (validation passes).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Power Analysis Results — check_power_results","text":"function validates filtering viability without actually filtering: Cost check: Verifies total_cost \\le cost_precision × cost_constraint     leave least one row (cost_constraint NULL) Power check: Verifies overall_power \\ge power_target - power_precision leave least one row Throws informative errors validation checks fail, otherwise returns original data.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute QC probability for each enhancer-gene pair — compute_QC","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"Compute QC probability enhancer-gene pair","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"","code":"compute_QC(   fold_change_mean,   expression_mean,   expression_size,   num_cntrl_cells,   num_trt_cells,   n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"fold_change_mean Numeric. Mean fold change effect size. expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution. num_cntrl_cells Integer. Number control cells score test. num_trt_cells Integer. Number treatment cells score test. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"Probability enhancer-gene pair filtered due QC","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"function computes asymptotic mean standard deviation score test statistic used differential expression analysis single-cell perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"","code":"compute_distribution_teststat(   num_trt_cells,   num_cntrl_cells,   num_trt_cells_sq,   expression_mean,   expression_size,   fold_change_mean,   fold_change_sd )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"num_trt_cells Integer. Number treatment cells score test. num_cntrl_cells Integer. Number control cells score test. num_trt_cells_sq Numeric. Squared number treatment cells (used variance calculations). expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution. fold_change_mean Numeric. Mean fold change effect size. fold_change_sd Numeric. Standard deviation fold change effect size.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"list elements: mean Asymptotic mean test statistic sd Asymptotic standard deviation test statistic","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"function computes asymptotic distribution parameters score test statistic negative binomial model. calculations account : Random effect sizes following normal distribution Negative binomial distribution gene expression Unequal sample sizes treatment control groups Pooled variance estimation denominator score test statistic follows asymptotically normal distribution null alternative hypotheses.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"Computes asymptotic mean standard deviation score test statistic random effect sizes perturb-seq experiments. function handles case fold changes vary randomly across perturbations, using average fold change second moment.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"","code":"compute_distribution_teststat_random_es_cpp(   num_trt_cell,   num_cntrl_cell,   expression_mean,   expression_size,   avg_fold_change,   avg_fold_change_sq )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"num_trt_cell Numeric. Number treatment cells num_cntrl_cell Numeric. Number control cells expression_mean Numeric. Mean baseline expression level expression_size Numeric. Size parameter negative binomial distribution avg_fold_change Numeric. Average fold change across perturbations avg_fold_change_sq Numeric. Average squared fold changes (second moment)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"list containing: mean Numeric. Asymptotic mean test statistic sd Numeric. Asymptotic standard deviation test statistic","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"function computes asymptotic distribution score test statistic assumption random effect sizes. key difference fixed effect sizes accounts variability fold changes using second moment (avg_fold_change_sq). computation follows steps: Compute treatment/control cell proportions Calculate treatment, control, pooled expression means Compute pooled variance using negative binomial variance formula Calculate denominator squared test statistic Compute control group variance Compute treatment group variance (incorporating fold change variability) Calculate final asymptotic mean standard deviation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"Compute Monte Carlo test statistics power analysis random effect sizes","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"","code":"compute_monte_carlo_teststat_cpp(   fc_expression_df,   library_size,   num_trt_cells,   num_cntrl_cells )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"fc_expression_df Data frame fold change expression information library_size Library size parameter num_trt_cells Number treatment cells num_cntrl_cells Number control cells","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"List Monte Carlo mean standard deviation vectors","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"function performs power analysis experimental planning phase using underspecified information. accepts aggregate experimental parameters (cells per target, reads per cell) without requiring specific cell count assignments individual gRNAs perturbation-gene pairs. also allows specifying list experimental parameters compare across. useful designing experiments data collection, allowing explore different experimental designs (cell numbers, sequencing depth) affect overall statistical power.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"","code":"compute_power_plan(   TPM_threshold,   minimum_fold_change,   cells_per_target,   sequenced_reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. Pairs effects least large considered non-null. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. sequenced_reads_per_cell Numeric, numeric vector, character. Sequenced reads per cell (raw sequencer output), custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses, .e., fraction tested pairs expected exhibit effect least large specified minimum_fold_change (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold achieve (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"Data frame comprehensive power analysis results across parameter combinations.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"function provides comprehensive power analysis : Expanding parameter combinations (TPM thresholds, fold changes) Creating fold change expression data combination Running compute_power_plan_per_grid() parameter set Combining results flat dataframe analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power analysis for experimental planning (underspecified design) — compute_power_plan","text":"","code":"# Define parameter ranges for comprehensive analysis TPM_threshold <- c(5, 10, 15) minimum_fold_change <- c(0.7, 0.8, 0.9) cells_per_target <- c(50, 100, 200) sequenced_reads_per_cell <- c(10000, 25000, 50000)  # Get pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Run comprehensive power analysis full_results <- compute_power_plan(   TPM_threshold = TPM_threshold,   minimum_fold_change = minimum_fold_change,   cells_per_target = cells_per_target,   sequenced_reads_per_cell = sequenced_reads_per_cell,   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   MOI = 10,   num_targets = 100,   side = \"left\" )  # Examine results dim(full_results) #> [1] 81  7 head(full_results) #> # A tibble: 6 × 7 #>   minimum_fold_change TPM_threshold cells_per_target num_captured_cells #>                 <dbl>         <dbl>            <dbl>              <dbl> #> 1                 0.7             5               50               512. #> 2                 0.7             5              100              1025  #> 3                 0.7             5              200              2050  #> 4                 0.7             5               50               512. #> 5                 0.7             5              100              1025  #> 6                 0.7             5              200              2050  #> # ℹ 3 more variables: sequenced_reads_per_cell <dbl>, library_size <dbl>, #> #   overall_power <dbl> summary(full_results$overall_power) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0000087 0.0035579 0.0244641 0.0968134 0.1208887 0.7185824"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"function computes overall power BH cutoff single experimental design. core utility function used grid-based power analysis functions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"","code":"compute_power_plan_overall(   num_trt_cells,   num_cntrl_cells,   library_size,   multiple_testing_alpha = 0.05,   multiple_testing_method = \"BH\",   side = \"left\",   fc_expression_df,   prop_non_null = 0.1,   return_full_results = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"num_trt_cells Number treatment cells num_cntrl_cells Number control cells library_size Library size (effective UMIs per cell) multiple_testing_alpha Alpha level multiple testing (default: 0.05) multiple_testing_method Multiple testing method (default: \"BH\") side Test sidedness (\"left\", \"right\", \"\", default: \"left\") fc_expression_df Data frame fold change expression info prop_non_null Proportion non-null hypotheses (default: 0.1) return_full_results TRUE, return list intermediate results; FALSE, return overall power","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"Overall power value (scalar) list full results depending return_full_results","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"function serves core power calculation utility : Computes test statistic distributions gene Applies Benjamini-Hochberg multiple testing correction Calculates overall statistical power function delegates optimized C++ implementation performance.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"","code":"# Extract fold change and expression information fc_expr_info <- extract_fc_expression_info(   minimum_fold_change = 0.8,   gRNA_variability = 0.13,   biological_system = \"K562\",   B = 200 ) #> TPM filtering: Kept 8281 out of 19942 genes (threshold: 10 TPM) #> Random mode with replacement: Sampled 200 genes from 8281 available genes  # Get library parameters pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Calculate effective library size for 25000 reads per cell library_size <- fit_read_UMI_curve(   reads_per_cell = 25000,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # Calculate power for a specific experimental design power_result <- compute_power_plan_overall(   fc_expression_df = fc_expr_info$fc_expression_df,   library_size = library_size,   num_trt_cells = 400,   num_cntrl_cells = 600,   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1 )  print(paste(\"Overall power:\", round(power_result, 3))) #> [1] \"Overall power: 0.369\""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"C++ implementation compute_power_plan_overall provides significant performance improvements power analysis computations. Uses random effect sizes format avg_fold_change avg_fold_change_sq columns.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"","code":"compute_power_plan_overall_cpp(   fc_expression_df,   library_size,   num_trt_cells,   num_cntrl_cells,   multiple_testing_alpha = 0.05,   multiple_testing_method = \"BH\",   side = \"left\",   prop_non_null = 0.1,   return_full_results = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"fc_expression_df DataFrame fold change expression info. Must contain: relative_expression: Relative expression levels expression_size: Size parameters negative binomial distribution avg_fold_change: Average fold change across perturbations avg_fold_change_sq: Average squared fold changes (second moment) library_size Numeric. Effective library size num_trt_cells Numeric. Number treatment cells num_cntrl_cells Numeric. Number control cells multiple_testing_alpha Numeric. FDR target level (default 0.05) multiple_testing_method String. Method (\"BH\" supported) side String. Test sidedness (\"left\", \"right\", \"\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1) return_full_results Logical. Return full results just overall power","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"Numeric overall power (return_full_results=FALSE) List full results","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"C++ implementation uses optimized C++ functions random effect sizes: compute_monte_carlo_teststat_cpp(): Monte Carlo test statistics random effect sizes compute_BH_plan(): Benjamini-Hochberg significance cutoff rejection_computation_cpp(): Power calculations function provides identical results R version offering significant performance improvements eliminating R function call overhead.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"Simplified version identify_cell_read_range returns clean dataframe experimental design combinations corresponding power values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"","code":"compute_power_plan_per_grid(   cells_per_target,   reads_per_cell,   fc_expression_df,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   MOI = 10,   num_targets = 100,   gRNAs_per_target = 4,   non_targeting_gRNAs = 10,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. fc_expression_df Data frame fold change expression information. library_parameters List containing UMI_per_cell variation parameters. grid_size Integer. Number points dimension grid (default: 10). min_power_threshold Numeric. Minimum power threshold cell range determination (default: 0.01). max_power_threshold Numeric. Maximum power threshold cell range determination (default: 0.8). MOI Numeric. Multiplicity infection cell allocation calculations (default: 10). num_targets Integer. Number targets cell allocation calculations (default: 100). gRNAs_per_target Integer. Number gRNAs per target (default: 4). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). control_group String. Control group type: \"complement\" \"nt_cells\" (default: \"complement\"). multiple_testing_alpha Numeric. Alpha level multiple testing (default: 0.05). side String. Test sidedness: \"left\", \"right\", \"\" (default: \"left\"). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"Data frame columns: cells_per_target Numeric. Number treatment cells per target reads_per_cell Numeric. Sequencing reads per cell library_size Numeric. Effective library size (UMIs) overall_power Numeric. Statistical power experimental design num_captured_cells Numeric. Number captured cells sequenced_reads_per_cell Numeric. Raw reads per cell mapping","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"function simplifies experimental design process : Determining parameter sequences based input type: - Numeric value: Single fixed value (length = 1) - Numeric vector: Custom sequence (length = vector length) - \"varying\": Auto-generated sequence using optimal ranges (length = grid_size) Creating dynamic grids based sequence lengths: - Grid size = length(cells_seq) × length(reads_seq) - Examples: 1×1 (fixed), 5×1 (custom cells, fixed reads), 10×10 (varying) Computing power parameter combinations Returning clean dataframe ready analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"","code":"# Extract fold change and expression information fc_expr_info <- extract_fc_expression_info(   minimum_fold_change = 0.8,   gRNA_variability = 0.13,   biological_system = \"K562\",   B = 200 ) #> TPM filtering: Kept 8281 out of 19942 genes (threshold: 10 TPM) #> Random mode with replacement: Sampled 200 genes from 8281 available genes  # Get library parameters pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define experimental design grids cells_per_target <- c(50, 100, 200) reads_per_cell <- c(10000, 25000, 50000)  # Compute power across the grid power_grid <- compute_power_plan_per_grid(   cells_per_target = cells_per_target,   reads_per_cell = reads_per_cell,   fc_expression_df = fc_expr_info$fc_expression_df,   library_parameters = library_params,   MOI = 10,   num_targets = 100,   side = \"left\" )  # View results head(power_grid) #> # A tibble: 6 × 6 #>   cells_per_target reads_per_cell library_size overall_power num_captured_cells #>              <dbl>          <dbl>        <dbl>         <dbl>              <dbl> #> 1               50          10000        8917.       0.00327               512. #> 2              100          10000        8917.       0.0145               1025  #> 3              200          10000        8917.       0.0789               2050  #> 4               50          25000       19016.       0.00542               512. #> 5              100          25000       19016.       0.0404               1025  #> 6              200          25000       19016.       0.219                2050  #> # ℹ 1 more variable: sequenced_reads_per_cell <dbl> print(paste(\"Grid size:\", nrow(power_grid))) #> [1] \"Grid size: 9\""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","title":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","text":"function performs post-hoc power analysis using detailed experimental information. Unlike compute_power_plan, function accepts specific cell count assignments per gRNA (via cells_per_grna) calculates power individual perturbation-gene pairs. Also, allow specifying multiple experimental designs. useful analyzing completed experiments evaluating specific experimental designs known cell distributions, providing individual power estimates perturbation-gene pair well expected total discoveries.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","text":"","code":"compute_power_posthoc(   discovery_pairs,   cells_per_grna,   baseline_expression_stats,   control_group,   fold_change_mean,   fold_change_sd,   num_total_cells = NULL,   cutoff = NULL,   n_nonzero_trt_thresh = 7L,   n_nonzero_cntrl_thresh = 7L,   side = \"both\",   multiple_testing_method = \"BH\",   multiple_testing_alpha = 0.1 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","text":"discovery_pairs data frame specifying element-gene pairs consider, columns grna_target response_id cells_per_grna data frame specifying many cells contain gRNA, columns grna_id, grna_target, num_cells baseline_expression_stats data frame specifying baseline expression statistics gene, columns response_id, expression_mean, expression_size control_group character string specifying control group, either \"complement\" \"nt_cells\" fold_change_mean numeric value use mean effect size element-gene pairs fold_change_sd numeric value use standard deviation effect size element-gene pairs num_total_cells (Required control_group == \"complement\") positive integer specifying total number cells experiment cutoff (Optional) numeric value 0 1 use p-value cutoff n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 side (Optional) character string specifying side test, either \"left\", \"right\", \"\"; defaults \"\" multiple_testing_method (Optional) character string specifying multiple testing correction method use, either \"BH\" \"bonferroni\"; defaults \"BH\" multiple_testing_alpha (Optional) numeric value 0 1 specifying alpha level multiple testing correction; defaults 0.1","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","text":"list two elements: individual_power (data frame columns grna_target, response_id, power) expected_num_discoveries (numeric value)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute post-hoc power analysis for individual perturbation-gene pairs — compute_power_posthoc","text":"","code":"## --- Toy perturb-seq dataset setup --- # Total number of cells in the experiment num_total_cells <- 1000L  # Number of cells receiving each gRNA # (3 enhancers × 2 gRNAs each + 2 non-targeting gRNAs) cells_per_grna <- data.frame(   grna_id      = c(\"enh1_grna1\",\"enh2_grna1\",\"enh3_grna1\",\"nt_grna1\",                    \"enh1_grna2\",\"enh2_grna2\",\"enh3_grna2\",\"nt_grna2\"),   grna_target  = c(\"enh1\",\"enh2\",\"enh3\",\"non-targeting\",                    \"enh1\",\"enh2\",\"enh3\",\"non-targeting\"),   num_cells    = c(93L,113L,112L,104L,84L,104L,107L,105L),   stringsAsFactors = FALSE )  # Baseline expression statistics (negative binomial mean and size per gene) baseline_expression_stats <- data.frame(   response_id       = paste0(\"gene\", 1:4),   expression_mean   = c(2.002931, 12.326867, 4.014221, 1.460472),   expression_size   = c(0.2967991, 8.3723191, 2.5988431, 2.6746265),   stringsAsFactors = FALSE )  # Discovery pairs: test 3 enhancers against 4 genes discovery_pairs <- within(expand.grid(   grna_target = c(\"enh1\",\"enh2\",\"enh3\"),   response_id = paste0(\"gene\", 1:4),   KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE ), { grna_target <- as.character(grna_target); response_id <- as.character(response_id) })  ## --- Analysis choices --- control_group <- \"complement\"          # use complement control group side <- \"left\"                         # left-sided test n_nonzero_trt_thresh   <- 7L            # min. nonzero counts in treatment n_nonzero_cntrl_thresh <- 7L            # min. nonzero counts in control  ## --- Power analysis parameters --- fold_change_mean <- 0.85                # expected mean fold change fold_change_sd   <- 0.13                # expected SD of fold change cutoff <- 0.005                         # significance threshold (p-value cutoff)  ## --- Run PerturbPlan posthoc power analysis --- power_results <- compute_power_posthoc(   num_total_cells = num_total_cells,   cells_per_grna = cells_per_grna,   baseline_expression_stats = baseline_expression_stats,   discovery_pairs = discovery_pairs,   control_group = control_group,   side = side,   n_nonzero_trt_thresh = n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh = n_nonzero_cntrl_thresh,   fold_change_mean = fold_change_mean,   fold_change_sd = fold_change_sd,   cutoff = cutoff )  # Inspect outputs names(power_results)                    # available fields #> [1] \"individual_power\"         \"expected_num_discoveries\" power_results$expected_num_discoveries  # expected number of discoveries #> [1] 4.8324 head(power_results$individual_power)    # power per enhancer-gene pair #> # A tibble: 6 × 3 #>   grna_target response_id  power #>   <chr>       <chr>        <dbl> #> 1 enh1        gene1       0.0660 #> 2 enh2        gene1       0.0831 #> 3 enh3        gene1       0.0839 #> 4 enh1        gene2       0.718  #> 5 enh2        gene2       0.744  #> 6 enh3        gene2       0.745"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"Lightweight C++ function computes power single cell count read depth combination. Optimized use binary search algorithms cell range determination.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"","code":"compute_single_power_cpp(   num_cells,   reads_per_cell,   fc_expression_df,   UMI_per_cell,   variation,   MOI = 10,   num_targets = 100L,   gRNAs_per_target = 4L,   non_targeting_gRNAs = 10L,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"num_cells Numeric. Total number cells experiment reads_per_cell Numeric. Sequencing reads per cell fc_expression_df DataFrame fold change expression info UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve variation Numeric. Variation parameter S-M curve MOI Numeric. Multiplicity infection (default 10) num_targets Integer. Number targets (default 100) gRNAs_per_target Integer. gRNAs per target (default 4) non_targeting_gRNAs Integer. Non-targeting gRNAs (default 10) control_group String. Control group type (\"complement\" \"nt_cells\", default \"complement\") multiple_testing_alpha Numeric. FDR target level (default 0.05) side String. Test sidedness (\"left\", \"right\", \"\", default \"left\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"Numeric. Overall power specified experimental design point","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"function efficiently computes power single experimental condition : Converting read depth library size using S-M curve (fit_read_UMI_curve_cpp) Calculating treatment control cell counts based experimental design Computing overall power using compute_power_plan_overall_cpp function designed use binary search algorithms determine optimal cell count ranges based power thresholds.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probability mass of NB distribution at zero — compute_zero_prob","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"Compute probability mass NB distribution zero","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"","code":"compute_zero_prob(fold_change_mean, expression_mean, expression_size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"fold_change_mean Numeric. Mean fold change effect size. expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"Probability NB variable 0","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute experimental cost for perturb-seq experiments — cost_computation","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"function calculates total cost perturb-seq experiment combining library preparation costs sequencing costs based experimental platform, sequencing platform, number captured cells, raw reads per cell.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"","code":"cost_computation(   experimental_platform = \"10x Chromium v3\",   sequencing_platform = \"NovaSeq X 25B\",   num_captured_cells,   sequenced_reads_per_cell )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"experimental_platform Character. experimental platform used single-cell capture. Currently supported: \"10x Chromium v3\" (default). sequencing_platform Character. sequencing platform used RNA-seq. Currently supported: \"NovaSeq X 25B\" (default). num_captured_cells Numeric. Number captured cells experiment. sequenced_reads_per_cell Numeric. Number raw sequencing reads per cell.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"Numeric. Total experimental cost USD combining library preparation sequencing costs.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"cost calculation includes two main components: Library preparation cost: Based cost per captured cell experimental platform Sequencing cost: Based cost per million reads sequencing platform Current cost parameters: 10x Chromium v3: $0.086 per captured cell NovaSeq X 25B: $0.374 per million reads Total cost = (cost_per_captured_cell × num_captured_cells) + (cost_per_million_reads × sequenced_reads_per_cell × num_captured_cells / 1e6)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","title":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","text":"Performs comprehensive power analysis across experimental design space optional cost constraints perturb-seq experiments. Computes power across parameter grids applies filtering based power targets budget constraints.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","text":"","code":"cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 20,   power_target = 0.8,   power_precision = 0.01,   min_power = 0.05,   max_power = 0.95,   cost_precision = 0.9,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint = NULL,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","text":"minimizing_variable Character. parameter vary analysis. Options: \"TPM_threshold\" \"minimum_fold_change\". Default: \"TPM_threshold\". fixed_variable List. Fixed values analysis parameters. Can include: minimum_fold_change: Fixed fold change threshold (varying TPM_threshold) TPM_threshold: Fixed TPM threshold (varying minimum_fold_change) cells_per_target: Fixed cells per target (otherwise uses \"varying\") reads_per_cell: Fixed reads per cell (otherwise uses \"varying\") MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. gRNA variability parameter (default: 0.13). control_group Character. Control group type: \"complement\" \"non_targeting\" (default: \"complement\"). side Character. Test side: \"left\", \"right\", \"\" (default: \"left\"). multiple_testing_alpha Numeric. Multiple testing significance level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics columns: response_id, relative_expression, expression_size. library_parameters List. Library parameters containing UMI_per_cell variation. grid_size Integer. Grid size parameter search (default: 20). power_target Numeric. Target statistical power (default: 0.8). power_precision Numeric. Acceptable precision around power target (default: 0.01). min_power Numeric. Minimum power threshold grid search (default: 0.05). max_power Numeric. Maximum power threshold grid search (default: 0.95). cost_precision Numeric. Cost utilization factor (default: 0.9). Filters designs total cost \\le cost_precision × cost_constraint. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). cost_constraint Numeric. Maximum budget constraint dollars (default: NULL). Set NULL disable cost constraints. mapping_efficiency Numeric. Sequencing mapping efficiency (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","text":"Data frame power analysis results including: Analysis parameters (TPM_threshold, minimum_fold_change, etc.) Experimental design (cells_per_target, num_captured_cells, sequenced_reads_per_cell) Power metrics (overall_power) Cost breakdown (library_cost, sequencing_cost, total_cost)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cost-Constrained Power Analysis for Perturb-seq Experiments — cost_power_computation","text":"function performs comprehensive power analysis : Setting parameter grids based minimizing variable Computing power across experimental design space Calculating costs design Applying validation checks via check_power_results() Cost Model: Total cost calculated sum library preparation sequencing costs: Total Cost = Library Cost + Sequencing Cost : Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (sequenced_reads_per_cell * num_captured_cells) / 1,000,000 Parameter grid generation: TPM_threshold: Uses quantiles baseline expression (10th 99th percentile) minimum_fold_change: Uses ranges based test side (left: 0.5-0.9, right: 1-10, : combined)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract baseline expression information without fold change augmentation — extract_expression_info","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"function extracts processes baseline expression data power analysis without adding fold change parameters. handles pilot data loading, TPM filtering, gene sampling. modularized version first part extract_fc_expression_info.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"","code":"extract_expression_info(   biological_system = \"K562\",   B = 200,   gene_list = NULL,   TPM_threshold = 10,   custom_pilot_data = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"biological_system Character. Biological system baseline expression. Available options: \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\" (default: \"K562\"). B Integer. Number Monte Carlo samples generate gene_list NULL (default: 200). Ignored gene_list provided. gene_list Character vector. Optional list Ensembl gene IDs use analysis. provided, expression parameters extracted specified genes (sampling). NULL (default), B genes randomly sampled baseline data. TPM_threshold Numeric. Minimum TPM threshold (default: 10). Genes expression levels TPM_threshold/1e6 filtered power calculation. custom_pilot_data List. Optional custom pilot data. provided, data used instead default biological_system data. Must contain baseline_expression_stats (data frame gene expression data) library_parameters (UMI_per_cell variation).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"list elements: expression_df Data frame baseline expression parameters (response_id, relative_expression, expression_size) pilot_data Complete pilot data object use n_genes Integer number genes processed dataset","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"function operates two modes: Gene-specific mode (gene_list provided): Uses specified genes importance sampling Random sampling mode (gene_list = NULL): Randomly samples B genes baseline Processing steps: Load pilot data (custom package) Apply TPM threshold filtering Sample genes according specified mode Return baseline expression data ready fold change augmentation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fold change and expression information for power analysis — extract_fc_expression_info","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"function combines fold change effect size sampling baseline expression data create comprehensive dataset Monte Carlo power analysis simulations. can handle user-specified genes random sampling scenarios.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"","code":"extract_fc_expression_info(   minimum_fold_change,   gRNA_variability,   biological_system = \"K562\",   B = 200,   gene_list = NULL,   TPM_threshold = 10,   custom_pilot_data = NULL,   gRNAs_per_target = 4 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"minimum_fold_change Numeric. Minimum expected fold change effect (mean gRNA effect distribution). gRNA_variability Numeric. Standard deviation gRNA effect sizes, representing variability gRNAs targeting gene. biological_system Character. Biological system baseline expression. Available options: \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\" (default: \"K562\"). B Integer. Number Monte Carlo samples generate gene_list NULL (default: 200). Ignored gene_list provided. gene_list Character vector. Optional list Ensembl gene IDs use analysis. provided, expression parameters extracted specified genes (sampling). NULL (default), B genes randomly sampled baseline data. TPM_threshold Numeric. Minimum TPM threshold (default: 10). Genes expression levels TPM_threshold/1e6 filtered power calculation. custom_pilot_data List. Optional custom pilot data. provided, data used instead default biological_system data. Must contain baseline_expression_stats (data frame relative_expression expression_size columns) library_parameters (UMI_per_cell variation). See reference_data_preprocessing_10x processing 10x Cell Ranger output reference_data_processing pilot data processing. gRNAs_per_target Integer. Number gRNAs per target (default: 4). target gRNAs_per_target individual gRNA effect sizes drawn specified fold change distribution. avg_fold_change avg_fold_change_sq calculated mean mean--squares gRNA effect sizes.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"list elements: fc_expression_df Data frame avg_fold_change, avg_fold_change_sq, expression parameters minimum_fold_change Numeric. input minimum fold change reference pilot_data List. Complete pilot data object use","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"function operates two modes: Gene-specific mode (gene_list provided): Uses specified genes, sampling Random sampling mode (gene_list = NULL): Randomly samples B genes baseline modes: Sets random seed reproducibility Filters genes TPM threshold (relative_expression < TPM_threshold/1e6) Generates gRNAs_per_target effect sizes per target normal distribution Calculates avg_fold_change avg_fold_change_sq gRNA effect sizes Returns combined data Monte Carlo integration random effect sizes","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"Identifies cost-optimal experimental designs achieve target statistical power within specified precision bounds. function processes cost-power analysis results find minimal-cost designs parameter level generates detailed cost grids design optimization.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"","code":"find_optimal_cost_design(   cost_power_df,   minimizing_variable,   power_target,   power_precision,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_grid_size = 50 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"cost_power_df Data frame. Output cost_power_computation containing power analysis results cost calculations. Must include columns: overall_power, total_cost, cells_per_target, sequenced_reads_per_cell, plus specified minimizing variable (except cost optimization). minimizing_variable Character. parameter optimized. Must one : \"TPM_threshold\": TPM expression threshold optimization \"minimum_fold_change\": Minimum fold change threshold optimization \"cost\": Total cost optimization across experimental designs power_target Numeric. Target statistical power level (typically 0.8 80% power). Must 0 1. power_precision Numeric. Acceptable precision around power target. Designs power within power_target ± power_precision considered acceptable. Must 0 1. MOI Numeric. Multiplicity infection parameter experimental design calculations (default: 10). Used compute number captured cells. num_targets Integer. Number target genes experiment (default: 100). Used cost calculations. non_targeting_gRNAs Integer. Number non-targeting gRNAs experiment (default: 10). Used calculate total library size captured cell requirements. gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). Used calculate total gRNAs experimental design parameters. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_grid_size Integer. Number grid points cost optimization grid (default: 200). Higher values provide finer resolution longer computation time.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"list containing two elements: optimal_cost_power_df Data frame optimal power-cost combinations, including columns input plus minimum cost information cost precision. optimal_cost_grid Data frame nested cost grids parameter level, containing detailed design alternatives within cost precision bounds.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"function implements three-stage cost optimization process: Stage 1: Power Filtering Filters input data designs achieving power within target ± precision Ensures viable designs (meeting power requirements) considered Stage 2: Cost Optimization Groups designs minimizing variable (e.g., TPM_threshold levels) Identifies minimum cost parameter level Computes cost precision (1% minimum cost) grid generation Records parameter ranges (min/max cells reads per cell) level Stage 3: Design Grid Generation Creates log-spaced grids within parameter ranges level Computes detailed cost components (library + sequencing costs) Filters designs within cost precision bounds (±1% minimum cost) Applies sampling reduce redundant designs preserving diversity Cost Model: Total cost calculation: Total Cost = Library Cost + Sequencing Cost : Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (reads_per_cell * num_captured_cells) / 1,000,000 num_captured_cells = ((gRNAs_per_target * num_targets + non_targeting_gRNAs) * cells_per_target) / (gRNAs_per_target * MOI) function designed work output cost_power_computation() provides fine-grained cost optimization experimental design selection.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"function computes effective library size (UMIs) sequencing read depth using fitted saturation curves account PCR amplification bias UMI saturation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"","code":"fit_read_UMI_curve(reads_per_cell, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"reads_per_cell Numeric. Total reads per cell. UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve fit. variation Numeric. Variation parameter characterizing PCR bias S-M curve fit.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"Numeric. Effective library size UMIs.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"saturation-magnitude (S-M) curve model relates sequencing reads unique UMI counts accounting : PCR amplification variability UMI saturation high read depths Platform-specific technical biases","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"","code":"# Get library parameters from pilot data pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define read depths to test read_depths <- c(10000, 25000, 50000, 100000)  # Calculate effective library sizes effective_umis <- fit_read_UMI_curve(   reads_per_cell = read_depths,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # View the results data.frame(   reads_per_cell = read_depths,   effective_UMI = effective_umis,   saturation_pct = round(100 * effective_umis / library_params$UMI_per_cell, 1) ) #>   reads_per_cell effective_UMI saturation_pct #> 1          10000      8917.345           15.1 #> 2          25000     19015.959           32.1 #> 3          50000     30151.321           51.0 #> 4         100000     42062.562           71.1  # Get library parameters from pilot data pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define read depths to test read_depths <- c(10000, 25000, 50000, 100000)  # Calculate effective library sizes effective_umis <- fit_read_UMI_curve(   reads_per_cell = read_depths,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # View the results data.frame(   reads_per_cell = read_depths,   effective_UMI = effective_umis,   saturation_pct = round(100 * effective_umis / library_params$UMI_per_cell, 1) ) #>   reads_per_cell effective_UMI saturation_pct #> 1          10000      8917.345           15.1 #> 2          25000     19015.959           32.1 #> 3          50000     30151.321           51.0 #> 4         100000     42062.562           71.1"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"C++ implementation saturation-magnitude (S-M) curve relates sequencing reads unique UMI counts, accounting PCR amplification variability UMI saturation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"","code":"fit_read_UMI_curve_cpp(reads_per_cell, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"reads_per_cell Numeric vector. Total reads per cell. UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve fit. variation Numeric. Variation parameter characterizing PCR bias S-M curve fit.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"Numeric vector. Effective library size UMIs read depth.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"C++ implementation provides significant performance improvements R version large-scale power analysis computations. S-M curve formula: $$effective\\_UMI = UMI\\_per\\_cell \\times (1 - exp(-reads\\_per\\_cell / UMI\\_per\\_cell) \\times (1 + variation \\times reads\\_per\\_cell^2 / (2 \\times UMI\\_per\\_cell^2)))$$","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"Convenience function combines range identification grid generation power analysis heatmaps.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"","code":"generate_reads_grid_cpp(   experimental_platform,   UMI_per_cell,   variation,   grid_size = 10L )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"experimental_platform String. Experimental platform identifier. UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve. grid_size Integer. Number points grid (default: 10).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"NumericVector. Sequence reads per cell values grid.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"Streamlined convenience function combines range identification grid generation power analysis heatmaps.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"","code":"generate_reads_grid_streamlined_cpp(UMI_per_cell, variation, grid_size = 10L)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve. grid_size Integer. Number points grid (default: 10).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"NumericVector. Sequence reads per cell values grid.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pilot data from package data directory — get_pilot_data_from_package","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"Internal function load baseline expression library parameters pilot datasets stored package data/ directory.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"","code":"get_pilot_data_from_package(biological_system)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"biological_system Character. biological system name (e.g., \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"list containing: baseline_expression_stats Data frame gene expression data list baseline_expression_stats data frame library_parameters List UMI_per_cell variation parameters","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"","code":"# Load pilot data for K562 cells k562_data <- get_pilot_data_from_package(\"K562\")  # View the structure str(k562_data) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t19942 obs. of  3 variables: #>   ..$ response_id        : chr [1:19942] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000286448\" ... #>   ..$ relative_expression: num [1:19942] 1.50e-07 1.55e-06 7.33e-07 9.31e-07 7.43e-06 ... #>   ..$ expression_size    : num [1:19942] 0.3556 2.4156 7.7329 0.0341 3.4513 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 59163 #>   ..$ variation   : num 0.397 #>  $ mapping_efficiency       : num 0.711  # Access baseline expression data head(k562_data$baseline_expression_stats) #>                     response_id relative_expression expression_size #> ENSG00000243485 ENSG00000243485        1.503611e-07      0.35563916 #> ENSG00000238009 ENSG00000238009        1.554532e-06      2.41555115 #> ENSG00000241860 ENSG00000241860        7.325731e-07      7.73288757 #> ENSG00000286448 ENSG00000286448        9.312333e-07      0.03414057 #> ENSG00000237491 ENSG00000237491        7.428012e-06      3.45126152 #> ENSG00000228794 ENSG00000228794        2.774533e-05      4.99961853  # Access library parameters including mapping efficiency k562_data$library_parameters #> $UMI_per_cell #> [1] 59163.3 #>  #> $variation #> [1] 0.3968175 #>  cat(\"Mapping efficiency:\", k562_data$mapping_efficiency) #> Mapping efficiency: 0.7110861  # The mapping efficiency affects power calculations by determining # what fraction of sequencing reads contribute to gene expression # Higher mapping efficiency means more effective sequencing depth  # Compare mapping efficiency across cell types a549_data <- get_pilot_data_from_package(\"A549\") cat(\"K562 mapping efficiency:\", k562_data$mapping_efficiency) #> K562 mapping efficiency: 0.7110861 cat(\"A549 mapping efficiency:\", a549_data$mapping_efficiency) #> A549 mapping efficiency: 0.7938657"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"Pre-computed pilot data induced pluripotent stem cells (iPSCs) generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"","code":"iPSC_Tian"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (21,207 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (39,079) variation: Variation parameter PCR bias (0.405) mapping_efficiency Numeric. Mapping efficiency value (0.704)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"Paper: CRISPR Interference-Based Platform Multimodal Genetic Screens Human iPSC-Derived Neurons Author Year: Tian et al., 2019 Journal: Neuron Accession: GSE124703 PMID: 31422865","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"dataset generated induced pluripotent stem cells (iPSCs) using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"","code":"data(iPSC_Tian) str(iPSC_Tian) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t21207 obs. of  3 variables: #>   ..$ response_id        : chr [1:21207] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:21207] 5.85e-07 1.01e-06 2.89e-06 6.03e-06 5.91e-07 ... #>   ..$ expression_size    : num [1:21207] 13.1 8.71 426.39 443.33 5.11 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 39079 #>   ..$ variation   : num 0.405 #>  $ mapping_efficiency       : num 0.704"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"Pre-computed pilot data iPSC-derived neurons generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"","code":"iPSC_neuron_Tian"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (23,882 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (32,285) variation: Variation parameter PCR bias (0.443) mapping_efficiency Numeric. Mapping efficiency value (0.614)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"Paper: CRISPR Interference-Based Platform Multimodal Genetic Screens Human iPSC-Derived Neurons Author Year: Tian et al., 2019 Journal: Neuron Accession: GSE124703 PMID: 31422865","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"dataset generated iPSC-derived neurons using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"","code":"data(iPSC_neuron_Tian) str(iPSC_neuron_Tian) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t23882 obs. of  3 variables: #>   ..$ response_id        : chr [1:23882] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:23882] 9.84e-07 1.83e-06 6.47e-06 4.42e-05 5.89e-06 ... #>   ..$ expression_size    : num [1:23882] 8.197 2.466 2.492 6.126 0.333 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 32285 #>   ..$ variation   : num 0.443 #>  $ mapping_efficiency       : num 0.614"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"Determines minimum maximum cell counts power analysis using binary search. Uses cross-search strategy guarantee logical ordering (min_cells <= max_cells): finds min_cells best-case reads max_cells worst-case reads.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"","code":"identify_cell_range_cpp(   min_reads_per_cell,   max_reads_per_cell,   fc_expression_df,   UMI_per_cell,   variation,   MOI = 10,   num_targets = 100L,   gRNAs_per_target = 4L,   non_targeting_gRNAs = 10L,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   cell_lower_bound = 100,   cell_upper_bound = 1e+07 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"min_reads_per_cell Numeric. Minimum reads per cell library size range max_reads_per_cell Numeric. Maximum reads per cell library size range fc_expression_df DataFrame fold change expression info UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve variation Numeric. Variation parameter S-M curve MOI Numeric. Multiplicity infection (default 10) num_targets Integer. Number targets (default 100) gRNAs_per_target Integer. gRNAs per target (default 4) non_targeting_gRNAs Integer. Non-targeting gRNAs (default 10) control_group String. Control group type (\"complement\" \"nt_cells\", default \"complement\") multiple_testing_alpha Numeric. FDR target level (default 0.05) side String. Test sidedness (\"left\", \"right\", \"\", default \"left\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1) min_power_threshold Numeric. Minimum power threshold min cells (default 0.01) max_power_threshold Numeric. Target power threshold max cells (default 0.8) cell_lower_bound Numeric. Lower bound total cell search (default 100) cell_upper_bound Numeric. Upper bound total cell search (default 1e7)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"List min_cells, max_cells, achieved power values","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"function performs two binary searches using cross-search strategy: Find minimum cells: power >= min_power_threshold using max_reads_per_cell (best-case) Find maximum cells: power >= max_power_threshold using min_reads_per_cell (worst-case) cross-search strategy ensures min_cells <= max_cells provides robust experimental design ranges minimally acceptable well-powered studies.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"function determines minimum maximum reads per cell values power analysis grid generation based experimental platform capabilities S-M curve saturation analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"","code":"identify_library_size_range(experimental_platform, library_parameters)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"experimental_platform Character. Experimental platform identifier (e.g., \"10x Chromium v3\", \"\"). library_parameters List. Library parameters containing UMI_per_cell variation parameters S-M curve analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"List elements: min_reads_per_cell Minimum reads per cell based platform max_reads_per_cell Maximum reads per cell ~80% UMI saturation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"function wrapper around optimized C++ implementation identify_library_size_range_cpp provides significant performance improvements power analysis computations. function operates two phases: Minimum determination: Platform-specific minimum sequencing depth based typical experimental capabilities quality thresholds. Maximum determination: Uses binary search S-M curve find reads per cell achieves approximately 80% UMI saturation. 80% saturation achievable within practical limits (10x UMI_per_cell), returns practical upper bound.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"C++ implementation determines minimum maximum reads per cell values power analysis grid generation using binary search S-M curve. Uses saturation-based thresholds (10% 80%) instead platform-specific minimums.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"","code":"identify_library_size_range_cpp(experimental_platform, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"experimental_platform String. Experimental platform identifier (kept compatibility, used). UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"List min_reads_per_cell max_reads_per_cell elements.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"C++ implementation uses efficient binary search find reads per cell range power analysis. Uses saturation-based thresholds: Minimum reads: 10% UMI saturation (dynamic based UMI_per_cell) Maximum reads: 80% UMI saturation (diminishing returns beyond point)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"Streamlined C++ implementation determines minimum maximum reads per cell values power analysis grid generation using binary search S-M curve. Uses saturation-based thresholds (10% 80%) clean API.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"","code":"identify_reads_range_cpp(UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"List min_reads_per_cell max_reads_per_cell elements.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"streamlined version removes unused experimental_platform parameter. Uses efficient binary search find reads per cell range power analysis: Minimum reads: 10% UMI saturation (dynamic based UMI_per_cell) Maximum reads: 80% UMI saturation (diminishing returns beyond point)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for compute_power_plan — input_check_compute_power_plan","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"Input checking function compute_power_plan","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"","code":"input_check_compute_power_plan(   TPM_threshold,   minimum_fold_change,   cells_per_target,   sequenced_reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. Pairs effects least large considered non-null. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. sequenced_reads_per_cell Numeric, numeric vector, character. Sequenced reads per cell (raw sequencer output), custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses, .e., fraction tested pairs expected exhibit effect least large specified minimum_fold_change (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold achieve (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for cost_power_computation — input_check_cost_power_computation","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"Input checking function cost_power_computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"","code":"input_check_cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 20,   power_target = 0.8,   power_precision = 0.01,   min_power = 0.05,   max_power = 0.95,   cost_precision = 0.9,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint = NULL,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"minimizing_variable Character. parameter vary analysis. Options: \"TPM_threshold\" \"minimum_fold_change\". Default: \"TPM_threshold\". fixed_variable List. Fixed values analysis parameters. Can include: minimum_fold_change: Fixed fold change threshold (varying TPM_threshold) TPM_threshold: Fixed TPM threshold (varying minimum_fold_change) cells_per_target: Fixed cells per target (otherwise uses \"varying\") reads_per_cell: Fixed reads per cell (otherwise uses \"varying\") MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. gRNA variability parameter (default: 0.13). control_group Character. Control group type: \"complement\" \"non_targeting\" (default: \"complement\"). side Character. Test side: \"left\", \"right\", \"\" (default: \"left\"). multiple_testing_alpha Numeric. Multiple testing significance level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics columns: response_id, relative_expression, expression_size. library_parameters List. Library parameters containing UMI_per_cell variation. grid_size Integer. Grid size parameter search (default: 20). power_target Numeric. Target statistical power (default: 0.8). power_precision Numeric. Acceptable precision around power target (default: 0.01). min_power Numeric. Minimum power threshold grid search (default: 0.05). max_power Numeric. Maximum power threshold grid search (default: 0.95). cost_precision Numeric. Cost utilization factor (default: 0.9). Filters designs total cost \\le cost_precision × cost_constraint. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). cost_constraint Numeric. Maximum budget constraint dollars (default: NULL). Set NULL disable cost constraints. mapping_efficiency Numeric. Sequencing mapping efficiency (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"Input checking function find_optimal_cost_design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"","code":"input_check_find_optimal_cost_design(   cost_power_df,   minimizing_variable,   power_target,   power_precision,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_grid_size = 200 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"cost_power_df Data frame. Output cost_power_computation containing power analysis results cost calculations. Must include columns: overall_power, total_cost, cells_per_target, sequenced_reads_per_cell, plus specified minimizing variable (except cost optimization). minimizing_variable Character. parameter optimized. Must one : \"TPM_threshold\": TPM expression threshold optimization \"minimum_fold_change\": Minimum fold change threshold optimization \"cost\": Total cost optimization across experimental designs power_target Numeric. Target statistical power level (typically 0.8 80% power). Must 0 1. power_precision Numeric. Acceptable precision around power target. Designs power within power_target ± power_precision considered acceptable. Must 0 1. MOI Numeric. Multiplicity infection parameter experimental design calculations (default: 10). Used compute number captured cells. num_targets Integer. Number target genes experiment (default: 100). Used cost calculations. non_targeting_gRNAs Integer. Number non-targeting gRNAs experiment (default: 10). Used calculate total library size captured cell requirements. gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). Used calculate total gRNAs experimental design parameters. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_grid_size Integer. Number grid points cost optimization grid (default: 200). Higher values provide finer resolution longer computation time.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for library_computation — input_check_library_computation","title":"Input checking function for library_computation — input_check_library_computation","text":"Input checking function library_computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for library_computation — input_check_library_computation","text":"","code":"input_check_library_computation(   QC_data = NULL,   downsample_ratio = NULL,   D2_rough = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for library_computation — input_check_library_computation","text":"QC_data Data frame. UMI-level molecule information obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric numeric vector. Proportion(s) downsampling dataset create additional observation points. Must 0 1. Can vector multiple downsampling levels, one level often sufficient. Default: 0.7. D2_rough Numeric. Rough prior estimate variation parameter (D2) S-M curve model. Represents PCR amplification bias. Typically 0.3 perturb-seq, higher (e.g., 0.8) TAP-seq. Default: 0.3.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for compute_power_posthoc — input_check_posthoc","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"Input checking function compute_power_posthoc","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"","code":"input_check_posthoc(   discovery_pairs = NULL,   cells_per_grna = NULL,   baseline_expression_stats = NULL,   control_group = NULL,   fold_change_mean = NULL,   fold_change_sd = NULL,   num_total_cells = NULL,   cutoff = NULL,   n_nonzero_trt_thresh = NULL,   n_nonzero_cntrl_thresh = NULL,   side = NULL,   multiple_testing_method = NULL,   multiple_testing_alpha = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"discovery_pairs data frame specifying element-gene pairs consider, columns grna_target response_id cells_per_grna data frame specifying many cells contain gRNA, columns grna_id, grna_target, num_cells baseline_expression_stats data frame specifying baseline expression statistics gene, columns response_id, expression_mean, expression_size control_group character string specifying control group, either \"complement\" \"nt_cells\" fold_change_mean numeric value use mean effect size element-gene pairs fold_change_sd numeric value use standard deviation effect size element-gene pairs num_total_cells (Required control_group == \"complement\") positive integer specifying total number cells experiment cutoff (Optional) numeric value 0 1 use p-value cutoff n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 side (Optional) character string specifying side test, either \"left\", \"right\", \"\"; defaults \"\" multiple_testing_method (Optional) character string specifying multiple testing correction method use, either \"BH\" \"bonferroni\"; defaults \"BH\" multiple_testing_alpha (Optional) numeric value 0 1 specifying alpha level multiple testing correction; defaults 0.1","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for power_function — input_check_power_function","title":"Input checking function for power_function — input_check_power_function","text":"Input checking function power_function","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for power_function — input_check_power_function","text":"","code":"input_check_power_function(   recovery_rate = NULL,   num_total_reads = NULL,   mapping_efficiency = NULL,   cells_per_grna = NULL,   baseline_relative_expression_stats = NULL,   fold_change_mean = NULL,   fold_change_sd = NULL,   num_planned_cells = NULL,   control_group = NULL,   UMI_per_cell = NULL,   variation = NULL,   side = NULL,   multiple_testing_method = NULL,   multiple_testing_alpha = NULL,   cutoff = NULL,   discovery_pairs = NULL,   n_nonzero_trt_thresh = NULL,   n_nonzero_cntrl_thresh = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for power_function — input_check_power_function","text":"recovery_rate numeric value (0 1) indicating fraction cells survive captured library preparation. num_total_reads numeric value specifying total number reads generated sequencing. used estimate library_size. mapping_efficiency numeric value (0 1) indicating fraction reads successfully map transcriptome. cells_per_grna data frame specifying number cells per gRNA, columns grna_id, grna_target, num_cells. baseline_relative_expression_stats data frame specifying relative expression levels gene, columns response_id relative_expression. fold_change_mean numeric value indicating mean fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). fold_change_sd numeric value indicating standard deviation fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). num_planned_cells numeric value indicating total planned number cells losses library preparation. control_group character string specifying control group, either \"complement\" \"nt_cells\". passed compute_power_posthoc. UMI_per_cell numeric value specifying theoretical saturation level (UMIs) cell. variation numeric value controlling overdispersion UMIs per read modeled. side (Optional) character string specifying side test, either \"left\", \"right\", \"\". Defaults \"\". multiple_testing_method (Optional) character string specifying multiple testing correction method, either \"BH\" \"bonferroni\". Defaults \"BH\". multiple_testing_alpha (Optional) numeric value (0 1) specifying alpha level multiple testing correction. Defaults 0.1. cutoff (Optional) numeric value 0 1 use p-value cutoff. NULL, function determines automatically using specified multiple_testing_method multiple_testing_alpha. discovery_pairs data frame specifying gRNA-gene pairs consider, columns grna_target response_id. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7. n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"Fits nonlinear saturation curve model estimate relationship mapped reads per cell observed UMIs per cell. model accounts UMI saturation high read depths PCR amplification variability. function used internally reference_data_processing.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"","code":"library_computation(QC_data, downsample_ratio = 0.7, D2_rough = 0.3)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"QC_data Data frame. UMI-level molecule information obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric numeric vector. Proportion(s) downsampling dataset create additional observation points. Must 0 1. Can vector multiple downsampling levels, one level often sufficient. Default: 0.7. D2_rough Numeric. Rough prior estimate variation parameter (D2) S-M curve model. Represents PCR amplification bias. Typically 0.3 perturb-seq, higher (e.g., 0.8) TAP-seq. Default: 0.3.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"fitted S-M curve model object class nlsLM minpack.lm package. model two fitted parameters accessible via coef(): total_UMIs Maximum UMI count per cell sequencing saturation D2 Variation parameter characterizing PCR amplification bias (0 1)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"saturation-model","dir":"Reference","previous_headings":"","what":"Saturation Model","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"S-M curve model : $$\\text{UMI} = \\text{total_UMIs} \\times \\left(1 - \\exp\\left(-\\frac{\\text{reads}}{\\text{total_UMIs}}\\right) \\times \\left(1 + D2 \\times \\frac{\\text{reads}^2}{2 \\times \\text{total_UMIs}^2}\\right)\\right)$$ : reads: Number mapped reads per cell (independent variable) UMI: Number observed UMIs per cell (dependent variable) total_UMIs: Maximum UMI per cell saturation (fitted parameter) D2: Variation parameter PCR bias, 0 1 (fitted parameter)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"fitting-procedure","dir":"Reference","previous_headings":"","what":"Fitting Procedure","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"Expands read data replicating UMI indices according read counts Downsamples read data specified ratio(s) create multiple observation points Counts unique UMIs downsampled read depth Fits nonlinear model using two different initial parameter sets: \"Delicate\": Uses prior D2_rough derives initial total_UMIs \"Rough\": Uses observed UMI count initial total_UMIs Selects model lower relative prediction error Warns relative error exceeds 5\\","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important Notes","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"toy example data reads, fitted parameters may sensitive random seed prior specification practice real data, function demonstrates robustness random seed choice moderate prior misspecification Multiple downsampling ratios can provided vector observation points, typically one ratio suffices","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Saturation-Magnitude (S-M) Curve Between Reads and UMIs — library_computation","text":"","code":"# Get QC data and compute library parameters cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_data <- obtain_qc_read_umi_table(cellranger_path)  # Fit saturation curve lib_model <- library_computation(   QC_data = qc_data,   downsample_ratio = 0.7,   D2_rough = 0.3 )  # View fitted parameters coef(lib_model) #> total_UMIs         D2  #>   7.611742   1.000000   # Extract specific parameters total_umis <- coef(lib_model)[\"total_UMIs\"] variation <- coef(lib_model)[\"D2\"]"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"Compute average total UMI per cell UMI variation parameters.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"","code":"library_estimation(QC_data, downsample_ratio = 0.7, D2_rough = 0.3)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"QC_data Data frame. UMI-level molecule information obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric numeric vector. Proportion(s) downsampling dataset create additional observation points. Must 0 1. Can vector multiple downsampling levels, one level often sufficient. Default: 0.7. D2_rough Numeric. Rough prior estimate variation parameter (D2) S-M curve model. Represents PCR amplification bias. Typically 0.3 perturb-seq, higher (e.g., 0.8) TAP-seq. Default: 0.3.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"list elements: UMI_per_cell Total UMI per cell parameter variation Variation parameter characterizing PCR bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"Fits negative binomial model gene expression data estimate relative expression levels dispersion parameters gene. function used internally reference_data_processing.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"","code":"obtain_expression_information(   response_matrix,   TPM_thres = 0.1,   rough = FALSE,   n_threads = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"response_matrix Sparse matrix (genes rows, cells columns). Typically CsparseMatrix obtain_qc_response_data. TPM_thres Numeric. Expression threshold TPM (Transcripts Per Million) filtering low-expression genes. Genes TPM threshold excluded. Default: 0.1. rough Logical. TRUE, uses fast C++ estimator dispersion. FALSE, uses refined maximum likelihood estimation. Default: FALSE. n_threads Integer NULL controlling parallelism: NULL – auto-detect (prefer NSLOTS environment variable, else use parallel::detectCores()) NA – force use NSLOTS positive integer – user-specified thread count","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"Data frame three columns: response_id Gene identifier (e.g., Ensembl ID) genes passing TPM threshold relative_expression Estimated relative expression proportion (sums 1 across genes) expression_size Estimated dispersion parameter \\(\\theta\\) negative binomial model. Small values indicate high biological variability.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"negative-binomial-model","dir":"Reference","previous_headings":"","what":"Negative Binomial Model","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"gene, model : $$\\text{gene_expression} \\sim \\text{NB}(\\text{mean} = \\text{library_size} \\times \\text{relative_expression}, \\text{size} = \\text{expression_size})$$ library_size total UMI count per cell relative_expression expression_size fitted parameters.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"processing-steps","dir":"Reference","previous_headings":"","what":"Processing Steps","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"Calculates library sizes (total UMIs per cell) Computes relative expression (gene counts / total counts) Converts TPM scale filters genes threshold Estimates dispersion parameters using C++ implementation Returns data frame fitted parameters","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Negative Binomial Model to Estimate Gene Expression Parameters — obtain_expression_information","text":"","code":"# Get response matrix from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") response_matrix <- obtain_qc_response_data(cellranger_path)  # Extract expression information expr_info <- obtain_expression_information(   response_matrix = response_matrix,   TPM_thres = 0.1,   rough = TRUE,   n_threads = 1 ) #> Start relative expression calculation @ 2025-10-13 22:56:15.739316 #> Finish relative expression calculation @ 2025-10-13 22:56:15.742363 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (1 thread(s)) @ 2025-10-13 22:56:15.743378 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_refined_row result = 0.220983 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_refined_row result = 251.069 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_refined_row result = 242.683 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_refined_row result = 242.683 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_refined_row result = 242.683 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-13 22:56:15.747636  # Examine results head(expr_info) #>                     response_id relative_expression expression_size #> ENSG00000243485 ENSG00000243485          0.09090909       0.2209832 #> ENSG00000238009 ENSG00000238009          0.36363636     251.0688935 #> ENSG00000239945 ENSG00000239945          0.18181818     242.6834302 #> ENSG00000241860 ENSG00000241860          0.18181818     242.6834302 #> ENSG00000286448 ENSG00000286448          0.18181818     242.6834302 dim(expr_info) #> [1] 5 3 summary(expr_info$expression_size) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.221 242.683 242.683 195.868 242.683 251.069"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function determines optimal experimental design parameters (cells per target reads per cell) given total cost constraint. handles two optimization scenarios: reads_per_cell NULL: Calculates maximum reads per cell achievable given fixed cells_per_target within cost constraint cells_per_target NULL: Calculates maximum cells per target achievable given fixed reads_per_cell within cost constraint","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"","code":"obtain_fixed_variable_constraining_cost(   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   reads_per_cell,   cells_per_target,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_constraint Numeric. Total budget constraint dollars. Must positive. MOI Numeric. Multiplicity infection parameter (default: 10). Used compute number captured cells cells per target. num_targets Integer. Number target genes experiment (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). reads_per_cell Numeric NULL. provided, parameter fixed cells_per_target optimized. NULL, parameter optimized. cells_per_target Numeric NULL. provided, parameter fixed reads_per_cell optimized. NULL, parameter optimized. mapping_efficiency Numeric. Mapping efficiency sequencing platform (default: 0.72). Used convert raw reads mapped reads.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"list containing: cells_per_target Numeric. Optimized provided cells per target value reads_per_cell Numeric. Optimized provided reads per cell value","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function uses cost model following components: Cost Model: Total experimental cost calculation: Total Cost = Library Cost + Sequencing Cost Component Formulas: Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (total_reads / 1,000,000) num_captured_cells = ((gRNAs_per_target * num_targets + non_targeting_gRNAs) * cells_per_target) / (gRNAs_per_target * MOI) total_reads = (num_captured_cells * reads_per_cell) / mapping_efficiency Optimization Logic: Scenario 1 (reads_per_cell = NULL): Given fixed cells_per_target, maximizes reads_per_cell within cost constraint allocating remaining budget cell preparation costs sequencing. Scenario 2 (cells_per_target = NULL): Given fixed reads_per_cell, maximizes cells_per_target (equivalently, captured cells) within cost constraint using total cost per captured cell (including preparation sequencing costs).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function validates cost constraint sufficient meaningful experiments: Ensures least 10 reads per cell can achieved Ensures least 10 captured cells can achieved Provides clear error messages constraints tight","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"Computes naive mapping efficiency proportion total reads map transcriptome. function used internally reference_data_preprocessing_10x.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"","code":"obtain_mapping_efficiency(QC_data, path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"QC_data Data frame. Output obtain_qc_read_umi_table containing num_reads column read counts per UMI. path_to_cellranger_output Character. Path Cell Ranger run folder containing outs/metrics_summary.csv \"Number Reads\" column.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"Numeric value 0 1 representing proportion total reads successfully mapped transcriptome.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"function calculates: $$\\text{mapping_efficiency} = \\frac{\\text{mapped_reads}}{\\text{total_reads}}$$ : mapped_reads = sum num_reads QC_data total_reads = \"Number Reads\" metrics_summary.csv","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important Notes","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"metrics_summary.csv file must contain column named \"Number Reads\" column may need added edited manually Cell Ranger run multiple libraries samples function removes commas \"Number Reads\" field conversion gives \"naive\" estimate adjusted reference_data_processing gene list specified","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Naive Mapping Efficiency from Cell Ranger Metrics — obtain_mapping_efficiency","text":"","code":"# Get mapping efficiency from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_data <- obtain_qc_read_umi_table(cellranger_path) mapping_eff <- obtain_mapping_efficiency(qc_data, cellranger_path)  # View result print(mapping_eff) #> [1] 1"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"Extracts QC-filtered UMI-level molecule information Cell Ranger HDF5 files. function used internally reference_data_preprocessing_10x.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"","code":"obtain_qc_read_umi_table(path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"path_to_cellranger_output Character. Path Cell Ranger run folder containing: outs/molecule_info.h5 – Raw molecule information outs/filtered_feature_bc_matrix.h5 – QC-filtered cell barcodes","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"Data frame UMI-level molecule information containing columns: num_reads Number reads supporting UMI-cell combination UMI_id UMI index (1-based) cell_id Cell barcode GEM group suffix (e.g., \"ACGTACGT-1\") response_id Gene identifier (e.g., Ensembl ID)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"function: Reads raw molecule information molecule_info.h5 Reads QC-filtered cell barcodes filtered_feature_bc_matrix.h5 Filters molecule data retain QC-passed cells Constructs cell IDs GEM group suffixes Returns data frame read counts per UMI per cell data used fitting library saturation (S-M) curve library_computation.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract UMI-Level Molecule Information from Cell Ranger HDF5 Files — obtain_qc_read_umi_table","text":"","code":"# Extract read/UMI information from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_table <- obtain_qc_read_umi_table(cellranger_path)  # Examine the data head(qc_table) #>   num_reads UMI_id            cell_id     response_id #> 1         2 139105 AAACCTGGTATATGAG-1 ENSG00000241860 #> 2         1 723247 AAACGGGTCAGCTCGG-1 ENSG00000238009 #> 3         1 998389 AAAGTAGCATCCCACT-1 ENSG00000239945 #> 4         2 622094 AAAGTAGTCCAAATGC-1 ENSG00000286448 #> 5         1 584568 AGCAGCCGTCCAAGTT-1 ENSG00000243485 #> 6         1 956290 AGCGGTCCATTCCTGC-1 ENSG00000238009 dim(qc_table) #> [1] 11  4 summary(qc_table$num_reads) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   1.000   1.000   1.182   1.000   2.000"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"Reads sparse gene--cell expression matrix Cell Ranger output performs quality control checks. function used internally reference_data_preprocessing_10x.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"","code":"obtain_qc_response_data(path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"path_to_cellranger_output Character. Path Cell Ranger run folder (e.g., \"SRR12345678\"). folder must contain: outs/filtered_feature_bc_matrix/matrix.mtx.gz outs/filtered_feature_bc_matrix/features.tsv.gz outs/filtered_feature_bc_matrix/barcodes.tsv.gz","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"sparse CsparseMatrix (genes rows, cells columns) : Unique, non-empty gene IDs row names Unique, non-empty cell barcodes column names Duplicate genes barcodes removed (keeping first occurrence)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"cases, subfolder filtered_feature_bc_matrix/ may need produced unzipping filtered_feature_bc_matrix.tar.gz file Cell Ranger output. function: Reads sparse matrix Matrix Market format Converts column-compressed sparse format (CsparseMatrix) Reads gene annotations features.tsv.gz Removes duplicate empty gene IDs Reads cell barcodes barcodes.tsv.gz Removes duplicate empty barcodes","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and QC Gene Expression Matrix from Cell Ranger Output — obtain_qc_response_data","text":"","code":"# Load example Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") response_matrix <- obtain_qc_response_data(cellranger_path)  # Inspect the matrix dim(response_matrix) #> [1] 5 8 class(response_matrix) #> [1] \"dgCMatrix\" #> attr(,\"package\") #> [1] \"Matrix\""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute approximate power of a CRISPR screen — power_function","title":"Compute approximate power of a CRISPR screen — power_function","text":"function computes approximate power detecting effect (gene perturbation) CRISPR screen given various experimental sequencing parameters. Internally, calculates average library size using provided parameters estimates baseline expression levels. function calls compute_power_posthoc obtain power estimates expected number discoveries.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute approximate power of a CRISPR screen — power_function","text":"","code":"power_function(   recovery_rate,   num_total_reads,   mapping_efficiency,   cells_per_grna,   baseline_relative_expression_stats,   fold_change_mean,   fold_change_sd,   num_planned_cells,   control_group,   UMI_per_cell,   variation,   side = \"both\",   multiple_testing_method = \"BH\",   multiple_testing_alpha = 0.1,   cutoff = NULL,   discovery_pairs,   n_nonzero_trt_thresh = 7L,   n_nonzero_cntrl_thresh = 7L )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute approximate power of a CRISPR screen — power_function","text":"recovery_rate numeric value (0 1) indicating fraction cells survive captured library preparation. num_total_reads numeric value specifying total number reads generated sequencing. used estimate library_size. mapping_efficiency numeric value (0 1) indicating fraction reads successfully map transcriptome. cells_per_grna data frame specifying number cells per gRNA, columns grna_id, grna_target, num_cells. baseline_relative_expression_stats data frame specifying relative expression levels gene, columns response_id relative_expression. fold_change_mean numeric value indicating mean fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). fold_change_sd numeric value indicating standard deviation fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). num_planned_cells numeric value indicating total planned number cells losses library preparation. control_group character string specifying control group, either \"complement\" \"nt_cells\". passed compute_power_posthoc. UMI_per_cell numeric value specifying theoretical saturation level (UMIs) cell. variation numeric value controlling overdispersion UMIs per read modeled. side (Optional) character string specifying side test, either \"left\", \"right\", \"\". Defaults \"\". multiple_testing_method (Optional) character string specifying multiple testing correction method, either \"BH\" \"bonferroni\". Defaults \"BH\". multiple_testing_alpha (Optional) numeric value (0 1) specifying alpha level multiple testing correction. Defaults 0.1. cutoff (Optional) numeric value 0 1 use p-value cutoff. NULL, function determines automatically using specified multiple_testing_method multiple_testing_alpha. discovery_pairs data frame specifying gRNA-gene pairs consider, columns grna_target response_id. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7. n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute approximate power of a CRISPR screen — power_function","text":"list two elements: individual_power: data frame columns grna_target, response_id, power, giving power pair. expected_num_discoveries: numeric value indicating expected total number discoveries.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"Aggregates Cell Ranger outputs multiple sequencing runs (SRRs) single data structure containing gene expression matrices, UMI-level molecule information, naive mapping efficiency estimates. Step 1 pilot data preprocessing workflow PerturbPlan power analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"","code":"reference_data_preprocessing_10x(   path_to_top_level_output,   path_to_run_level_output = NULL,   h5_rough = TRUE,   skip_mapping_efficiency = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"path_to_top_level_output Character. Path top-level directory containing Cell Ranger run-level subdirectories. subdirectory contain Cell Ranger output standard structure outs/ folders. path_to_run_level_output Optional character vector. Names specific run-level directories process (full paths). match basename folders inside path_to_top_level_output. NULL, subdirectories processed. Unmatched entries trigger warning. h5_rough Logical. TRUE (default), extracts UMI-level molecule information first SRR speed. FALSE, combines UMI-level molecule information SRRs (slower comprehensive). skip_mapping_efficiency Logical. TRUE, skips estimation mapping efficiency. FALSE (default), calculates naive mapping efficiency. Set TRUE metrics_summary.csv unavailable lacks \"Number Reads\" column.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"list three elements: response_matrix Sparse gene--cell expression matrix (genes rows, cells columns) row column names. Contains genes common across processed SRR runs, combined across runs. read_umi_table Data frame UMI-level molecule information, including columns: num_reads: Number reads supporting UMI-cell combination UMI_id: UMI index cell_id: Cell barcode response_id: Gene identifier (e.g., Ensembl ID) srr_idx: SRR run identifier mapping_efficiency Numeric value 0 1 representing proportion reads mapped transcriptome skip_mapping_efficiency = FALSE, NULL skip_mapping_efficiency = TRUE.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"input-requirements","dir":"Reference","previous_headings":"","what":"Input Requirements","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"data organized Cell Ranger output directories top-level folder: ## Processing Steps function performs following operations: Lists SRR directories given top-level folder Optionally filters subset run-level names Reads gene expression matrices using obtain_qc_response_data Identifies retains genes shared across SRRs Reads UMI-level molecule information using obtain_qc_read_umi_table Calculates naive mapping efficiency using obtain_mapping_efficiency","code":"path_to_top_level_output/ ├── SRR_run_1/ │   ├── outs/ │   │   ├── filtered_feature_bc_matrix/ │   │   │   ├── barcodes.tsv.gz │   │   │   ├── features.tsv.gz │   │   │   └── matrix.mtx.gz │   │   ├── molecule_info.h5 │   │   ├── filtered_feature_bc_matrix.h5 │   │   └── metrics_summary.csv ├── SRR_run_2/ │   └── ... └── SRR_run_3/     └── ..."},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important Notes","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"SRR directories generated recent version Cell Ranger configured perturbation (CRISPR Perturb-seq) workflow cases, filtered_feature_bc_matrix/ may need produced unzipping filtered_feature_bc_matrix.tar.gz mapping efficiency calculation, metrics_summary.csv must include column named \"Number Reads\". column may need added edited manually Cell Ranger run multiple libraries samples. h5_rough = FALSE, multiple mapping efficiencies computed median value returned","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"","code":"# Point to directory containing example Cell Ranger outputs extdata_path <- system.file(\"extdata\", package = \"perturbplan\")  # Aggregate data from all SRR runs raw_data <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",  # Only read subfolder cellranger_tiny   h5_rough = TRUE,  # Use first SRR for QC data (faster)   skip_mapping_efficiency = FALSE  # Estimate mapping efficiency )  # Inspect structure str(raw_data) #> List of 3 #>  $ response_matrix   :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:11] 0 1 2 3 4 1 2 1 4 1 ... #>   .. ..@ p       : int [1:9] 0 1 2 3 4 5 7 9 11 #>   .. ..@ Dim     : int [1:2] 5 8 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : chr [1:5] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" ... #>   .. .. ..$ : chr [1:8] \"AGCAGCCGTCCAAGTT-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAACCTGGTATATGAG-1\" ... #>   .. ..@ x       : num [1:11] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ read_umi_table    :'data.frame':\t11 obs. of  5 variables: #>   ..$ num_reads  : int [1:11] 2 1 1 2 1 1 1 1 1 1 ... #>   ..$ UMI_id     : num [1:11] 139105 723247 998389 622094 584568 ... #>   ..$ cell_id    : chr [1:11] \"AAACCTGGTATATGAG-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAAGTAGTCCAAATGC-1\" ... #>   ..$ response_id: chr [1:11] \"ENSG00000241860\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000286448\" ... #>   ..$ srr_idx    : chr [1:11] \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" ... #>  $ mapping_efficiency: num 1  # Access components head(raw_data$read_umi_table) #>   num_reads UMI_id            cell_id     response_id         srr_idx #> 1         2 139105 AAACCTGGTATATGAG-1 ENSG00000241860 cellranger_tiny #> 2         1 723247 AAACGGGTCAGCTCGG-1 ENSG00000238009 cellranger_tiny #> 3         1 998389 AAAGTAGCATCCCACT-1 ENSG00000239945 cellranger_tiny #> 4         2 622094 AAAGTAGTCCAAATGC-1 ENSG00000286448 cellranger_tiny #> 5         1 584568 AGCAGCCGTCCAAGTT-1 ENSG00000243485 cellranger_tiny #> 6         1 956290 AGCGGTCCATTCCTGC-1 ENSG00000238009 cellranger_tiny dim(raw_data$response_matrix) #> [1] 5 8"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"Fits statistical models extract gene-level expression parameters, library saturation parameters, adjusted mapping efficiency required PerturbPlan power analysis. Step 2 pilot data preprocessing workflow. Outputs compatible built-pilot data examples PerturbPlan Shiny application.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"","code":"reference_data_processing(   response_matrix = NULL,   read_umi_table,   mapping_efficiency = NULL,   gene_list = NULL,   TPM_thres = 0.1,   downsample_ratio = 0.7,   D2_rough = 0.3,   h5_only = FALSE,   n_threads = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"response_matrix Matrix NULL. Gene--cell expression matrix, typically reference_data_preprocessing_10x. Required unless h5_only = TRUE. read_umi_table Data frame. UMI-level molecule information obtain_qc_read_umi_table, typically obtained via reference_data_preprocessing_10x. mapping_efficiency Numeric NULL. Naive mapping efficiency estimate obtain_mapping_efficiency. adjusted based gene_list provided. gene_list Optional character vector gene IDs (e.g., Ensembl IDs) restrict analysis specific genes. Used TAP-seq experimental design. NULL, genes used (suitable perturb-seq). TPM_thres Numeric. Threshold (TPM) filtering low-expression genes gene expression model. Default: 0.1. downsample_ratio Numeric. Proportion downsampling library saturation model fitting. Default: 0.7. D2_rough Numeric. Rough prior value library variation parameter. Typically higher TAP-seq experiments (e.g., 0.8) perturb-seq experiments (0.3). Default: 0.3. h5_only Logical. TRUE, skips baseline expression step save time. Useful tuning hyperparameters library model fitting. Default: FALSE. n_threads Integer NULL. Number parallel processing threads. NULL, uses single-threaded execution. Default: NULL.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"list containing: baseline_expression_stats Data frame columns: response_id: Ensembl gene identifier relative_expression: Estimated relative expression proportions, normalized sum 1 across genes interest expression_size: Estimated dispersion (size) parameter representing gene-specific expression variability library_parameters List : UMI_per_cell: Estimated maximum UMI count per cell saturation variation: Estimated PCR amplification variation parameter (0 1) mapping_efficiency Numeric. Adjusted mapping efficiency accounting fraction reads mapped genes interest.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"statistical-models","dir":"Reference","previous_headings":"","what":"Statistical Models","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"Gene Expression Model (Negative Binomial): gene, function fits negative binomial (NB) model characterize distribution gene expression levels across cells: gene_expression ~ NB(mean = library_size * relative_expression, expression_size = expression_size) : gene_expression: Number observed UMIs gene cell (data) library_size: Total UMI count per cell (data) relative_expression: Relative expression level gene (fitted parameter) expression_size: Dispersion parameter; small values indicate high biological variability (fitted parameter) Sequencing Saturation Model (S-M Curve): function fits saturation (S-M) curve relates mapped reads per cell observed UMIs per cell: UMI = total_UMIs * (1 - exp(-reads/total_UMIs) * (1 + variation * reads^2/(2*total_UMIs^2))) : reads: Number mapped reads per cell (data) UMI: Number observed UMIs per cell (data) total_UMIs (UMI_per_cell): Maximum UMI per cell parameter saturation (fitted parameter) variation: Variation parameter characterizing PCR amplification bias, 0 1 (fitted parameter)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"processing-steps","dir":"Reference","previous_headings":"","what":"Processing Steps","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"function executes steps: gene_list provided: adjusts mapping efficiency filters genes Fits negative binomial model using obtain_expression_information estimate gene-level expression parameters Fits saturation model using library_computation estimate library parameters Returns structured output compatible power analysis functions","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"use-cases","dir":"Reference","previous_headings":"","what":"Use Cases","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"Perturb-seq: Use genes (gene_list = NULL), default D2_rough = 0.3 TAP-seq: Provide targeted gene list, higher D2_rough (e.g., 0.8), set TPM_thres = 0","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Statistical Parameters from Pilot Data for Power Analysis — reference_data_processing","text":"","code":"# Set seed for reproducibility set.seed(123)  # First, get aggregated raw data using reference_data_preprocessing_10x extdata_path <- system.file(\"extdata\", package = \"perturbplan\") raw_data <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",   h5_rough = TRUE )  # Example 1: Process for perturb-seq experimental design (all genes) pilot_data_perturbseq <- reference_data_processing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   gene_list = NULL,     # Use all genes   TPM_thres = 0.1,      # Default expression threshold for filtering   downsample_ratio = 0.6,  # Downsampling for sequencing   D2_rough = 0.4,       # Prior for variation parameter   h5_only = FALSE,      # Fit expression model   n_threads = NULL      # No parallel processing ) #> Starting pilot data preprocessing @ 2025-10-13 22:56:19.203227 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-10-13 22:56:19.218907 #> Finish relative expression calculation @ 2025-10-13 22:56:19.220162 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (8 thread(s)) @ 2025-10-13 22:56:19.221114 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_mle_row result = 401.014 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_mle_row result = 484.176 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_mle_row result = 468.498 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_mle_row result = 468.498 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_mle_row result = 468.498 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-13 22:56:19.223851 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-10-13 22:56:19.233203 #> Processed 5 genes #> Library parameters: UMI_per_cell = 6, variation = 0.371 #> Mapping efficiency = 1  # Inspect structure str(pilot_data_perturbseq) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t5 obs. of  3 variables: #>   ..$ response_id        : chr [1:5] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" ... #>   ..$ relative_expression: num [1:5] 0.0909 0.3636 0.1818 0.1818 0.1818 #>   ..$ expression_size    : num [1:5] 401 484 468 468 468 #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 6.12 #>   ..$ variation   : num 0.371 #>  $ mapping_efficiency       : num 1  # Example 2: Process for TAP-seq experimental design (targeted genes only) gene_list <- c(\"ENSG00000241860\", \"ENSG00000238009\", \"ENSG00000239945\") pilot_data_tapseq <- reference_data_processing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   gene_list = gene_list, # Restrict to specific genes   TPM_thres = 0          # No expression threshold for filtering ) #> Starting pilot data preprocessing @ 2025-10-13 22:56:19.243017 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-10-13 22:56:19.307621 #> Finish relative expression calculation @ 2025-10-13 22:56:19.308618 #> Number of genes passing TPM threshold: 3 #> Start dispersion estimation (8 thread(s)) @ 2025-10-13 22:56:19.309567 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 3 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.5 #> [gene 0] t_0 = 1.33333 #> [gene 0] theta_mle_row result = 486.513 #> [gene 1] rel_expr = 0.25 #> [gene 1] t_0 = 0.5 #> [gene 1] theta_mle_row result = 475.754 #> [gene 2] rel_expr = 0.25 #> [gene 2] t_0 = 0.5 #> [gene 2] theta_mle_row result = 475.754 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-13 22:56:19.311625 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-10-13 22:56:19.324222 #> Processed 3 genes #> Library parameters: UMI_per_cell = 7, variation = 0.366 #> Mapping efficiency = 0.727  # Inspect structure str(pilot_data_tapseq) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t3 obs. of  3 variables: #>   ..$ response_id        : chr [1:3] \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" #>   ..$ relative_expression: num [1:3] 0.5 0.25 0.25 #>   ..$ expression_size    : num [1:3] 487 476 476 #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 6.82 #>   ..$ variation   : num 0.366 #>  $ mapping_efficiency       : num 0.727"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference expression datasets metadata — reference_expression_datasets","title":"Reference expression datasets metadata — reference_expression_datasets","text":"Metadata table describing available reference expression datasets perturbplan package. table maps biological systems corresponding data processing configurations functions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference expression datasets metadata — reference_expression_datasets","text":"","code":"reference_expression_datasets"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reference expression datasets metadata — reference_expression_datasets","text":"data frame 6 rows 4 columns: cell_type Character. biological system name platform Character. experimental platform used (\"10x\" 10x Chromium) config_name Character. Configuration variable name data source paths process_function Character. Name processing function dataset","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reference expression datasets metadata — reference_expression_datasets","text":"Internal metadata perturbplan package data management.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference expression datasets metadata — reference_expression_datasets","text":"metadata table used internally get_pilot_data_from_package map biological system names corresponding data objects processing functions.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the rejection probability of unadjusted score test. — rejection_computation","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"Compute rejection probability unadjusted score test.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"","code":"rejection_computation(mean_list, sd_list, side, cutoff)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". cutoff (Optional) numeric value 0 1 use p-value cutoff","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"rejection probablity.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the score test statistic. — score_test","title":"Compute the score test statistic. — score_test","text":"Compute score test statistic.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the score test statistic. — score_test","text":"","code":"score_test(X, Y, expression_size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the score test statistic. — score_test","text":"X Treatment/control indicator. Y Outcome two groups. expression_size Size parameter.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the score test statistic. — score_test","text":"Score test statistic.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain summary statistics of QC'd molecular data — summary_h5_data","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"function computes basic summary statistics quality-controlled molecular data, providing key metrics library size estimation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"","code":"summary_h5_data(QC_data)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"QC_data Data frame. QC'd data obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"named numeric vector elements: num_cells Total number unique cells avg_reads Average number reads per cell","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"function calculates: Total number unique cell barcodes Total reads summed across molecules Average reads per cell (total reads divided number cells)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"function validates structure combined pilot data RDS file contains baseline expression data library parameters single list. Also, checks whether value parameters makes sense.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"","code":"validate_combined_pilot_data(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"data list object loaded RDS file, expected contain: baseline_expression: list baseline expression data dispersion curve library_parameters: list UMI_per_cell variation parameters file_path Character. Path description uploaded file error messages.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"list elements: valid Logical indicating validation passed data validated data (valid) NULL errors Character vector error messages warnings Character vector warning messages summary HTML-formatted summary text display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"function validates overall structure combined pilot data, delegates validation individual components validate_custom_baseline_rds validate_custom_library_rds. Expected structure:","code":"list(   baseline_expression = list(     baseline_expression = data.frame(...),     expression_dispersion_curve = function(v) {...}   ),   library_parameters = list(     UMI_per_cell = numeric_value,     variation = numeric_value   ) )"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom baseline expression data — validate_custom_baseline","title":"Validate custom baseline expression data — validate_custom_baseline","text":"function validates custom baseline expression data required structure data types use power analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom baseline expression data — validate_custom_baseline","text":"","code":"validate_custom_baseline(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom baseline expression data — validate_custom_baseline","text":"data Data frame containing custom baseline expression data file_path Character. Optional file path error messages (default: \"uploaded file\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom baseline expression data — validate_custom_baseline","text":"List validation results: valid Logical. TRUE data passes validation checks data Data frame. Cleaned validated data (valid=TRUE) errors Character vector. Error messages (valid=FALSE) warnings Character vector. Warning messages summary Character. Summary statistics display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom baseline expression data — validate_custom_baseline","text":"Required columns: response_id: Character vector gene IDs (preferably Ensembl IDs) relative_expression: Numeric vector expression values (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (positive values)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"function validates custom baseline expression RDS data required structure baseline expression data dispersion curve function.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"","code":"validate_custom_baseline_rds(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"data List object RDS file containing baseline expression data file_path Character. Optional file path error messages (default: \"uploaded file\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"List validation results: valid Logical. TRUE data passes validation checks data List. Validated data structure (valid=TRUE) errors Character vector. Error messages (valid=FALSE) warnings Character vector. Warning messages summary Character. Summary statistics display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"Required structure: List two elements: 'baseline_expression' 'expression_dispersion_curve' baseline_expression: Data frame columns 'response_id', 'relative_expression', 'expression_size' expression_dispersion_curve: Function takes numeric vector returns dispersion values","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom library RDS file structure and content — validate_custom_library_rds","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"function validates uploaded RDS file contains valid library parameters correct structure value ranges power analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"","code":"validate_custom_library_rds(data, filename = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"data loaded RDS data validate filename Character. original filename error reporting (optional)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"list validation results: valid Logical. TRUE validation passed data validated data valid, NULL otherwise errors Character vector error messages warnings Character vector warning messages summary Character. HTML summary display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"Expected RDS structure:  list(   UMI_per_cell = numeric_value,  # Positive number   variation = numeric_value      # Positive number 0 1 )","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of NB distribution — var_nb","title":"Variance of NB distribution — var_nb","text":"Variance NB distribution","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of NB distribution — var_nb","text":"","code":"var_nb(mean, size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of NB distribution — var_nb","text":"mean mean gene expression. size size parameter.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of NB distribution — var_nb","text":"variance NB distribution.","code":""},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"parameter-naming-standardization-0-2-0","dir":"Changelog","previous_headings":"Major Changes","what":"Parameter Naming Standardization","title":"perturbplan 0.2.0","text":"change clarifies parameter refers raw sequencing reads (mapping), mapped reads Affects: compute_power_plan(), compute_power_posthoc(), cost_power_computation(), find_optimal_cost_design(), related functions Improved internal handling mapping efficiency automatic conversion rounding","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"new-vignettes-and-documentation-0-2-0","dir":"Changelog","previous_headings":"Major Changes","what":"New Vignettes and Documentation","title":"perturbplan 0.2.0","text":"Comprehensive guide preprocessing Cell Ranger outputs Documentation reference_data_preprocessing_10x() reference_data_processing() Examples Perturb-seq TAP-seq workflows Mathematical details negative binomial expression model read-UMI saturation curve Enhanced prospective-power vignette updated parameter names Improved documentation pilot data preprocessing functions","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"enhanced-pilot-data-preprocessing-0-2-0","dir":"Changelog","previous_headings":"Major Changes","what":"Enhanced Pilot Data Preprocessing","title":"perturbplan 0.2.0","text":"Added gene_list parameter reference_data_processing() TAP-seq targeted gene panel support Created example TAP-seq pilot data targeted gene list Improved handling different prior values variation parameter (D2_rough) Enhanced example raw data reduce numerical singularity issues","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"Major Changes","what":"Bug Fixes","title":"perturbplan 0.2.0","text":"Fixed Matrix package warnings sparse matrix operations Resolved devtools::check() issues Fixed parameter passing cost optimization functions Improved numerical stability dispersion estimation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"website-and-documentation-improvements-0-2-0","dir":"Changelog","previous_headings":"Major Changes","what":"Website and Documentation Improvements","title":"perturbplan 0.2.0","text":"Redesigned pkgdown site structure homepage Added hex logo Rebuilt documentation updated parameter names Improved function examples cross-references Enhanced vignette figures visualizations","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"testing-0-2-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"perturbplan 0.2.0","text":"tests updated new parameter naming convention Enhanced test coverage parameter validation R CMD check tests passing (0 errors, 0 warnings)","code":""},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"cost-optimization-functions-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Cost Optimization Functions","title":"perturbplan 0.1.0","text":"cost_power_computation(): Comprehensive power analysis cost minimization across multiple experimental parameters find_optimal_cost_design(): Binary search optimization find experimental designs meeting power targets obtain_fixed_variable_constraining_cost(): Helper function cost-constrained experimental design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"enhanced-parameter-support-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Enhanced Parameter Support","title":"perturbplan 0.1.0","text":"\"TPM_threshold\" - Expression threshold optimization \"minimum_fold_change\" - Effect size optimization \"cells_per_target\" - Cell count optimization (cost_power_computation ) \"reads_per_cell\" - Sequencing depth optimization (cost_power_computation ) \"cost\" - Total cost optimization Differentiated validation cost_power_computation find_optimal_cost_design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"documentation-improvements-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Documentation Improvements","title":"perturbplan 0.1.0","text":"Added comprehensive @examples sections major functions Enhanced function documentation detailed parameter descriptions Added @keywords internal annotations helper functions","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"critical-fixes-0-1-0","dir":"Changelog","previous_headings":"Bug Fixes","what":"Critical Fixes","title":"perturbplan 0.1.0","text":"Fixed minimum_fold_change < 0.6 bug: Added safety check fallback mechanism cell range identification fails due small effect sizes Parameter naming standardization: Changed tmp_threshold variables TPM_threshold throughout codebase prevent typos","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"validation-improvements-0-1-0","dir":"Changelog","previous_headings":"Bug Fixes","what":"Validation Improvements","title":"perturbplan 0.1.0","text":"Enhanced input validation cost optimization functions Added NSE-safe dplyr operations using .data$ notation Improved error messages parameter checking","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"performance-improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"Performance Improvements","title":"perturbplan 0.1.0","text":"Optimized switch statement logic new minimizing variables Efficient handling cost calculations across experimental parameter grids Enhanced C++ integration computationally intensive operations","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"package-structure-0-1-0","dir":"Changelog","previous_headings":"","what":"Package Structure","title":"perturbplan 0.1.0","text":"Updated .Rbuildignore .gitignore pkgdown support Comprehensive test coverage new cost optimization features Maintained backward compatibility existing power analysis functions Breaking Changes: None - new features additive maintain full backward compatibility. Dependencies: new dependencies added core functionality.","code":""}]
