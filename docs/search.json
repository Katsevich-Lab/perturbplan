[{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"CLAUDE.md","text":"PerturbPlan R package experimental design power analysis perturb-seq experiments (CRISPR-based single-cell perturbation experiments). combines R C++ code efficient statistical computations.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"build-and-check","dir":"","previous_headings":"Common Development Commands","what":"Build and Check","title":"CLAUDE.md","text":"","code":"# Build the package R CMD build .  # Check the package (replace version as needed) R CMD check perturbplan_0.0.1.tar.gz  # Install the package locally R CMD INSTALL ."},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"development-workflow","dir":"","previous_headings":"Common Development Commands","what":"Development Workflow","title":"CLAUDE.md","text":"","code":"# Load package during development devtools::load_all()  # Run all tests devtools::test()  # Run a specific test file devtools::test(filter = \"test-library_computation\")  # Generate documentation from roxygen2 comments devtools::document()  # Check package without building devtools::check()"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"shiny-app","dir":"","previous_headings":"Common Development Commands","what":"Shiny App","title":"CLAUDE.md","text":"","code":"# Launch the interactive app (runs app.R) perturbplan::launch_app()"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Architecture","what":"Core Components","title":"CLAUDE.md","text":"calculate_power_grid(): Main function heatmap power analysis compute_power_grid_efficient(): Efficient grid-based power analysis using C++ Monte Carlo compute_power_posthoc(): Main function post-hoc power analysis Integrates C++ implementations performance library_estimation(): Estimates parameters existing data library_computation(): Computes QC-aware library statistics BH_cutoff.cpp: Benjamini-Hochberg multiple testing corrections compute_distribution_teststat_*.cpp: Test statistic distributions power_curves.cpp: Monte Carlo integration power curves Key C++ functions: compute_monte_carlo_teststat_cpp(), compute_fc_curve_cpp(), compute_expression_curve_cpp() Uses Rcpp seamless R/C++ integration Implements pairwise QC checks perturb-seq data Filters based minimum non-zero cell counts Comprehensive validation functions major operations Ensures data consistency across pipeline","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"data-flow","dir":"","previous_headings":"Architecture","what":"Data Flow","title":"CLAUDE.md","text":"Cell counts per gRNA Baseline expression statistics Perturbation-gene pairs analyze (Random mode Custom CSV grna_target, response_id columns) Analysis parameters (control group, test side, QC thresholds) Validates inputs CSV format (Custom mode) Handles gene multiplicity using weighted sampling duplicate genes pairs Computes QC-aware library sizes Calculates test statistic distributions using C++ Estimates power perturbation-gene pair Individual power pair Expected total discoveries","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"key-design-decisions","dir":"","previous_headings":"Architecture","what":"Key Design Decisions","title":"CLAUDE.md","text":"Rcpp Integration: C++ code handles computationally intensive operations (distribution calculations, multiple testing corrections) Modular Design: Separate functions parameter estimation, QC computation, power analysis allow flexible workflows Shiny Interface: Provides non-programmatic access via inst/shiny/app.R C++ Optimization: Monte Carlo loops implemented C++ significant performance improvements Weighted Sampling: Preserves gene multiplicity perturbation-gene pairs using efficient weighted sampling instead row duplication","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"CLAUDE.md","text":"package optimized computational efficiency: C++ Monte Carlo: .compute_power_plan_efficient() replaces older R-based .compute_underspecified_power_efficient() C++ implementations Batch Processing: Monte Carlo samples processed batch using compute_monte_carlo_teststat_cpp() Efficient Curves: Power curves computed using optimized C++ functions (compute_fc_curve_cpp, compute_expression_curve_cpp) Memory-Efficient Sampling: Uses weighted sampling gene multiplicity instead duplicating rows, reducing memory usage preserving statistical correctness","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"perturbation-gene-pairs-analysis","dir":"","previous_headings":"Shiny Application Features","what":"Perturbation-Gene Pairs Analysis","title":"CLAUDE.md","text":"Shiny app provides intuitive interface specifying perturbation-gene pairs: Random Mode: Randomly samples genes baseline expression dataset Required format: CSV grna_target response_id columns response_id must contain Ensembl gene IDs (e.g., ENSG00000141510) Preserves gene multiplicity: genes appearing multiple pairs get proportional weight power calculations Example file: inst/extdata/sample_pairs.csv","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"ui-organization","dir":"","previous_headings":"Shiny Application Features","what":"UI Organization","title":"CLAUDE.md","text":"application features streamlined two-tab structure: Overall Power: Unified tab sub-tabs “Heatmap” “Slice” views Drill-Power: Detailed power curve analysis selected experimental conditions Analysis choices ordered logical workflow: 1. Perturbation-gene pairs analyze: Random/Custom dropdown 2. Minimum TPM threshold: Gene expression filtering 3. Test side: Left (knockdown), Right (overexpression) 4. Control group: Complement cells vs Non-targeting cells 5. FDR target level: Multiple testing correction threshold","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"overall-power-tab","dir":"","previous_headings":"Shiny Application Features > Power Visualization Interface","what":"Overall Power Tab","title":"CLAUDE.md","text":"Drill-controls cells, reads per cell, (tiles) Context-sensitive sidebar showing relevant controls Conditional display: shows instruction message slices selected Interactive point selection multiple selection support","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"drill-down-power-tab","dir":"","previous_headings":"Shiny Application Features > Power Visualization Interface","what":"Drill-down Power Tab","title":"CLAUDE.md","text":"Provides detailed power curve analysis : Tabbed Interface: Separate tabs “Expression” “Fold Change” plots Color representing number cells Linetype point shape representing reads per cell Legends positioned right optimal space usage Clean legend labels (redundant “reads/cell” text) “Facet cells”: Horizontal panels separated cell count, colored reads per cell “Facet reads per cell”: Horizontal panels separated reads per cell, colored cell count ggside marginal histograms showing distribution expression/fold change values Points added line plots better data visibility Square aspect ratio panels optimal viewing Consistent 570px box heights across tabs Performance Optimization: Default 10×10 grid (instead 20×20) faster computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"file-validation","dir":"","previous_headings":"Shiny Application Features","what":"File Validation","title":"CLAUDE.md","text":"Validates CSV format required columns Provides clear error messages format issues Shows loading status: “Loaded X pairs (Y unique genes)” Warns genes filtered due low TPM","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"excel-download-organization","dir":"","previous_headings":"Shiny Application Features","what":"Excel Download Organization","title":"CLAUDE.md","text":"results Excel file organized numbered sheets logical reading: 1_Parameters: Analysis settings input parameters 2_Power_Grid: Main heatmap results (cells × reads per cell power grid) 3_Gene_List: Input gene list (custom pairs provided) 4_Selected_Designs: Information drill-selections 5_Fold_Change_Power: Detailed fold change power curves 6_Expression_Power: Detailed expression (TPM) power curves sheet uses logical column ordering: - Design column shows “cells × reads” format easy identification - Cells Reads_per_Cell separate numeric columns analysis - Data columns (Expression_TPM, Fold_Change, Power) follow design info - Clear naming: Descriptive column headers without redundancy","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"CLAUDE.md","text":"package uses testthat (edition 3) helper functions tests/testthat/helper-*.R test data generation. Tests compare analytical computations simulations ensure accuracy.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"known-issues","dir":"","previous_headings":"","what":"Known Issues","title":"CLAUDE.md","text":"Current R CMD check warnings need attention: Missing Imports: Need declare imports Matrix, sceptre, shiny packages Namespace Issues: Missing imports standard R functions (setNames, read.csv, ) Hidden Files: .claude directory added .Rbuildignore fix namespace issues, add NAMESPACE:","code":"importFrom(\"methods\", \"as\") importFrom(\"stats\", \"setNames\") importFrom(\"utils\", \"read.csv\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"parameter-naming-convention","dir":"","previous_headings":"","what":"Parameter Naming Convention","title":"CLAUDE.md","text":"IMPORTANT: Use TPM_threshold instead TPM_threshold everywhere package. function parameters use TPM_threshold variable names use TPM_threshold documentation reference TPM_threshold UI inputs use \"TPM_threshold\" input ID ensures consistency across entire codebase avoids confusion “TPM” (Transcripts Per Million) “tmp” (temporary).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"common-typos-to-avoid","dir":"","previous_headings":"","what":"Common Typos to Avoid","title":"CLAUDE.md","text":"TPM_threshold vs TPM_threshold: Always use TPM_threshold (Transcripts Per Million), TPM_threshold (temporary) Parameter consistency: adding parameters functions, double-check spelling matches existing usage Function signatures: Ensure parameter names match function definitions calls Careful attention existing code: modifying existing functions, preserve existing parameter names exactly ","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"combined-pilot-data-upload","dir":"","previous_headings":"","what":"Combined Pilot Data Upload","title":"CLAUDE.md","text":"Shiny application supports uploading combined pilot data includes baseline expression library parameters single RDS file. ensures consistency components simplifies upload process.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"using-combined-pilot-data","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Using Combined Pilot Data","title":"CLAUDE.md","text":"Navigate “Experimental setup” section sidebar Select “Custom” pilot data Upload RDS file required combined structure (see ) Proceed analysis - power calculations use custom data","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"required-rds-file-structure","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Required RDS File Structure","title":"CLAUDE.md","text":"RDS file must contain list exactly two named elements:","code":"combined_pilot_data <- list(   baseline_expression_stats = data.frame(     response_id = c(\"ENSG00000141510\", \"ENSG00000157764\", ...),    # Ensembl gene IDs     relative_expression = c(1.23e-05, 4.56e-06, ...),             # TPM/1e6 scale     expression_size = c(0.45, 1.23, ...)                          # Dispersion parameters   ),   library_parameters = list(     UMI_per_cell = 15000,    # Maximum UMI per cell parameter (positive numeric)     variation = 0.25         # Variation parameter for PCR bias (positive numeric)   ) )  # Save as RDS file saveRDS(combined_pilot_data, \"my_combined_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"data-requirements","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Data Requirements","title":"CLAUDE.md","text":"baseline_expression_stats component: - baseline_expression_stats: Data frame required columns: - response_id: Character vector gene IDs (preferably Ensembl format: ENSGXXXXXXXXXXX) - relative_expression: Numeric vector expression levels TPM/1e6 scale (.e., raw TPM divided 1,000,000) - expression_size: Numeric vector positive dispersion parameters - missing values column - Unique gene IDs (duplicates removed, keeping first occurrence) library_parameters component: - UMI_per_cell: Maximum UMI per cell parameter saturation curve fitting (typically 1000-50000) - variation: Variation parameter characterizing PCR amplification bias (typically 0.1-1.0) - parameters must positive single numeric values - missing values allowed","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-1-from-default-data","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 1: From Default Data","title":"CLAUDE.md","text":"","code":"# Load the package and default data library(perturbplan) pilot_data <- get_pilot_data_from_package(\"K562\") baseline_data <- if (!is.null(pilot_data$baseline_expression_stats)) {   pilot_data$baseline_expression_stats } else {   pilot_data$baseline_expression$baseline_expression } library_data <- pilot_data$library_parameters  # Combine into the expected structure combined_pilot_data <- list(   baseline_expression_stats = baseline_data,   library_parameters = library_data )  # Save as RDS saveRDS(combined_pilot_data, \"my_combined_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-2-from-your-own-measurements","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 2: From Your Own Measurements","title":"CLAUDE.md","text":"","code":"# Create your own baseline expression data my_baseline <- data.frame(   response_id = c(\"ENSG00000141510\", \"ENSG00000157764\"),   relative_expression = c(1.23e-05, 4.56e-06),   expression_size = c(0.45, 1.23) )  # Create your own library parameters my_library <- list(   UMI_per_cell = 18000,   variation = 0.22 )  # Combine and save combined_pilot_data <- list(   baseline_expression_stats = my_baseline,   library_parameters = my_library )  saveRDS(combined_pilot_data, \"my_custom_pilot_data.rds\")"},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"method-3-using-the-example-script","dir":"","previous_headings":"Combined Pilot Data Upload > Creating Combined Pilot Data Files","what":"Method 3: Using the Example Script","title":"CLAUDE.md","text":"Use example script inst/extdata/create_combined_pilot_example.R guidance creating combined pilot data files.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"file-validation-1","dir":"","previous_headings":"Combined Pilot Data Upload","what":"File Validation","title":"CLAUDE.md","text":"application automatically validates uploaded RDS files using validate_combined_pilot_data() provides detailed error messages : - Incorrect overall file structure missing top-level elements - Invalid baseline expression data (delegates validate_custom_baseline_rds()) - Invalid library parameters (delegates validate_custom_library_rds()) - Missing values duplicate gene IDs - File size limits (50MB maximum) - R version compatibility issues","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"integration-with-analysis-workflow","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Integration with Analysis Workflow","title":"CLAUDE.md","text":"Combined pilot data integrates seamlessly analysis features: - Compatible Random Custom gene list modes - Works analysis parameters (test side, control group, FDR levels) - Included Excel downloads clear documentation data source - Supports visualization features (heatmaps, power curves, drill-analysis) - Ensures consistency baseline expression library parameters experiment","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"performance-considerations","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Performance Considerations","title":"CLAUDE.md","text":"File size: Keep RDS files 50MB optimal performance Gene count: 1,000-10,000 genes typically provide good balance comprehensiveness speed Memory usage: Large datasets may require RAM analysis Parameter ranges: Extreme values may affect analysis speed accuracy","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"example-files","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Example Files","title":"CLAUDE.md","text":"Pre-built example files available: - inst/extdata/example_combined_pilot_data.rds: Combined K562 baseline library data - inst/extdata/create_combined_pilot_example.R: Script creating combined files","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"summary-display","dir":"","previous_headings":"Combined Pilot Data Upload","what":"Summary Display","title":"CLAUDE.md","text":"combined pilot data loaded successfully, application displays: “Loaded custom baseline expression (X,XXX genes) Average TPM: XX.X Loaded custom library parameters UMI per cell: XX,XXX Variation: X.XXXe-XX”","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"development-notes","dir":"","previous_headings":"","what":"Development Notes","title":"CLAUDE.md","text":"Function Migration: .compute_underspecified_power_efficient() replaced .compute_power_plan_efficient() better performance C++ Priority: possible, use C++ implementations R loops computationally intensive operations Grid Analysis: Use compute_power_grid_efficient() systematic power analysis across experimental conditions ggside Faceting: using ggplot2 faceting ggside histograms, convert numeric faceting variables factors explicitly avoid “Can’t combine factor double” errors. Use factor() proper levels labels facet_grid().","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"git-workflow-requirements","dir":"","previous_headings":"","what":"Git Workflow Requirements","title":"CLAUDE.md","text":"IMPORTANT: commit push requested, entire repository committed pushed, just specific changes. Complete Sync: commit push, difference local directory remote repository Clean Working Tree: git status show clean working tree pushing Full Commit: Use git add . stage changes committing, unless specifically instructed commit particular files Repository Consistency: remote repository always reflect complete current state local development environment ensures repository consistency prevents issues uncommitted changes left behind development sessions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/CLAUDE.html","id":"shiny-ui-tab-modification-guidelines","dir":"","previous_headings":"","what":"Shiny UI Tab Modification Guidelines","title":"CLAUDE.md","text":"IMPORTANT: making modifications tabs Shiny UI, always ensure changes align existing patterns: Tab Header Colors: Follow established color scheme defined CSS selectors (e.g., #exp-header, #perturbation-header, #analysis-header, #effects-header) Collapsibility: Maintain collapsible functionality proper JavaScript integration CSS Consistency: Update relevant CSS selectors JavaScript arrays adding/removing/modifying tabs Header styling hover effects Chevron icons proper rotation Content containers consistent padding background Display states (display: none collapsed, display: block expanded) adding modifying tabs, check: 1. CSS selectors ui_styles.R include new tab IDs 2. JavaScript arrays (allSections, allChevrons) updated 3. Initial state setup includes new tab 4. Color scheme hover effects match existing tabs","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 perturbplan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"perturbplan","dir":"Articles","previous_headings":"","what":"PerturbPlan","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"goal PerturbPlan facilitate experimental design power analysis perturb-seq experiments. example , demonstrate use compute_power_posthoc() compute power experiment conducted (opposed prospectively).","code":"library(perturbplan)"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"dataset-summaries","dir":"Articles","previous_headings":"PerturbPlan > PerturbPlan inputs","what":"1. Dataset summaries","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"Let us consider toy perturb-seq dataset 3 enhancers, targeted 2 gRNAs, 2 non-targeting gRNAs, 4 genes. Suppose 1000 total cells experiment: Based data, suppose information number cells received gRNA: Furthermore, computed mean size parameters baseline expression gene:","code":"num_total_cells <- 1000 cells_per_grna #>      grna_id   grna_target num_cells #> 1 enh1_grna1          enh1        93 #> 2 enh2_grna1          enh2       113 #> 3 enh3_grna1          enh3       112 #> 4   nt_grna1 non-targeting       104 #> 5 enh1_grna2          enh1        84 #> 6 enh2_grna2          enh2       104 #> 7 enh3_grna2          enh3       107 #> 8   nt_grna2 non-targeting       105 baseline_expression_stats #>   response_id expression_mean expression_size #> 1       gene1        2.002931       0.2967991 #> 2       gene2       12.326867       8.3723191 #> 3       gene3        4.014221       2.5988431 #> 4       gene4        1.460472       2.6746265"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"analysis-choices","dir":"Articles","previous_headings":"PerturbPlan > PerturbPlan inputs","what":"Analysis choices","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"Suppose tested effects elements genes. can encode discovery_pairs data frame, sceptre: analyzed data using complement control group, left-sided tests, default values pairwise QC parameters:","code":"discovery_pairs #>      grna_target response_id #> 1           enh1       gene1 #> 2           enh2       gene1 #> 3           enh3       gene1 #> 4  non-targeting       gene1 #> 5           enh1       gene2 #> 6           enh2       gene2 #> 7           enh3       gene2 #> 8  non-targeting       gene2 #> 9           enh1       gene3 #> 10          enh2       gene3 #> 11          enh3       gene3 #> 12 non-targeting       gene3 #> 13          enh1       gene4 #> 14          enh2       gene4 #> 15          enh3       gene4 #> 16 non-targeting       gene4 control_group <- \"complement\" side <- \"both\" n_nonzero_trt_thresh <- 7 n_nonzero_cntrl_thresh <- 7"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"power-analysis-parameters","dir":"Articles","previous_headings":"PerturbPlan > PerturbPlan inputs","what":"3. Power analysis parameters","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"want compute power enhancer-gene pair assuming gRNAs targeting enhancer fold changes gene mean standard deviations 0.85 0.13, respectively: want deem perturbation-gene pairs significant power analysis pass threshold 0.005: number may obtained pp-value cutoff original analysis.","code":"fold_change_mean <- 0.85 fold_change_sd <- 0.13 cutoff <- 0.005"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"running-perturbplan","dir":"Articles","previous_headings":"PerturbPlan","what":"Running PerturbPlan","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"can now compute power enhancer-gene pair using compute_power_posthoc() function:","code":"power_results <- compute_power_posthoc(   num_total_cells = num_total_cells,   cells_per_grna = cells_per_grna,   baseline_expression_stats = baseline_expression_stats,   discovery_pairs = discovery_pairs,   control_group = control_group,   side = side,   n_nonzero_trt_thresh = n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh = n_nonzero_cntrl_thresh,   fold_change_mean = fold_change_mean,   fold_change_sd = fold_change_sd,   cutoff = cutoff )"},{"path":"https://katsevich-lab.github.io/perturbplan/articles/posthoc.html","id":"perturbplan-outputs","dir":"Articles","previous_headings":"PerturbPlan","what":"PerturbPlan outputs","title":"Posthoc Power Analysis with compute_power_posthoc()","text":"result list fields expected_num_discoveries individual_power: field expected_num_discoveries contains expected number discoveries across enhancer-gene pairs: field individual_power data frame containing power enhancer-gene pair:","code":"names(power_results) #> [1] \"individual_power\"         \"expected_num_discoveries\" power_results$expected_num_discoveries #> [1] NA power_results$individual_power #> # A tibble: 16 × 3 #>    grna_target   response_id   power #>    <chr>         <chr>         <dbl> #>  1 enh1          gene1        0.0430 #>  2 enh2          gene1        0.0561 #>  3 enh3          gene1        0.0567 #>  4 non-targeting gene1       NA      #>  5 enh1          gene2        0.693  #>  6 enh2          gene2        0.724  #>  7 enh3          gene2        0.725  #>  8 non-targeting gene2       NA      #>  9 enh1          gene3        0.389  #> 10 enh2          gene3        0.439  #> 11 enh3          gene3        0.441  #> 12 non-targeting gene3       NA      #> 13 enh1          gene4        0.242  #> 14 enh2          gene4        0.286  #> 15 enh3          gene4        0.288  #> 16 non-targeting gene4       NA"},{"path":"https://katsevich-lab.github.io/perturbplan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziang Niu. Author, maintainer. Yihui . Author. Eugene Katsevich. Author.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niu Z, Y, Katsevich E (2025). perturbplan: Perturbplan: Power Design Tools CRISPR Screens. R package version 0.1.0, https://katsevich-lab.github.io/perturbplan.","code":"@Manual{,   title = {perturbplan: Perturbplan: Power and Design Tools for CRISPR Screens},   author = {Ziang Niu and Yihui He and Eugene Katsevich},   year = {2025},   note = {R package version 0.1.0},   url = {https://katsevich-lab.github.io/perturbplan}, }"},{"path":"https://katsevich-lab.github.io/perturbplan/index.html","id":"perturbplan","dir":"","previous_headings":"","what":"YourPackage","title":"YourPackage","text":"goal PerturbPlan facilitate experimental design power analysis perturb-seq experiments.","code":"library(perturbplan)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"Pre-computed pilot data A549 lung adenocarcinoma cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"","code":"A549_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"list 2 elements: baseline_expression_stats Data frame gene expression data (14,179 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (42,374) variation: Variation parameter PCR bias (0.376)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"Processed single-cell RNA-seq data A549 cells using 10x Chromium technology.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"dataset generated A549 lung adenocarcinoma cells using single-cell RNA sequencing 10x Chromium technology. data processed extract key statistical parameters needed power analysis calculations: Gene expression levels filtered genes TPM >= 1 Dispersion parameters estimated using negative binomial models Library size parameters fitted using saturation-magnitude curves","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A549 10x Chromium reference data for CRISPR power analysis — A549_10x","text":"","code":"# Load A549 data data(A549_10x)  # Examine baseline expression data baseline_expr <- A549_10x$baseline_expression_stats print(head(baseline_expr)) #>                     response_id relative_expression expression_size #> ENSG00000241860 ENSG00000241860        3.922658e-07       0.6010162 #> ENSG00000237491 ENSG00000237491        5.598892e-06       2.7674984 #> ENSG00000228794 ENSG00000228794        8.586146e-06     173.0236351 #> ENSG00000225880 ENSG00000225880        2.622042e-07       0.3257330 #> ENSG00000230368 ENSG00000230368        1.925952e-06     431.5818535 #> ENSG00000272438 ENSG00000272438        5.094253e-06       2.3818018  # Check library parameters lib_params <- A549_10x$library_parameters print(lib_params) #> $UMI_per_cell #> [1] 42376.74 #>  #> $variation #> [1] 0.3756457 #>   # Check mapping efficiency mapping_eff <- A549_10x$mapping_efficiency print(mapping_eff) #> [1] 0.7938657"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":null,"dir":"Reference","previous_headings":"","what":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"Pre-computed pilot data A549 lung adenocarcinoma cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"","code":"A549_Sakellaropoulos"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (20,406 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (42,377) variation: Variation parameter PCR bias (0.376) mapping_efficiency Numeric. Mapping efficiency value (0.794)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"Paper: MethNet: robust approach identify regulatory hubs distal targets cancer methylomes Author Year: Sakellaropoulos et al., 2024 Journal: Nature Communications Accession: GSE236304 PMID: 37577603","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"dataset generated A549 lung adenocarcinoma cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition data processed extract key statistical parameters needed power analysis calculations.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/A549_Sakellaropoulos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A549 Sakellaropoulos Chromium reference data for CRISPR power analysis — A549_Sakellaropoulos","text":"","code":"data(A549_Sakellaropoulos) str(A549_Sakellaropoulos) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t20406 obs. of  3 variables: #>   ..$ response_id        : chr [1:20406] \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" \"ENSG00000225880\" ... #>   ..$ relative_expression: num [1:20406] 3.92e-07 5.60e-06 8.59e-06 2.62e-07 1.93e-06 ... #>   ..$ expression_size    : num [1:20406] 0.601 2.767 173.024 0.326 431.582 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 42377 #>   ..$ variation   : num 0.376 #>  $ mapping_efficiency       : num 0.794"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":null,"dir":"Reference","previous_headings":"","what":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"Thin wrapper validates inputs forwards compiled routine.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"","code":"BH_cutoff_bisection(mean_list, sd_list, side, multiple_testing_alpha, QC_prob)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". multiple_testing_alpha Numeric. Target false discovery rate family-wise error rate. QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/BH_cutoff_bisection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benjamini–Hochberg cutoff with bisection search (C++ back-end) — BH_cutoff_bisection","text":"Adjusted cutoff/significance level.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"function estimates false discovery proportion (FDP) computing expected number false discoveries divided expected total number discoveries, accounting quality control failures.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"","code":"FDP_estimate(mean_list, sd_list, side, cutoff, QC_prob)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". cutoff Numeric. Significance threshold rejecting hypotheses. QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"Numeric. estimated false discovery proportion (FDP).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/FDP_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate false discovery proportion (FDP) based on rejection probabilities — FDP_estimate","text":"FDP computed : $$FDP = \\frac{E[\\text{False Discoveries}]}{E[\\text{Total Discoveries}]}$$ : False discoveries assumed follow null distribution Total discoveries include true false positives QC failure probabilities incorporated calculations","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"Pre-computed pilot data K562 chronic myelogenous leukemia cells generated using 10x Chromium technology. reference dataset 10x Genomics. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"","code":"K562_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (16,395 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (61,081) variation: Variation parameter PCR bias (0.421) mapping_efficiency Numeric. Mapping efficiency value (0.801)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"Paper: 10X Genomics dataset: 10k K562 cells Author Year: 10x Genomics (example data K562), 2018","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"dataset generated K562 chronic myelogenous leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K562 10x Genomics reference data for CRISPR power analysis — K562_10x","text":"","code":"data(K562_10x) str(K562_10x) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t16395 obs. of  3 variables: #>   ..$ response_id        : chr [1:16395] \"ENSG00000243485\" \"ENSG00000241860\" \"ENSG00000286448\" \"ENSG00000237491\" ... #>   ..$ relative_expression: num [1:16395] 1.12e-07 7.65e-07 1.41e-07 6.94e-06 1.48e-05 ... #>   ..$ expression_size    : num [1:16395] 414.4428 0.6555 0.0515 7.965 8.8552 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 61081 #>   ..$ variation   : num 0.421 #>  $ mapping_efficiency       : num [1:54] 0.801 NA NA NA NA ..."},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":null,"dir":"Reference","previous_headings":"","what":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"Pre-computed pilot data K562 chronic myelogenous leukemia cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"","code":"K562_Gasperini"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (19,942 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (59,163) variation: Variation parameter PCR bias (0.397) mapping_efficiency Numeric. Mapping efficiency value (0.711)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"Paper: Genome-wide Framework Mapping Gene Regulation via Cellular Genetic Screens Author Year: Gasperini et al., 2019 Journal: Cell Accession: GSE120861 PMID: 30612741","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"dataset generated K562 chronic myelogenous leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/K562_Gasperini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K562 Gasperini reference data for CRISPR power analysis — K562_Gasperini","text":"","code":"data(K562_Gasperini) str(K562_Gasperini) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t19942 obs. of  3 variables: #>   ..$ response_id        : chr [1:19942] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000286448\" ... #>   ..$ relative_expression: num [1:19942] 1.50e-07 1.55e-06 7.33e-07 9.31e-07 7.43e-06 ... #>   ..$ expression_size    : num [1:19942] 0.3556 2.4156 7.7329 0.0341 3.4513 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 59163 #>   ..$ variation   : num 0.397 #>  $ mapping_efficiency       : num 0.711"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"Pre-computed pilot data THP-1 monocytic leukemia cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"","code":"THP1_Yao"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (16,373 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (77,799) variation: Variation parameter PCR bias (0.354) mapping_efficiency Numeric. Mapping efficiency value (0.677)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"Paper: Scalable genetic screening regulatory circuits using compressed Perturb-seq Author Year: Yao et al., 2023 Journal: Nature Biotechnology Accession: GSE221321 PMID: 36747806","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"dataset generated THP-1 monocytic leukemia cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: NT (non-targeting) cells low-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP1_Yao.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"THP-1 Yao reference data for CRISPR power analysis — THP1_Yao","text":"","code":"data(THP1_Yao) str(THP1_Yao) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t16373 obs. of  3 variables: #>   ..$ response_id        : chr [1:16373] \"ENSG00000238009\" \"ENSG00000225880\" \"ENSG00000230368\" \"ENSG00000224969\" ... #>   ..$ relative_expression: num [1:16373] 1.84e-07 1.49e-06 1.26e-06 5.81e-06 4.16e-06 ... #>   ..$ expression_size    : num [1:16373] 293.372 422.253 420.589 0.604 0.193 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 77799 #>   ..$ variation   : num 0.354 #>  $ mapping_efficiency       : num 0.677"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"Pre-computed pilot data THP-1 monocytic leukemia cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"","code":"THP_1_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"list 2 elements: baseline_expression_stats Data frame gene expression data: response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter variation: Variation parameter PCR bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"Processed single-cell RNA-seq data THP-1 cells using 10x Chromium technology.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"dataset generated THP-1 monocytic leukemia cells using single-cell RNA sequencing 10x Chromium technology. THP-1 cells commonly used study monocyte macrophage biology.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/THP_1_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"THP-1 10x Chromium reference data for CRISPR power analysis — THP_1_10x","text":"","code":"# Load THP-1 data data(THP_1_10x)  # Examine baseline expression data baseline_expr <- THP_1_10x$baseline_expression_stats print(head(baseline_expr)) #>                     response_id relative_expression expression_size #> ENSG00000238009 ENSG00000238009        1.835953e-07     293.3721799 #> ENSG00000225880 ENSG00000225880        1.494991e-06     422.2527568 #> ENSG00000230368 ENSG00000230368        1.258939e-06     420.5890092 #> ENSG00000224969 ENSG00000224969        5.809481e-06       0.6041202 #> ENSG00000187634 ENSG00000187634        4.157123e-06       0.1929134 #> ENSG00000188976 ENSG00000188976        4.930846e-05       4.4141363  # Check library parameters lib_params <- THP_1_10x$library_parameters print(lib_params) #> $UMI_per_cell #> [1] 77799.03 #>  #> $variation #> [1] 0.3539214 #>   # Check mapping efficiency mapping_eff <- THP_1_10x$mapping_efficiency print(mapping_eff) #> [1] 0.6767877"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"Pre-computed pilot data primary CD8+ T cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"","code":"T_CD8_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"list 2 elements: baseline_expression_stats Data frame gene expression data: response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter variation: Variation parameter PCR bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"Processed single-cell RNA-seq data primary CD8+ T cells using 10x Chromium technology.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"dataset generated primary CD8+ T cells using single-cell RNA sequencing 10x Chromium technology. CD8+ T cells important effector cells adaptive immunity cancer immunotherapy.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T_CD8 10x Chromium reference data for CRISPR power analysis — T_CD8_10x","text":"","code":"# Load T_CD8 data data(T_CD8_10x)  # Examine baseline expression data baseline_expr <- T_CD8_10x$baseline_expression_stats print(head(baseline_expr)) #>                     response_id relative_expression expression_size #> ENSG00000238009 ENSG00000238009        2.272418e-07     355.2451037 #> ENSG00000241860 ENSG00000241860        4.658458e-07     408.6813683 #> ENSG00000237491 ENSG00000237491        1.975868e-05       0.8114728 #> ENSG00000228794 ENSG00000228794        1.247558e-05       8.1164454 #> ENSG00000225880 ENSG00000225880        1.261192e-06       2.5174726 #> ENSG00000230368 ENSG00000230368        1.545244e-06     423.4230005  # Check library parameters lib_params <- T_CD8_10x$library_parameters print(lib_params) #> $UMI_per_cell #> [1] 8800.706 #>  #> $variation #> [1] 0.2974456 #>   # Check mapping efficiency mapping_eff <- T_CD8_10x$mapping_efficiency print(mapping_eff) #> [1] 0.6789469"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":null,"dir":"Reference","previous_headings":"","what":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"Pre-computed pilot data primary CD8+ T cells generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"","code":"T_CD8_Shifrut"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (20,935 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (8,801) variation: Variation parameter PCR bias (0.297) mapping_efficiency Numeric. Mapping efficiency value (0.679)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"Paper: Genome-wide CRISPR Screens Primary Human T Cells Reveal Key Regulators Immune Function Author Year: Shifrut et al., 2018 Journal: Cell Accession: GSE119450 PMID: 30449619","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"dataset generated primary CD8+ T cells using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/T_CD8_Shifrut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T_CD8 Shifrut reference data for CRISPR power analysis — T_CD8_Shifrut","text":"","code":"data(T_CD8_Shifrut) str(T_CD8_Shifrut) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t20935 obs. of  3 variables: #>   ..$ response_id        : chr [1:20935] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:20935] 2.27e-07 4.66e-07 1.98e-05 1.25e-05 1.26e-06 ... #>   ..$ expression_size    : num [1:20935] 355.245 408.681 0.811 8.116 2.517 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 8801 #>   ..$ variation   : num 0.297 #>  $ mapping_efficiency       : num 0.679"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"function computes adjusted significance level (cutoff) multiple hypothesis testing using either Benjamini-Hochberg (BH) Bonferroni correction, accounting quality control failures.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"","code":"adjusted_cutoff(   mean_list,   sd_list,   multiple_testing_alpha,   multiple_testing_method,   side,   QC_prob )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. multiple_testing_alpha Numeric. Target false discovery rate family-wise error rate. multiple_testing_method Character. Multiple testing method, either \"BH\" \"bonferroni\". side Character. Test sidedness: \"left\", \"right\", \"\". QC_prob Numeric vector. probability failing QC hypothesis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"Numeric. adjusted significance level (cutoff threshold).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/adjusted_cutoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute adjusted significance cutoff for multiple testing correction — adjusted_cutoff","text":"function implements: BH method: Uses bisection search find appropriate cutoff controls false discovery rate specified level Bonferroni method: Divides target alpha effective number tests (accounting QC failures)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Power Analysis Results — check_power_results","title":"Validate Power Analysis Results — check_power_results","text":"Validates power analysis results sufficient data applying cost power filters. Returns original unfiltered data validation passes.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Power Analysis Results — check_power_results","text":"","code":"check_power_results(   power_df,   cost_constraint,   cost_precision,   power_target,   power_precision )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Power Analysis Results — check_power_results","text":"power_df Data frame. Power analysis results columns including overall_power, total_cost. cost_constraint Numeric. Maximum budget constraint dollars. Set NULL disable cost filtering. cost_precision Numeric. Cost utilization factor. Filters designs total cost \\le cost_precision × cost_constraint. power_target Numeric. Target statistical power. power_precision Numeric. Acceptable precision around power target. Filters designs power \\ge power_target - power_precision.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Power Analysis Results — check_power_results","text":"Data frame. original unfiltered power analysis results (validation passes).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/check_power_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Power Analysis Results — check_power_results","text":"function validates filtering viability without actually filtering: Cost check: Verifies total_cost \\le cost_precision × cost_constraint     leave least one row (cost_constraint NULL) Power check: Verifies overall_power \\ge power_target - power_precision leave least one row Throws informative errors validation checks fail, otherwise returns original data.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute QC probability for each enhancer-gene pair — compute_QC","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"Compute QC probability enhancer-gene pair","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"","code":"compute_QC(   fold_change_mean,   expression_mean,   expression_size,   num_cntrl_cells,   num_trt_cells,   n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"fold_change_mean Numeric. Mean fold change effect size. expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution. num_cntrl_cells Integer. Number control cells score test. num_trt_cells Integer. Number treatment cells score test. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_QC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute QC probability for each enhancer-gene pair — compute_QC","text":"Probability enhancer-gene pair filtered due QC","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"function computes asymptotic mean standard deviation score test statistic used differential expression analysis single-cell perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"","code":"compute_distribution_teststat(   num_trt_cells,   num_cntrl_cells,   num_trt_cells_sq,   expression_mean,   expression_size,   fold_change_mean,   fold_change_sd )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"num_trt_cells Integer. Number treatment cells score test. num_cntrl_cells Integer. Number control cells score test. num_trt_cells_sq Numeric. Squared number treatment cells (used variance calculations). expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution. fold_change_mean Numeric. Mean fold change effect size. fold_change_sd Numeric. Standard deviation fold change effect size.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"list elements: mean Asymptotic mean test statistic sd Asymptotic standard deviation test statistic","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute asymptotic distribution of score test statistic — compute_distribution_teststat","text":"function computes asymptotic distribution parameters score test statistic negative binomial model. calculations account : Random effect sizes following normal distribution Negative binomial distribution gene expression Unequal sample sizes treatment control groups Pooled variance estimation denominator score test statistic follows asymptotically normal distribution null alternative hypotheses.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"Computes asymptotic mean standard deviation score test statistic random effect sizes perturb-seq experiments. function handles case fold changes vary randomly across perturbations, using average fold change second moment.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"","code":"compute_distribution_teststat_random_es_cpp(   num_trt_cell,   num_cntrl_cell,   expression_mean,   expression_size,   avg_fold_change,   avg_fold_change_sq )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"num_trt_cell Numeric. Number treatment cells num_cntrl_cell Numeric. Number control cells expression_mean Numeric. Mean baseline expression level expression_size Numeric. Size parameter negative binomial distribution avg_fold_change Numeric. Average fold change across perturbations avg_fold_change_sq Numeric. Average squared fold changes (second moment)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"list containing: mean Numeric. Asymptotic mean test statistic sd Numeric. Asymptotic standard deviation test statistic","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_distribution_teststat_random_es_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Test Statistic Distribution for Random Effect Sizes — compute_distribution_teststat_random_es_cpp","text":"function computes asymptotic distribution score test statistic assumption random effect sizes. key difference fixed effect sizes accounts variability fold changes using second moment (avg_fold_change_sq). computation follows steps: Compute treatment/control cell proportions Calculate treatment, control, pooled expression means Compute pooled variance using negative binomial variance formula Calculate denominator squared test statistic Compute control group variance Compute treatment group variance (incorporating fold change variability) Calculate final asymptotic mean standard deviation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"Compute Monte Carlo test statistics power analysis random effect sizes","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"","code":"compute_monte_carlo_teststat_cpp(   fc_expression_df,   library_size,   num_trt_cells,   num_cntrl_cells )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"fc_expression_df Data frame fold change expression information library_size Library size parameter num_trt_cells Number treatment cells num_cntrl_cells Number control cells","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_monte_carlo_teststat_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Monte Carlo test statistics for power analysis with random effect sizes — compute_monte_carlo_teststat_cpp","text":"List Monte Carlo mean standard deviation vectors","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power analysis for full parameter grid — compute_power_plan","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"function integrates compute_power_plan_per_grid() create comprehensive power analysis across multiple parameter combinations (TPM thresholds, fold changes).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"","code":"compute_power_plan(   TPM_threshold,   minimum_fold_change,   cells_per_target,   reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   assay = \"perturb-seq\",   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). assay String. Assay type: \"Perturb-seq\" \"TAP-seq\" (default: \"perturb-seq\"). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"Data frame comprehensive power analysis results across parameter combinations.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"function provides comprehensive power analysis : Expanding parameter combinations (TPM thresholds, fold changes) Creating fold change expression data combination Running compute_power_plan_per_grid() parameter set Combining results flat dataframe analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power analysis for full parameter grid — compute_power_plan","text":"","code":"# Define parameter ranges for comprehensive analysis TPM_threshold <- c(5, 10, 15) minimum_fold_change <- c(0.7, 0.8, 0.9) cells_per_target <- c(50, 100, 200) reads_per_cell <- c(10000, 25000, 50000)  # Get pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Run comprehensive power analysis full_results <- compute_power_plan(   TPM_threshold = TPM_threshold,   minimum_fold_change = minimum_fold_change,   cells_per_target = cells_per_target,   reads_per_cell = reads_per_cell,   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   MOI = 10,   num_targets = 100,   side = \"left\" )  # Examine results dim(full_results) #> [1] 81  7 head(full_results) #> # A tibble: 6 × 7 #>   minimum_fold_change TPM_threshold cells_per_target num_captured_cells #>                 <dbl>         <dbl>            <dbl>              <dbl> #> 1                 0.7             5               50               512. #> 2                 0.7             5              100              1025  #> 3                 0.7             5              200              2050  #> 4                 0.7             5               50               512. #> 5                 0.7             5              100              1025  #> 6                 0.7             5              200              2050  #> # ℹ 3 more variables: raw_reads_per_cell <dbl>, library_size <dbl>, #> #   overall_power <dbl> summary(full_results$overall_power) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0000124 0.0042365 0.0318464 0.1201911 0.1657155 0.7762058"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"function integrates compute_power_plan_per_grid() create comprehensive power analysis across multiple parameter combinations (TPM thresholds, fold changes).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"","code":"compute_power_plan_full_grid(   TPM_threshold,   minimum_fold_change,   cells_per_target,   reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   assay = \"perturb-seq\",   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). assay String. Assay type: \"Perturb-seq\" \"TAP-seq\" (default: \"perturb-seq\"). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"Data frame comprehensive power analysis results across parameter combinations.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"function provides comprehensive power analysis : Expanding parameter combinations (TPM thresholds, fold changes) Creating fold change expression data combination Running compute_power_plan_per_grid() parameter set Combining results flat dataframe analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_full_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power analysis for full parameter grid — compute_power_plan_full_grid","text":"","code":"# Define parameter ranges for comprehensive analysis TPM_threshold <- c(5, 10, 15) minimum_fold_change <- c(0.7, 0.8, 0.9) cells_per_target <- c(50, 100, 200) reads_per_cell <- c(10000, 25000, 50000)  # Get pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Run comprehensive power analysis full_results <- compute_power_plan_full_grid(   TPM_threshold = TPM_threshold,   minimum_fold_change = minimum_fold_change,   cells_per_target = cells_per_target,   reads_per_cell = reads_per_cell,   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   MOI = 10,   num_targets = 100,   side = \"left\" )  # Examine results dim(full_results) #> [1] 81  7 head(full_results) #> # A tibble: 6 × 7 #>   minimum_fold_change TPM_threshold cells_per_target num_captured_cells #>                 <dbl>         <dbl>            <dbl>              <dbl> #> 1                 0.7             5               50               512. #> 2                 0.7             5              100              1025  #> 3                 0.7             5              200              2050  #> 4                 0.7             5               50               512. #> 5                 0.7             5              100              1025  #> 6                 0.7             5              200              2050  #> # ℹ 3 more variables: raw_reads_per_cell <dbl>, library_size <dbl>, #> #   overall_power <dbl> summary(full_results$overall_power) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0000124 0.0042365 0.0318464 0.1201911 0.1657155 0.7762058"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"function computes overall power BH cutoff single experimental design. core utility function used grid-based power analysis functions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"","code":"compute_power_plan_overall(   num_trt_cells,   num_cntrl_cells,   library_size,   multiple_testing_alpha = 0.05,   multiple_testing_method = \"BH\",   side = \"left\",   fc_expression_df,   prop_non_null = 0.1,   return_full_results = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"num_trt_cells Number treatment cells num_cntrl_cells Number control cells library_size Library size (effective UMIs per cell) multiple_testing_alpha Alpha level multiple testing (default: 0.05) multiple_testing_method Multiple testing method (default: \"BH\") side Test sidedness (\"left\", \"right\", \"\", default: \"left\") fc_expression_df Data frame fold change expression info prop_non_null Proportion non-null hypotheses (default: 0.1) return_full_results TRUE, return list intermediate results; FALSE, return overall power","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"Overall power value (scalar) list full results depending return_full_results","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"function serves core power calculation utility : Computes test statistic distributions gene Applies Benjamini-Hochberg multiple testing correction Calculates overall statistical power function delegates optimized C++ implementation performance.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute overall power for power analysis (core utility function) — compute_power_plan_overall","text":"","code":"# Extract fold change and expression information fc_expr_info <- extract_fc_expression_info(   minimum_fold_change = 0.8,   gRNA_variability = 0.13,   biological_system = \"K562\",   B = 200 ) #> TPM filtering: Kept 8281 out of 19942 genes (threshold: 10 TPM) #> Random mode with replacement: Sampled 200 genes from 8281 available genes  # Get library parameters pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Calculate effective library size for 25000 reads per cell library_size <- fit_read_UMI_curve(   reads_per_cell = 25000,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # Calculate power for a specific experimental design power_result <- compute_power_plan_overall(   fc_expression_df = fc_expr_info$fc_expression_df,   library_size = library_size,   num_trt_cells = 400,   num_cntrl_cells = 600,   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1 )  print(paste(\"Overall power:\", round(power_result, 3))) #> [1] \"Overall power: 0.369\""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"C++ implementation compute_power_plan_overall provides significant performance improvements power analysis computations. Uses random effect sizes format avg_fold_change avg_fold_change_sq columns.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"","code":"compute_power_plan_overall_cpp(   fc_expression_df,   library_size,   num_trt_cells,   num_cntrl_cells,   multiple_testing_alpha = 0.05,   multiple_testing_method = \"BH\",   side = \"left\",   prop_non_null = 0.1,   return_full_results = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"fc_expression_df DataFrame fold change expression info. Must contain: relative_expression: Relative expression levels expression_size: Size parameters negative binomial distribution avg_fold_change: Average fold change across perturbations avg_fold_change_sq: Average squared fold changes (second moment) library_size Numeric. Effective library size num_trt_cells Numeric. Number treatment cells num_cntrl_cells Numeric. Number control cells multiple_testing_alpha Numeric. FDR target level (default 0.05) multiple_testing_method String. Method (\"BH\" supported) side String. Test sidedness (\"left\", \"right\", \"\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1) return_full_results Logical. Return full results just overall power","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"Numeric overall power (return_full_results=FALSE) List full results","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_overall_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute overall power for power analysis (C++) — compute_power_plan_overall_cpp","text":"C++ implementation uses optimized C++ functions random effect sizes: compute_monte_carlo_teststat_cpp(): Monte Carlo test statistics random effect sizes compute_BH_plan(): Benjamini-Hochberg significance cutoff rejection_computation_cpp(): Power calculations function provides identical results R version offering significant performance improvements eliminating R function call overhead.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"Simplified version identify_cell_read_range returns clean dataframe experimental design combinations corresponding power values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"","code":"compute_power_plan_per_grid(   cells_per_target,   reads_per_cell,   fc_expression_df,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   MOI = 10,   num_targets = 100,   gRNAs_per_target = 4,   non_targeting_gRNAs = 10,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. fc_expression_df Data frame fold change expression information. library_parameters List containing UMI_per_cell variation parameters. grid_size Integer. Number points dimension grid (default: 10). min_power_threshold Numeric. Minimum power threshold cell range determination (default: 0.01). max_power_threshold Numeric. Maximum power threshold cell range determination (default: 0.8). MOI Numeric. Multiplicity infection cell allocation calculations (default: 10). num_targets Integer. Number targets cell allocation calculations (default: 100). gRNAs_per_target Integer. Number gRNAs per target (default: 4). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). control_group String. Control group type: \"complement\" \"nt_cells\" (default: \"complement\"). multiple_testing_alpha Numeric. Alpha level multiple testing (default: 0.05). side String. Test sidedness: \"left\", \"right\", \"\" (default: \"left\"). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"Data frame columns: cells_per_target Numeric. Number treatment cells per target reads_per_cell Numeric. Sequencing reads per cell library_size Numeric. Effective library size (UMIs) overall_power Numeric. Statistical power experimental design num_captured_cells Numeric. Number captured cells raw_reads_per_cell Numeric. Raw reads per cell mapping","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"function simplifies experimental design process : Determining parameter sequences based input type: - Numeric value: Single fixed value (length = 1) - Numeric vector: Custom sequence (length = vector length) - \"varying\": Auto-generated sequence using optimal ranges (length = grid_size) Creating dynamic grids based sequence lengths: - Grid size = length(cells_seq) × length(reads_seq) - Examples: 1×1 (fixed), 5×1 (custom cells, fixed reads), 10×10 (varying) Computing power parameter combinations Returning clean dataframe ready analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_plan_per_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power analysis for experimental design grid — compute_power_plan_per_grid","text":"","code":"# Extract fold change and expression information fc_expr_info <- extract_fc_expression_info(   minimum_fold_change = 0.8,   gRNA_variability = 0.13,   biological_system = \"K562\",   B = 200 ) #> TPM filtering: Kept 8281 out of 19942 genes (threshold: 10 TPM) #> Random mode with replacement: Sampled 200 genes from 8281 available genes  # Get library parameters pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define experimental design grids cells_per_target <- c(50, 100, 200) reads_per_cell <- c(10000, 25000, 50000)  # Compute power across the grid power_grid <- compute_power_plan_per_grid(   cells_per_target = cells_per_target,   reads_per_cell = reads_per_cell,   fc_expression_df = fc_expr_info$fc_expression_df,   library_parameters = library_params,   MOI = 10,   num_targets = 100,   side = \"left\" )  # View results head(power_grid) #> # A tibble: 6 × 6 #>   cells_per_target reads_per_cell library_size overall_power num_captured_cells #>              <dbl>          <dbl>        <dbl>         <dbl>              <dbl> #> 1               50          10000        8917.       0.00327               512. #> 2              100          10000        8917.       0.0145               1025  #> 3              200          10000        8917.       0.0789               2050  #> 4               50          25000       19016.       0.00542               512. #> 5              100          25000       19016.       0.0404               1025  #> 6              200          25000       19016.       0.219                2050  #> # ℹ 1 more variable: raw_reads_per_cell <dbl> print(paste(\"Grid size:\", nrow(power_grid))) #> [1] \"Grid size: 9\""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power for each perturbation-gene pair — compute_power_posthoc","title":"Compute power for each perturbation-gene pair — compute_power_posthoc","text":"Compute power perturbation-gene pair","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power for each perturbation-gene pair — compute_power_posthoc","text":"","code":"compute_power_posthoc(   discovery_pairs,   cells_per_grna,   baseline_expression_stats,   control_group,   fold_change_mean,   fold_change_sd,   num_total_cells = NULL,   cutoff = NULL,   n_nonzero_trt_thresh = 7L,   n_nonzero_cntrl_thresh = 7L,   side = \"both\",   multiple_testing_method = \"BH\",   multiple_testing_alpha = 0.1 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power for each perturbation-gene pair — compute_power_posthoc","text":"discovery_pairs data frame specifying element-gene pairs consider, columns grna_target response_id cells_per_grna data frame specifying many cells contain gRNA, columns grna_id, grna_target, num_cells baseline_expression_stats data frame specifying baseline expression statistics gene, columns response_id, expression_mean, expression_size control_group character string specifying control group, either \"complement\" \"nt_cells\" fold_change_mean numeric value use mean effect size element-gene pairs fold_change_sd numeric value use standard deviation effect size element-gene pairs num_total_cells (Required control_group == \"complement\") positive integer specifying total number cells experiment cutoff (Optional) numeric value 0 1 use p-value cutoff n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 side (Optional) character string specifying side test, either \"left\", \"right\", \"\"; defaults \"\" multiple_testing_method (Optional) character string specifying multiple testing correction method use, either \"BH\" \"bonferroni\"; defaults \"BH\" multiple_testing_alpha (Optional) numeric value 0 1 specifying alpha level multiple testing correction; defaults 0.1","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power for each perturbation-gene pair — compute_power_posthoc","text":"list two elements: individual_power (data frame columns grna_target, response_id, power) expected_num_discoveries (numeric value)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_power_posthoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute power for each perturbation-gene pair — compute_power_posthoc","text":"","code":"## --- Toy perturb-seq dataset setup --- # Total number of cells in the experiment num_total_cells <- 1000L  # Number of cells receiving each gRNA # (3 enhancers × 2 gRNAs each + 2 non-targeting gRNAs) cells_per_grna <- data.frame(   grna_id      = c(\"enh1_grna1\",\"enh2_grna1\",\"enh3_grna1\",\"nt_grna1\",                    \"enh1_grna2\",\"enh2_grna2\",\"enh3_grna2\",\"nt_grna2\"),   grna_target  = c(\"enh1\",\"enh2\",\"enh3\",\"non-targeting\",                    \"enh1\",\"enh2\",\"enh3\",\"non-targeting\"),   num_cells    = c(93L,113L,112L,104L,84L,104L,107L,105L),   stringsAsFactors = FALSE )  # Baseline expression statistics (negative binomial mean and size per gene) baseline_expression_stats <- data.frame(   response_id       = paste0(\"gene\", 1:4),   expression_mean   = c(2.002931, 12.326867, 4.014221, 1.460472),   expression_size   = c(0.2967991, 8.3723191, 2.5988431, 2.6746265),   stringsAsFactors = FALSE )  # Discovery pairs: test 3 enhancers against 4 genes discovery_pairs <- within(expand.grid(   grna_target = c(\"enh1\",\"enh2\",\"enh3\"),   response_id = paste0(\"gene\", 1:4),   KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE ), { grna_target <- as.character(grna_target); response_id <- as.character(response_id) })  ## --- Analysis choices --- control_group <- \"complement\"          # use complement control group side <- \"left\"                         # left-sided test n_nonzero_trt_thresh   <- 7L            # min. nonzero counts in treatment n_nonzero_cntrl_thresh <- 7L            # min. nonzero counts in control  ## --- Power analysis parameters --- fold_change_mean <- 0.85                # expected mean fold change fold_change_sd   <- 0.13                # expected SD of fold change cutoff <- 0.005                         # significance threshold (p-value cutoff)  ## --- Run PerturbPlan posthoc power analysis --- power_results <- compute_power_posthoc(   num_total_cells = num_total_cells,   cells_per_grna = cells_per_grna,   baseline_expression_stats = baseline_expression_stats,   discovery_pairs = discovery_pairs,   control_group = control_group,   side = side,   n_nonzero_trt_thresh = n_nonzero_trt_thresh,   n_nonzero_cntrl_thresh = n_nonzero_cntrl_thresh,   fold_change_mean = fold_change_mean,   fold_change_sd = fold_change_sd,   cutoff = cutoff )  # Inspect outputs names(power_results)                    # available fields #> [1] \"individual_power\"         \"expected_num_discoveries\" power_results$expected_num_discoveries  # expected number of discoveries #> [1] 4.8324 head(power_results$individual_power)    # power per enhancer-gene pair #> # A tibble: 6 × 3 #>   grna_target response_id  power #>   <chr>       <chr>        <dbl> #> 1 enh1        gene1       0.0660 #> 2 enh2        gene1       0.0831 #> 3 enh3        gene1       0.0839 #> 4 enh1        gene2       0.718  #> 5 enh2        gene2       0.744  #> 6 enh3        gene2       0.745"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"Lightweight C++ function computes power single cell count read depth combination. Optimized use binary search algorithms cell range determination.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"","code":"compute_single_power_cpp(   num_cells,   reads_per_cell,   fc_expression_df,   UMI_per_cell,   variation,   MOI = 10,   num_targets = 100L,   gRNAs_per_target = 4L,   non_targeting_gRNAs = 10L,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"num_cells Numeric. Total number cells experiment reads_per_cell Numeric. Sequencing reads per cell fc_expression_df DataFrame fold change expression info UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve variation Numeric. Variation parameter S-M curve MOI Numeric. Multiplicity infection (default 10) num_targets Integer. Number targets (default 100) gRNAs_per_target Integer. gRNAs per target (default 4) non_targeting_gRNAs Integer. Non-targeting gRNAs (default 10) control_group String. Control group type (\"complement\" \"nt_cells\", default \"complement\") multiple_testing_alpha Numeric. FDR target level (default 0.05) side String. Test sidedness (\"left\", \"right\", \"\", default \"left\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"Numeric. Overall power specified experimental design point","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_single_power_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute power for a single experimental design point (C++) — compute_single_power_cpp","text":"function efficiently computes power single experimental condition : Converting read depth library size using S-M curve (fit_read_UMI_curve_cpp) Calculating treatment control cell counts based experimental design Computing overall power using compute_power_plan_overall_cpp function designed use binary search algorithms determine optimal cell count ranges based power thresholds.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probability mass of NB distribution at zero — compute_zero_prob","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"Compute probability mass NB distribution zero","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"","code":"compute_zero_prob(fold_change_mean, expression_mean, expression_size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"fold_change_mean Numeric. Mean fold change effect size. expression_mean Numeric. Mean gene expression level. expression_size Numeric. Size parameter negative binomial distribution.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/compute_zero_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probability mass of NB distribution at zero — compute_zero_prob","text":"Probability NB variable 0","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute experimental cost for perturb-seq experiments — cost_computation","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"function calculates total cost perturb-seq experiment combining library preparation costs sequencing costs based experimental platform, sequencing platform, number captured cells, raw reads per cell.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"","code":"cost_computation(   experimental_platform = \"10x Chromium v3\",   sequencing_platform = \"NovaSeq X 25B\",   num_captured_cells,   raw_reads_per_cell )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"experimental_platform Character. experimental platform used single-cell capture. Currently supported: \"10x Chromium v3\" (default). sequencing_platform Character. sequencing platform used RNA-seq. Currently supported: \"NovaSeq X 25B\" (default). num_captured_cells Numeric. Number captured cells experiment. raw_reads_per_cell Numeric. Number raw sequencing reads per cell.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"Numeric. Total experimental cost USD combining library preparation sequencing costs.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_computation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute experimental cost for perturb-seq experiments — cost_computation","text":"cost calculation includes two main components: Library preparation cost: Based cost per captured cell experimental platform Sequencing cost: Based cost per million reads sequencing platform Current cost parameters: 10x Chromium v3: $0.086 per captured cell NovaSeq X 25B: $0.374 per million reads Total cost = (cost_per_captured_cell × num_captured_cells) + (cost_per_million_reads × raw_reads_per_cell × num_captured_cells / 1e6)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"Performs cost-constrained optimization find minimal parameter value achieves target statistical power within specified budget perturb-seq experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"","code":"cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   assay = \"perturb-seq\",   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 20,   power_target = 0.8,   power_precision = 0.01,   min_power = 0.05,   max_power = 0.95,   cost_precision = 0.9,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint = NULL,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"minimizing_variable Character. parameter vary analysis. Options: \"TPM_threshold\" \"minimum_fold_change\". Default: \"TPM_threshold\". fixed_variable List. Fixed values analysis parameters. Can include: minimum_fold_change: Fixed fold change threshold (varying TPM_threshold) TPM_threshold: Fixed TPM threshold (varying minimum_fold_change) cells_per_target: Fixed cells per target (otherwise uses \"varying\") reads_per_cell: Fixed reads per cell (otherwise uses \"varying\") MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. gRNA variability parameter (default: 0.13). assay String. Assay type: \"perturb-seq\" \"TAP-seq\" (default: \"perturb-seq\"). control_group Character. Control group type: \"complement\" \"non_targeting\" (default: \"complement\"). side Character. Test side: \"left\", \"right\", \"\" (default: \"left\"). multiple_testing_alpha Numeric. Multiple testing significance level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics columns: response_id, relative_expression, expression_size. library_parameters List. Library parameters containing UMI_per_cell variation. grid_size Integer. Grid size parameter search (default: 20). power_target Numeric. Target statistical power (default: 0.8). power_precision Numeric. Acceptable precision around power target (default: 0.01). min_power Numeric. Minimum power threshold grid search (default: 0.05). max_power Numeric. Maximum power threshold grid search (default: 0.95). cost_precision Numeric. Cost utilization factor (default: 0.9). Filters designs total cost \\le cost_precision × cost_constraint. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). cost_constraint Numeric. Maximum budget constraint dollars (default: NULL). Set NULL disable cost constraints. mapping_efficiency Numeric. Sequencing mapping efficiency (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"Data frame power analysis results including: Analysis parameters (TPM_threshold, minimum_fold_change, etc.) Experimental design (cells_per_target, num_captured_cells, raw_reads_per_cell) Power metrics (overall_power) Cost breakdown (library_cost, sequencing_cost, total_cost) - cost_constraint specified Power threshold indicator (meets_threshold) - cost_constraint NULL Data frame power analysis results including: Analysis parameters (TPM_threshold, minimum_fold_change, etc.) Experimental design (cells_per_target, num_captured_cells, raw_reads_per_cell) Power metrics (overall_power) Cost breakdown (library_cost, sequencing_cost, total_cost)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"function implements two-stage optimization algorithm: Stage 1: Coarse Grid Search Creates parameter grid minimizing variable: TPM_threshold: 20 log-spaced values 1 1000 TPM minimum_fold_change: 20 values based test side (left: 0.01-1.0, right: 1.0-10.0, : combined) Runs power analysis across experimental design space Applies dual filtering: Power filter: power_target ± power_precision Cost filter: total_cost \\le budget_precision × cost_constraint Identifies minimum parameter value meeting constraints Stage 2: Fine Grid Search Re-runs power analysis optimal parameter higher resolution (100 grid points) Combines coarse fine search results comprehensive output Cost Model: $$Total Cost = Library Cost + Sequencing Cost$$ $$Library Cost = cost\\_per\\_captured\\_cell \\times num\\_captured\\_cells$$ $$Sequencing Cost = cost\\_per\\_million\\_reads \\times raw\\_reads\\_per\\_cell \\times num\\_captured\\_cells / 10^6$$ function performs comprehensive power analysis : Setting parameter grids based minimizing variable Computing power across experimental design space Calculating costs design Applying validation checks via check_power_results() Cost Model: Total cost calculated sum library preparation sequencing costs: Total Cost = Library Cost + Sequencing Cost : Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (raw_reads_per_cell * num_captured_cells) / 1,000,000 Parameter grid generation: TPM_threshold: Uses quantiles baseline expression (10th 99th percentile) minimum_fold_change: Uses ranges based test side (left: 0.5-0.9, right: 1-10, : combined)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/cost_power_computation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost-Power Optimization for Perturb-seq Experimental Design — cost_power_computation","text":"","code":"# Load pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Optimize TPM threshold with fixed fold change result1 <- cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = 15000,   cost_precision = 0.9 )   # Optimize fold change with fixed TPM threshold result2 <- cost_power_computation(   minimizing_variable = \"minimum_fold_change\",   fixed_variable = list(TPM_threshold = 10),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.9,   cost_constraint = NULL  # No cost constraint ) #> Warning: Maximum power threshold (0.95) not achievable within treatment cell bounds. Using upper bound.   # Load pilot data pilot_data <- get_pilot_data_from_package(\"K562\")  # Compute power across TPM_threshold range result1 <- cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = 15000 )   # Compute power across fold change range result2 <- cost_power_computation(   minimizing_variable = \"minimum_fold_change\",   fixed_variable = list(TPM_threshold = 50),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = NULL ) #> Warning: Maximum power threshold (0.95) not achievable within treatment cell bounds. Using upper bound.   # Optimize cost across all experimental designs result3 <- cost_power_computation(   minimizing_variable = \"cost\",   fixed_variable = list(TPM_threshold = 50, minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = NULL )   # Optimize cells per target with fixed detection parameters result4 <- cost_power_computation(   minimizing_variable = \"cells_per_target\",   fixed_variable = list(TPM_threshold = 50, minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = 10000 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract baseline expression information without fold change augmentation — extract_expression_info","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"function extracts processes baseline expression data power analysis without adding fold change parameters. handles pilot data loading, TPM filtering, gene sampling. modularized version first part extract_fc_expression_info.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"","code":"extract_expression_info(   biological_system = \"K562\",   B = 200,   gene_list = NULL,   TPM_threshold = 10,   custom_pilot_data = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"biological_system Character. Biological system baseline expression. Available options: \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\" (default: \"K562\"). B Integer. Number Monte Carlo samples generate gene_list NULL (default: 200). Ignored gene_list provided. gene_list Character vector. Optional list Ensembl gene IDs use analysis. provided, expression parameters extracted specified genes (sampling). NULL (default), B genes randomly sampled baseline data. TPM_threshold Numeric. Minimum TPM threshold (default: 10). Genes expression levels TPM_threshold/1e6 filtered power calculation. custom_pilot_data List. Optional custom pilot data. provided, data used instead default biological_system data. Must contain baseline_expression_stats (data frame gene expression data) library_parameters (UMI_per_cell variation).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"list elements: expression_df Data frame baseline expression parameters (response_id, relative_expression, expression_size) pilot_data Complete pilot data object use n_genes Integer number genes processed dataset","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_expression_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract baseline expression information without fold change augmentation — extract_expression_info","text":"function operates two modes: Gene-specific mode (gene_list provided): Uses specified genes importance sampling Random sampling mode (gene_list = NULL): Randomly samples B genes baseline Processing steps: Load pilot data (custom package) Apply TPM threshold filtering Sample genes according specified mode Return baseline expression data ready fold change augmentation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fold change and expression information for power analysis — extract_fc_expression_info","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"function combines fold change effect size sampling baseline expression data create comprehensive dataset Monte Carlo power analysis simulations. can handle user-specified genes random sampling scenarios.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"","code":"extract_fc_expression_info(   minimum_fold_change,   gRNA_variability,   biological_system = \"K562\",   B = 200,   gene_list = NULL,   TPM_threshold = 10,   custom_pilot_data = NULL,   gRNAs_per_target = 4 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"minimum_fold_change Numeric. Minimum expected fold change effect (mean gRNA effect distribution). gRNA_variability Numeric. Standard deviation gRNA effect sizes, representing variability gRNAs targeting gene. biological_system Character. Biological system baseline expression. Available options: \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\" (default: \"K562\"). B Integer. Number Monte Carlo samples generate gene_list NULL (default: 200). Ignored gene_list provided. gene_list Character vector. Optional list Ensembl gene IDs use analysis. provided, expression parameters extracted specified genes (sampling). NULL (default), B genes randomly sampled baseline data. TPM_threshold Numeric. Minimum TPM threshold (default: 10). Genes expression levels TPM_threshold/1e6 filtered power calculation. custom_pilot_data List. Optional custom pilot data. provided, data used instead default biological_system data. Must contain baseline_expression_stats (data frame relative_expression expression_size columns) library_parameters (UMI_per_cell variation). See reference_data_preprocessing_10x processing 10x Cell Ranger output reference_data_processing pilot data processing. gRNAs_per_target Integer. Number gRNAs per target (default: 4). target gRNAs_per_target individual gRNA effect sizes drawn specified fold change distribution. avg_fold_change avg_fold_change_sq calculated mean mean--squares gRNA effect sizes.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"list elements: fc_expression_df Data frame avg_fold_change, avg_fold_change_sq, expression parameters minimum_fold_change Numeric. input minimum fold change reference pilot_data List. Complete pilot data object use","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/extract_fc_expression_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract fold change and expression information for power analysis — extract_fc_expression_info","text":"function operates two modes: Gene-specific mode (gene_list provided): Uses specified genes, sampling Random sampling mode (gene_list = NULL): Randomly samples B genes baseline modes: Sets random seed reproducibility Filters genes TPM threshold (relative_expression < TPM_threshold/1e6) Generates gRNAs_per_target effect sizes per target normal distribution Calculates avg_fold_change avg_fold_change_sq gRNA effect sizes Returns combined data Monte Carlo integration random effect sizes","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"Identifies cost-optimal experimental designs achieve target statistical power within specified precision bounds. function processes cost-power analysis results find minimal-cost designs parameter level generates detailed cost grids design optimization.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"","code":"find_optimal_cost_design(   cost_power_df,   minimizing_variable,   power_target,   power_precision,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_grid_size = 200 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"cost_power_df Data frame. Output cost_power_computation containing power analysis results cost calculations. Must include columns: overall_power, total_cost, cells_per_target, raw_reads_per_cell, plus specified minimizing variable (except cost optimization). minimizing_variable Character. parameter optimized. Must one : \"TPM_threshold\": TPM expression threshold optimization \"minimum_fold_change\": Minimum fold change threshold optimization \"cost\": Total cost optimization across experimental designs power_target Numeric. Target statistical power level (typically 0.8 80% power). Must 0 1. power_precision Numeric. Acceptable precision around power target. Designs power within power_target ± power_precision considered acceptable. Must 0 1. MOI Numeric. Multiplicity infection parameter experimental design calculations (default: 10). Used compute number captured cells. num_targets Integer. Number target genes experiment (default: 100). Used cost calculations. non_targeting_gRNAs Integer. Number non-targeting gRNAs experiment (default: 10). Used calculate total library size captured cell requirements. gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). Used calculate total gRNAs experimental design parameters. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_grid_size Integer. Number grid points cost optimization grid (default: 200). Higher values provide finer resolution longer computation time.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"list containing two elements: optimal_cost_power_df Data frame optimal power-cost combinations, including columns input plus minimum cost information cost precision. optimal_cost_grid Data frame nested cost grids parameter level, containing detailed design alternatives within cost precision bounds.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"function implements three-stage cost optimization process: Stage 1: Power Filtering Filters input data designs achieving power within target ± precision Ensures viable designs (meeting power requirements) considered Stage 2: Cost Optimization Groups designs minimizing variable (e.g., TPM_threshold levels) Identifies minimum cost parameter level Computes cost precision (1% minimum cost) grid generation Records parameter ranges (min/max cells reads per cell) level Stage 3: Design Grid Generation Creates log-spaced grids within parameter ranges level Computes detailed cost components (library + sequencing costs) Filters designs within cost precision bounds (±1% minimum cost) Applies sampling reduce redundant designs preserving diversity Cost Model: Total cost calculation: Total Cost = Library Cost + Sequencing Cost : Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (reads_per_cell * num_captured_cells) / 1,000,000 num_captured_cells = ((gRNAs_per_target * num_targets + non_targeting_gRNAs) * cells_per_target) / (gRNAs_per_target * MOI) function designed work output cost_power_computation() provides fine-grained cost optimization experimental design selection.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/find_optimal_cost_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Optimal Cost-Efficient Experimental Designs — find_optimal_cost_design","text":"","code":"# Load pilot data and perform cost-power analysis pilot_data <- get_pilot_data_from_package(\"K562\") cost_results <- cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   power_target = 0.8,   cost_constraint = 15000 )  # Find optimal cost-efficient designs optimal_designs <- find_optimal_cost_design(   cost_power_df = cost_results,   minimizing_variable = \"TPM_threshold\",   power_target = 0.8,   power_precision = 0.02,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   cost_grid_size = 100 )  # print equi-cost designs print(head(optimal_designs$optimal_cost_power_df),width = Inf) #> # A tibble: 6 × 16 #>   minimum_fold_change TPM_threshold cells_per_target num_captured_cells #>                 <dbl>         <dbl>            <dbl>              <dbl> #> 1                 0.8         0.186           50777.            520467. #> 2                 0.8         0.186           37969.            389186. #> 3                 0.8         0.186           37969.            389186. #> 4                 0.8         0.186           28392.            291019. #> 5                 0.8         0.186           28392.            291019. #> 6                 0.8         0.186           21231.            217614. #>   raw_reads_per_cell library_size overall_power library_cost sequencing_cost #>                <dbl>        <dbl>         <dbl>        <dbl>           <dbl> #> 1              8847.        5917.         0.806       44760.           1722. #> 2             10387.        6860.         0.787       33470.           1512. #> 3             12196.        7937.         0.804       33470.           1775. #> 4             14319.        9162.         0.785       25028.           1558. #> 5             16811.       10546.         0.801       25028.           1830. #> 6             19738.       12100.         0.781       18715.           1606. #>   total_cost minimum_cost min_reads max_reads min_cells max_cells cost_precision #>        <dbl>        <dbl>     <dbl>     <dbl>     <dbl>     <dbl>          <dbl> #> 1     46482.       10601.     8847.   186661.     6638.    50777.           106. #> 2     34982.       10601.     8847.   186661.     6638.    50777.           106. #> 3     35245.       10601.     8847.   186661.     6638.    50777.           106. #> 4     26586.       10601.     8847.   186661.     6638.    50777.           106. #> 5     26857.       10601.     8847.   186661.     6638.    50777.           106. #> 6     20321.       10601.     8847.   186661.     6638.    50777.           106.  # print equi-power cost grid print(head(optimal_designs$optimal_cost_grid),width = Inf) #> # A tibble: 6 × 14 #>   TPM_threshold minimum_cost min_reads max_reads min_cells max_cells #>           <dbl>        <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1         0.186       10601.     8847.   186661.     6638.    50777. #> 2         0.186       10601.     8847.   186661.     6638.    50777. #> 3         0.186       10601.     8847.   186661.     6638.    50777. #> 4         0.186       10601.     8847.   186661.     6638.    50777. #> 5         0.186       10601.     8847.   186661.     6638.    50777. #> 6         0.186       10601.     8847.   186661.     6638.    50777. #>   cost_precision cells_per_target raw_reads_per_cell num_captured_cells #>            <dbl>            <dbl>              <dbl>              <dbl> #> 1           106.           11562.              9704.            118506. #> 2           106.           11326.             16381.            116095. #> 3           106.           11096.             21613.            113733. #> 4           106.           10870.             23705.            111420. #> 5           106.           10649.             29409.            109153. #> 6           106.           10432.             37626.            106933. #>   library_cost sequencing_cost total_cost cost_of_interest #>          <dbl>           <dbl>      <dbl>            <dbl> #> 1       10191.            430.     10622.            10601 #> 2        9984.            711.     10695.            10601 #> 3        9781.            919.     10700.            10601 #> 4        9582.            988.     10570.            10601 #> 5        9387.           1201.     10588.            10601 #> 6        9196.           1505.     10701.            10601  # Find globally optimal cost design across all parameters cost_optimal <- find_optimal_cost_design(   cost_power_df = cost_results,   minimizing_variable = \"cost\",   power_target = 0.8,   power_precision = 0.02,   cost_grid_size = 50 )  # print equi-cost designs print(head(cost_optimal$optimal_cost_power_df),width = Inf) #> # A tibble: 6 × 16 #>   minimum_fold_change TPM_threshold cells_per_target num_captured_cells #>                 <dbl>         <dbl>            <dbl>              <dbl> #> 1                 0.8         0.186            6638.             68037. #> 2                 0.8         0.186            8877.             90987. #> 3                 0.8         0.186            8877.             90987. #> 4                 0.8         0.186            8877.             90987. #> 5                 0.8         0.186            8877.             90987. #> 6                 0.8         0.186            8877.             90987. #>   raw_reads_per_cell library_size overall_power library_cost sequencing_cost #>                <dbl>        <dbl>         <dbl>        <dbl>           <dbl> #> 1            186661.       46813.         0.784        5851.           4750. #> 2             83670.       33395.         0.785        7825.           2847. #> 3             98235.       36187.         0.793        7825.           3343. #> 4            115335.       38944.         0.800        7825.           3925. #> 5            135413.       41643.         0.807        7825.           4608. #> 6            158985.       44269.         0.813        7825.           5410. #>   total_cost minimum_cost min_reads max_reads min_cells max_cells cost_precision #>        <dbl>        <dbl>     <dbl>     <dbl>     <dbl>     <dbl>          <dbl> #> 1     10601.         161.     8847.   186661.      157.    50777.           1.61 #> 2     10672.         161.     8847.   186661.      157.    50777.           1.61 #> 3     11168.         161.     8847.   186661.      157.    50777.           1.61 #> 4     11750.         161.     8847.   186661.      157.    50777.           1.61 #> 5     12433.         161.     8847.   186661.      157.    50777.           1.61 #> 6     13235.         161.     8847.   186661.      157.    50777.           1.61  # print the equi-power cost grid print(head(cost_optimal$optimal_cost_grid),width = Inf) #> # A tibble: 2 × 13 #>   minimum_cost min_reads max_reads min_cells max_cells cost_precision #>          <dbl>     <dbl>     <dbl>     <dbl>     <dbl>          <dbl> #> 1         161.     8847.   186661.      157.    50777.           1.61 #> 2         161.     8847.   186661.      157.    50777.           1.61 #>   cells_per_target raw_reads_per_cell num_captured_cells library_cost #>              <dbl>              <dbl>              <dbl>        <dbl> #> 1             177.             10020.              1816.         156. #> 2             157.             39393.              1614.         139. #>   sequencing_cost total_cost cost_of_interest #>             <dbl>      <dbl>            <dbl> #> 1            6.81       163.              161 #> 2           23.8        163.              161"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"function computes effective library size (UMIs) sequencing read depth using fitted saturation curves account PCR amplification bias UMI saturation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"","code":"fit_read_UMI_curve(reads_per_cell, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"reads_per_cell Numeric. Total reads per cell. UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve fit. variation Numeric. Variation parameter characterizing PCR bias S-M curve fit.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"Numeric. Effective library size UMIs.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"saturation-magnitude (S-M) curve model relates sequencing reads unique UMI counts accounting : PCR amplification variability UMI saturation high read depths Platform-specific technical biases","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute effective library size from read depth using UMI saturation curve — fit_read_UMI_curve","text":"","code":"# Get library parameters from pilot data pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define read depths to test read_depths <- c(10000, 25000, 50000, 100000)  # Calculate effective library sizes effective_umis <- fit_read_UMI_curve(   reads_per_cell = read_depths,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # View the results data.frame(   reads_per_cell = read_depths,   effective_UMI = effective_umis,   saturation_pct = round(100 * effective_umis / library_params$UMI_per_cell, 1) ) #>   reads_per_cell effective_UMI saturation_pct #> 1          10000      8917.345           15.1 #> 2          25000     19015.959           32.1 #> 3          50000     30151.321           51.0 #> 4         100000     42062.562           71.1  # Get library parameters from pilot data pilot_data <- get_pilot_data_from_package(\"K562\") library_params <- pilot_data$library_parameters  # Define read depths to test read_depths <- c(10000, 25000, 50000, 100000)  # Calculate effective library sizes effective_umis <- fit_read_UMI_curve(   reads_per_cell = read_depths,   UMI_per_cell = library_params$UMI_per_cell,   variation = library_params$variation )  # View the results data.frame(   reads_per_cell = read_depths,   effective_UMI = effective_umis,   saturation_pct = round(100 * effective_umis / library_params$UMI_per_cell, 1) ) #>   reads_per_cell effective_UMI saturation_pct #> 1          10000      8917.345           15.1 #> 2          25000     19015.959           32.1 #> 3          50000     30151.321           51.0 #> 4         100000     42062.562           71.1"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"C++ implementation saturation-magnitude (S-M) curve relates sequencing reads unique UMI counts, accounting PCR amplification variability UMI saturation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"","code":"fit_read_UMI_curve_cpp(reads_per_cell, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"reads_per_cell Numeric vector. Total reads per cell. UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve fit. variation Numeric. Variation parameter characterizing PCR bias S-M curve fit.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"Numeric vector. Effective library size UMIs read depth.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/fit_read_UMI_curve_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute effective library size from read depth using UMI saturation curve (C++) — fit_read_UMI_curve_cpp","text":"C++ implementation provides significant performance improvements R version large-scale power analysis computations. S-M curve formula: $$effective\\_UMI = UMI\\_per\\_cell \\times (1 - exp(-reads\\_per\\_cell / UMI\\_per\\_cell) \\times (1 + variation \\times reads\\_per\\_cell^2 / (2 \\times UMI\\_per\\_cell^2)))$$","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"Convenience function combines range identification grid generation power analysis heatmaps.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"","code":"generate_reads_grid_cpp(   experimental_platform,   UMI_per_cell,   variation,   grid_size = 10L )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"experimental_platform String. Experimental platform identifier. UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve. grid_size Integer. Number points grid (default: 10).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reads per cell grid using S-M curve analysis (C++) — generate_reads_grid_cpp","text":"NumericVector. Sequence reads per cell values grid.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"Streamlined convenience function combines range identification grid generation power analysis heatmaps.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"","code":"generate_reads_grid_streamlined_cpp(UMI_per_cell, variation, grid_size = 10L)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve. grid_size Integer. Number points grid (default: 10).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/generate_reads_grid_streamlined_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reads per cell grid (streamlined version) — generate_reads_grid_streamlined_cpp","text":"NumericVector. Sequence reads per cell values grid.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pilot data from package data directory — get_pilot_data_from_package","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"Internal function load baseline expression library parameters pilot datasets stored package data/ directory.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"","code":"get_pilot_data_from_package(biological_system)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"biological_system Character. biological system name (e.g., \"K562\", \"A549\", \"THP-1\", \"T_CD8\", \"iPSC\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"list containing: baseline_expression_stats Data frame gene expression data list baseline_expression_stats data frame library_parameters List UMI_per_cell variation parameters","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/get_pilot_data_from_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pilot data from package data directory — get_pilot_data_from_package","text":"","code":"# Load pilot data for K562 cells k562_data <- get_pilot_data_from_package(\"K562\")  # View the structure str(k562_data) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t19942 obs. of  3 variables: #>   ..$ response_id        : chr [1:19942] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000286448\" ... #>   ..$ relative_expression: num [1:19942] 1.50e-07 1.55e-06 7.33e-07 9.31e-07 7.43e-06 ... #>   ..$ expression_size    : num [1:19942] 0.3556 2.4156 7.7329 0.0341 3.4513 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 59163 #>   ..$ variation   : num 0.397 #>  $ mapping_efficiency       : num 0.711  # Access baseline expression data head(k562_data$baseline_expression_stats) #>                     response_id relative_expression expression_size #> ENSG00000243485 ENSG00000243485        1.503611e-07      0.35563916 #> ENSG00000238009 ENSG00000238009        1.554532e-06      2.41555115 #> ENSG00000241860 ENSG00000241860        7.325731e-07      7.73288757 #> ENSG00000286448 ENSG00000286448        9.312333e-07      0.03414057 #> ENSG00000237491 ENSG00000237491        7.428012e-06      3.45126152 #> ENSG00000228794 ENSG00000228794        2.774533e-05      4.99961853  # Access library parameters including mapping efficiency k562_data$library_parameters #> $UMI_per_cell #> [1] 59163.3 #>  #> $variation #> [1] 0.3968175 #>  cat(\"Mapping efficiency:\", k562_data$mapping_efficiency) #> Mapping efficiency: 0.7110861  # The mapping efficiency affects power calculations by determining # what fraction of sequencing reads contribute to gene expression # Higher mapping efficiency means more effective sequencing depth  # Compare mapping efficiency across cell types a549_data <- get_pilot_data_from_package(\"A549\") cat(\"K562 mapping efficiency:\", k562_data$mapping_efficiency) #> K562 mapping efficiency: 0.7110861 cat(\"A549 mapping efficiency:\", a549_data$mapping_efficiency) #> A549 mapping efficiency: 0.7938657"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"Pre-computed pilot data induced pluripotent stem cells (iPSCs) generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"","code":"iPSC_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"list 2 elements: baseline_expression_stats Data frame gene expression data: response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter variation: Variation parameter PCR bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"Processed single-cell RNA-seq data iPSCs using 10x Chromium technology.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"dataset generated induced pluripotent stem cells (iPSCs) using single-cell RNA sequencing 10x Chromium technology. iPSCs valuable studying development disease modeling.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC 10x Chromium reference data for CRISPR power analysis — iPSC_10x","text":"","code":"# Load iPSC data data(iPSC_10x)  # Examine baseline expression data baseline_expr <- iPSC_10x$baseline_expression_stats print(head(baseline_expr)) #>                     response_id relative_expression expression_size #> ENSG00000238009 ENSG00000238009        5.848084e-07       13.095940 #> ENSG00000241860 ENSG00000241860        1.013015e-06        8.705801 #> ENSG00000237491 ENSG00000237491        2.892232e-06      426.392690 #> ENSG00000228794 ENSG00000228794        6.029155e-06      443.334369 #> ENSG00000225880 ENSG00000225880        5.909257e-07        5.110739 #> ENSG00000230368 ENSG00000230368        1.003228e-06        2.493036  # Check library parameters lib_params <- iPSC_10x$library_parameters print(lib_params) #> $UMI_per_cell #> [1] 39078.95 #>  #> $variation #> [1] 0.4054415 #>   # Check mapping efficiency mapping_eff <- iPSC_10x$mapping_efficiency print(mapping_eff) #> [1] 0.7039053"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"Pre-computed pilot data induced pluripotent stem cells (iPSCs) generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"","code":"iPSC_Tian"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (21,207 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (39,079) variation: Variation parameter PCR bias (0.405) mapping_efficiency Numeric. Mapping efficiency value (0.704)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"Paper: CRISPR Interference-Based Platform Multimodal Genetic Screens Human iPSC-Derived Neurons Author Year: Tian et al., 2019 Journal: Neuron Accession: GSE124703 PMID: 31422865","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"dataset generated induced pluripotent stem cells (iPSCs) using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_Tian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC Tian reference data for CRISPR power analysis — iPSC_Tian","text":"","code":"data(iPSC_Tian) str(iPSC_Tian) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t21207 obs. of  3 variables: #>   ..$ response_id        : chr [1:21207] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:21207] 5.85e-07 1.01e-06 2.89e-06 6.03e-06 5.91e-07 ... #>   ..$ expression_size    : num [1:21207] 13.1 8.71 426.39 443.33 5.11 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 39079 #>   ..$ variation   : num 0.405 #>  $ mapping_efficiency       : num 0.704"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","title":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","text":"Pre-computed pilot data iPSC-derived neurons generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","text":"","code":"iPSC_neuron_10x"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_10x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","text":"list 2 elements: baseline_expression_stats Data frame gene expression data: response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter S-M curve variation: Variation parameter characterizing PCR amplification bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_10x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","text":"Processed single-cell RNA-seq data iPSC-derived neurons using 10x Chromium technology.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC-derived neuron 10x Chromium reference data for CRISPR power analysis — iPSC_neuron_10x","text":"","code":"# Load iPSC-derived neuron data data(iPSC_neuron_10x)  # Examine baseline expression data baseline_expr <- iPSC_neuron_10x$baseline_expression_stats print(head(baseline_expr)) #>                     response_id relative_expression expression_size #> ENSG00000238009 ENSG00000238009        9.842022e-07        8.196996 #> ENSG00000241860 ENSG00000241860        1.834673e-06        2.466161 #> ENSG00000237491 ENSG00000237491        6.470190e-06        2.491854 #> ENSG00000228794 ENSG00000228794        4.416889e-05        6.126181 #> ENSG00000225880 ENSG00000225880        5.888685e-06        0.332572 #> ENSG00000230368 ENSG00000230368        1.208089e-06        3.718480  # Check library parameters lib_params <- iPSC_neuron_10x$library_parameters print(lib_params) #> $UMI_per_cell #> [1] 32284.96 #>  #> $variation #> [1] 0.4432161 #>   # Check mapping efficiency mapping_eff <- iPSC_neuron_10x$mapping_efficiency print(mapping_eff) #> [1] 0.6140986"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":null,"dir":"Reference","previous_headings":"","what":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"Pre-computed pilot data iPSC-derived neurons generated using 10x Chromium technology. Contains baseline gene expression parameters library size information power analysis CRISPR-based perturbation experiments.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"","code":"iPSC_neuron_Tian"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"list 3 elements: baseline_expression_stats Data frame gene expression data (23,882 genes × 3 columns): response_id: Character vector Ensembl gene IDs relative_expression: Numeric vector relative expression levels (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (theta) library_parameters List containing: UMI_per_cell: Maximum UMI per cell parameter (32,285) variation: Variation parameter PCR bias (0.443) mapping_efficiency Numeric. Mapping efficiency value (0.614)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"Paper: CRISPR Interference-Based Platform Multimodal Genetic Screens Human iPSC-Derived Neurons Author Year: Tian et al., 2019 Journal: Neuron Accession: GSE124703 PMID: 31422865","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"dataset generated iPSC-derived neurons using single-cell RNA sequencing 10x Chromium technology. Cells Used Relative Expression Estimate: cells high-moi condition","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/iPSC_neuron_Tian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPSC-derived neuron Tian reference data for CRISPR power analysis — iPSC_neuron_Tian","text":"","code":"data(iPSC_neuron_Tian) str(iPSC_neuron_Tian) #> List of 3 #>  $ baseline_expression_stats:'data.frame':\t23882 obs. of  3 variables: #>   ..$ response_id        : chr [1:23882] \"ENSG00000238009\" \"ENSG00000241860\" \"ENSG00000237491\" \"ENSG00000228794\" ... #>   ..$ relative_expression: num [1:23882] 9.84e-07 1.83e-06 6.47e-06 4.42e-05 5.89e-06 ... #>   ..$ expression_size    : num [1:23882] 8.197 2.466 2.492 6.126 0.333 ... #>  $ library_parameters       :List of 2 #>   ..$ UMI_per_cell: num 32285 #>   ..$ variation   : num 0.443 #>  $ mapping_efficiency       : num 0.614"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"Determines minimum maximum cell counts power analysis using binary search. Uses cross-search strategy guarantee logical ordering (min_cells <= max_cells): finds min_cells best-case reads max_cells worst-case reads.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"","code":"identify_cell_range_cpp(   min_reads_per_cell,   max_reads_per_cell,   fc_expression_df,   UMI_per_cell,   variation,   MOI = 10,   num_targets = 100L,   gRNAs_per_target = 4L,   non_targeting_gRNAs = 10L,   control_group = \"complement\",   multiple_testing_alpha = 0.05,   side = \"left\",   prop_non_null = 0.1,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   cell_lower_bound = 100,   cell_upper_bound = 1e+07 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"min_reads_per_cell Numeric. Minimum reads per cell library size range max_reads_per_cell Numeric. Maximum reads per cell library size range fc_expression_df DataFrame fold change expression info UMI_per_cell Numeric. Maximum UMI per cell parameter S-M curve variation Numeric. Variation parameter S-M curve MOI Numeric. Multiplicity infection (default 10) num_targets Integer. Number targets (default 100) gRNAs_per_target Integer. gRNAs per target (default 4) non_targeting_gRNAs Integer. Non-targeting gRNAs (default 10) control_group String. Control group type (\"complement\" \"nt_cells\", default \"complement\") multiple_testing_alpha Numeric. FDR target level (default 0.05) side String. Test sidedness (\"left\", \"right\", \"\", default \"left\") prop_non_null Numeric. Proportion non-null hypotheses (default 0.1) min_power_threshold Numeric. Minimum power threshold min cells (default 0.01) max_power_threshold Numeric. Target power threshold max cells (default 0.8) cell_lower_bound Numeric. Lower bound total cell search (default 100) cell_upper_bound Numeric. Upper bound total cell search (default 1e7)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"List min_cells, max_cells, achieved power values","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_cell_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal cell count range based on power thresholds (C++) — identify_cell_range_cpp","text":"function performs two binary searches using cross-search strategy: Find minimum cells: power >= min_power_threshold using max_reads_per_cell (best-case) Find maximum cells: power >= max_power_threshold using min_reads_per_cell (worst-case) cross-search strategy ensures min_cells <= max_cells provides robust experimental design ranges minimally acceptable well-powered studies.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"function determines minimum maximum reads per cell values power analysis grid generation based experimental platform capabilities S-M curve saturation analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"","code":"identify_library_size_range(experimental_platform, library_parameters)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"experimental_platform Character. Experimental platform identifier (e.g., \"10x Chromium v3\", \"\"). library_parameters List. Library parameters containing UMI_per_cell variation parameters S-M curve analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"List elements: min_reads_per_cell Minimum reads per cell based platform max_reads_per_cell Maximum reads per cell ~80% UMI saturation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range for power analysis grid — identify_library_size_range","text":"function wrapper around optimized C++ implementation identify_library_size_range_cpp provides significant performance improvements power analysis computations. function operates two phases: Minimum determination: Platform-specific minimum sequencing depth based typical experimental capabilities quality thresholds. Maximum determination: Uses binary search S-M curve find reads per cell achieves approximately 80% UMI saturation. 80% saturation achievable within practical limits (10x UMI_per_cell), returns practical upper bound.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"C++ implementation determines minimum maximum reads per cell values power analysis grid generation using binary search S-M curve. Uses saturation-based thresholds (10% 80%) instead platform-specific minimums.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"","code":"identify_library_size_range_cpp(experimental_platform, UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"experimental_platform String. Experimental platform identifier (kept compatibility, used). UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"List min_reads_per_cell max_reads_per_cell elements.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_library_size_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range for power analysis grid (C++) — identify_library_size_range_cpp","text":"C++ implementation uses efficient binary search find reads per cell range power analysis. Uses saturation-based thresholds: Minimum reads: 10% UMI saturation (dynamic based UMI_per_cell) Maximum reads: 80% UMI saturation (diminishing returns beyond point)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"Streamlined C++ implementation determines minimum maximum reads per cell values power analysis grid generation using binary search S-M curve. Uses saturation-based thresholds (10% 80%) clean API.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"","code":"identify_reads_range_cpp(UMI_per_cell, variation)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"UMI_per_cell Numeric. Maximum UMI per cell parameter. variation Numeric. Variation parameter S-M curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"List min_reads_per_cell max_reads_per_cell elements.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/identify_reads_range_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify optimal reads per cell range (streamlined version) — identify_reads_range_cpp","text":"streamlined version removes unused experimental_platform parameter. Uses efficient binary search find reads per cell range power analysis: Minimum reads: 10% UMI saturation (dynamic based UMI_per_cell) Maximum reads: 80% UMI saturation (diminishing returns beyond point)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for compute_power_plan — input_check_compute_power_plan","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"Input checking function compute_power_plan","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"","code":"input_check_compute_power_plan(   TPM_threshold,   minimum_fold_change,   cells_per_target,   reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for compute_power_plan — input_check_compute_power_plan","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan_full_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for compute_power_plan_full_grid — input_check_compute_power_plan_full_grid","title":"Input checking function for compute_power_plan_full_grid — input_check_compute_power_plan_full_grid","text":"Input checking function compute_power_plan_full_grid","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan_full_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for compute_power_plan_full_grid — input_check_compute_power_plan_full_grid","text":"","code":"input_check_compute_power_plan_full_grid(   TPM_threshold,   minimum_fold_change,   cells_per_target,   reads_per_cell,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 10,   min_power_threshold = 0.01,   max_power_threshold = 0.8,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_compute_power_plan_full_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for compute_power_plan_full_grid — input_check_compute_power_plan_full_grid","text":"TPM_threshold Numeric, numeric vector, character. TPM threshold value, custom sequence, \"varying\" auto-selection. minimum_fold_change Numeric, numeric vector, character. Minimum fold change value, custom sequence, \"varying\" auto-selection. cells_per_target Numeric, numeric vector, character. Number cells per target, custom sequence, \"varying\" auto-generated grid. reads_per_cell Numeric, numeric vector, character. Reads per cell, custom sequence, \"varying\" auto-generated grid. MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. Standard deviation gRNA effect variation (default: 0.13). control_group String. Control group type (default: \"complement\"). side String. Test sidedness (default: \"left\"). multiple_testing_alpha Numeric. FDR level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics. See reference_data_processing data format requirements. library_parameters List. Library parameters UMI_per_cell variation. See reference_data_processing parameter specifications. grid_size Integer. Grid size dimension (default: 10). min_power_threshold Numeric. Minimum power threshold (default: 0.01). max_power_threshold Numeric. Maximum power threshold (default: 0.8). mapping_efficiency Numeric. Mapping efficiency raw reads usable reads (default: 0.72). See reference_data_processing typical values.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for cost_power_computation — input_check_cost_power_computation","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"Input checking function cost_power_computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"","code":"input_check_cost_power_computation(   minimizing_variable = \"TPM_threshold\",   fixed_variable = list(minimum_fold_change = 0.8),   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   gRNA_variability = 0.13,   control_group = \"complement\",   side = \"left\",   multiple_testing_alpha = 0.05,   prop_non_null = 0.1,   baseline_expression_stats,   library_parameters,   grid_size = 20,   power_target = 0.8,   power_precision = 0.01,   min_power = 0.05,   max_power = 0.95,   cost_precision = 0.9,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint = NULL,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_cost_power_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for cost_power_computation — input_check_cost_power_computation","text":"minimizing_variable Character. parameter vary analysis. Options: \"TPM_threshold\" \"minimum_fold_change\". Default: \"TPM_threshold\". fixed_variable List. Fixed values analysis parameters. Can include: minimum_fold_change: Fixed fold change threshold (varying TPM_threshold) TPM_threshold: Fixed TPM threshold (varying minimum_fold_change) cells_per_target: Fixed cells per target (otherwise uses \"varying\") reads_per_cell: Fixed reads per cell (otherwise uses \"varying\") MOI Numeric. Multiplicity infection (default: 10). num_targets Integer. Number targets (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target (default: 4). gRNA_variability Numeric. gRNA variability parameter (default: 0.13). control_group Character. Control group type: \"complement\" \"non_targeting\" (default: \"complement\"). side Character. Test side: \"left\", \"right\", \"\" (default: \"left\"). multiple_testing_alpha Numeric. Multiple testing significance level (default: 0.05). prop_non_null Numeric. Proportion non-null hypotheses (default: 0.1). baseline_expression_stats Data frame. Baseline expression statistics columns: response_id, relative_expression, expression_size. library_parameters List. Library parameters containing UMI_per_cell variation. grid_size Integer. Grid size parameter search (default: 20). power_target Numeric. Target statistical power (default: 0.8). power_precision Numeric. Acceptable precision around power target (default: 0.01). min_power Numeric. Minimum power threshold grid search (default: 0.05). max_power Numeric. Maximum power threshold grid search (default: 0.95). cost_precision Numeric. Cost utilization factor (default: 0.9). Filters designs total cost \\le cost_precision × cost_constraint. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). cost_constraint Numeric. Maximum budget constraint dollars (default: NULL). Set NULL disable cost constraints. mapping_efficiency Numeric. Sequencing mapping efficiency (default: 0.72).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"Input checking function find_optimal_cost_design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"","code":"input_check_find_optimal_cost_design(   cost_power_df,   minimizing_variable,   power_target,   power_precision,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_grid_size = 200 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_find_optimal_cost_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for find_optimal_cost_design — input_check_find_optimal_cost_design","text":"cost_power_df Data frame. Output cost_power_computation containing power analysis results cost calculations. Must include columns: overall_power, total_cost, cells_per_target, raw_reads_per_cell, plus specified minimizing variable (except cost optimization). minimizing_variable Character. parameter optimized. Must one : \"TPM_threshold\": TPM expression threshold optimization \"minimum_fold_change\": Minimum fold change threshold optimization \"cost\": Total cost optimization across experimental designs power_target Numeric. Target statistical power level (typically 0.8 80% power). Must 0 1. power_precision Numeric. Acceptable precision around power target. Designs power within power_target ± power_precision considered acceptable. Must 0 1. MOI Numeric. Multiplicity infection parameter experimental design calculations (default: 10). Used compute number captured cells. num_targets Integer. Number target genes experiment (default: 100). Used cost calculations. non_targeting_gRNAs Integer. Number non-targeting gRNAs experiment (default: 10). Used calculate total library size captured cell requirements. gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). Used calculate total gRNAs experimental design parameters. cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_grid_size Integer. Number grid points cost optimization grid (default: 200). Higher values provide finer resolution longer computation time.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for library_computation — input_check_library_computation","title":"Input checking function for library_computation — input_check_library_computation","text":"Input checking function library_computation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for library_computation — input_check_library_computation","text":"","code":"input_check_library_computation(   QC_data = NULL,   downsample_ratio = NULL,   D2_rough = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_library_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for library_computation — input_check_library_computation","text":"QC_data Data frame. QC'd molecular data obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric. ratio downsampling dataset (default: 0.7). Must 0 1. D2_rough Numeric. Rough estimate D2 parameter S-M curve model (default: 0.3). Represents variation parameter saturation curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for compute_power_posthoc — input_check_posthoc","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"Input checking function compute_power_posthoc","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"","code":"input_check_posthoc(   discovery_pairs = NULL,   cells_per_grna = NULL,   baseline_expression_stats = NULL,   control_group = NULL,   fold_change_mean = NULL,   fold_change_sd = NULL,   num_total_cells = NULL,   cutoff = NULL,   n_nonzero_trt_thresh = NULL,   n_nonzero_cntrl_thresh = NULL,   side = NULL,   multiple_testing_method = NULL,   multiple_testing_alpha = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_posthoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for compute_power_posthoc — input_check_posthoc","text":"discovery_pairs data frame specifying element-gene pairs consider, columns grna_target response_id cells_per_grna data frame specifying many cells contain gRNA, columns grna_id, grna_target, num_cells baseline_expression_stats data frame specifying baseline expression statistics gene, columns response_id, expression_mean, expression_size control_group character string specifying control group, either \"complement\" \"nt_cells\" fold_change_mean numeric value use mean effect size element-gene pairs fold_change_sd numeric value use standard deviation effect size element-gene pairs num_total_cells (Required control_group == \"complement\") positive integer specifying total number cells experiment cutoff (Optional) numeric value 0 1 use p-value cutoff n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7 side (Optional) character string specifying side test, either \"left\", \"right\", \"\"; defaults \"\" multiple_testing_method (Optional) character string specifying multiple testing correction method use, either \"BH\" \"bonferroni\"; defaults \"BH\" multiple_testing_alpha (Optional) numeric value 0 1 specifying alpha level multiple testing correction; defaults 0.1","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Input checking function for power_function — input_check_power_function","title":"Input checking function for power_function — input_check_power_function","text":"Input checking function power_function","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input checking function for power_function — input_check_power_function","text":"","code":"input_check_power_function(   recovery_rate = NULL,   num_total_reads = NULL,   mapping_efficiency = NULL,   cells_per_grna = NULL,   baseline_relative_expression_stats = NULL,   fold_change_mean = NULL,   fold_change_sd = NULL,   num_planned_cells = NULL,   control_group = NULL,   UMI_per_cell = NULL,   variation = NULL,   side = NULL,   multiple_testing_method = NULL,   multiple_testing_alpha = NULL,   cutoff = NULL,   discovery_pairs = NULL,   n_nonzero_trt_thresh = NULL,   n_nonzero_cntrl_thresh = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/input_check_power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input checking function for power_function — input_check_power_function","text":"recovery_rate numeric value (0 1) indicating fraction cells survive captured library preparation. num_total_reads numeric value specifying total number reads generated sequencing. used estimate library_size. mapping_efficiency numeric value (0 1) indicating fraction reads successfully map transcriptome. cells_per_grna data frame specifying number cells per gRNA, columns grna_id, grna_target, num_cells. baseline_relative_expression_stats data frame specifying relative expression levels gene, columns response_id relative_expression. fold_change_mean numeric value indicating mean fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). fold_change_sd numeric value indicating standard deviation fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). num_planned_cells numeric value indicating total planned number cells losses library preparation. control_group character string specifying control group, either \"complement\" \"nt_cells\". passed compute_power_posthoc. UMI_per_cell numeric value specifying theoretical saturation level (UMIs) cell. variation numeric value controlling overdispersion UMIs per read modeled. side (Optional) character string specifying side test, either \"left\", \"right\", \"\". Defaults \"\". multiple_testing_method (Optional) character string specifying multiple testing correction method, either \"BH\" \"bonferroni\". Defaults \"BH\". multiple_testing_alpha (Optional) numeric value (0 1) specifying alpha level multiple testing correction. Defaults 0.1. cutoff (Optional) numeric value 0 1 use p-value cutoff. NULL, function determines automatically using specified multiple_testing_method multiple_testing_alpha. discovery_pairs data frame specifying gRNA-gene pairs consider, columns grna_target response_id. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7. n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"function fits nonlinear saturation curve model estimate relationship number mapped reads per cell number observed UMIs per cell. model essential library size estimation single-cell RNA sequencing.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"","code":"library_computation(QC_data, downsample_ratio = 0.7, D2_rough = 0.3)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"QC_data Data frame. QC'd molecular data obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric. ratio downsampling dataset (default: 0.7). Must 0 1. D2_rough Numeric. Rough estimate D2 parameter S-M curve model (default: 0.3). Represents variation parameter saturation curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"fitted S-M curve model object class nlsLM minpack.lm package. model parameters include: total_UMIs Total number UMIs per cell variation Variation parameter characterizing PCR bias saturation","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"function: Downsamples read data create multiple observation points Computes UMI counts different read depths Fits nonlinear saturation curve: UMI = total_UMIs * (1 - exp(-reads/total_UMIs) * (1 + variation * reads^2/(2*total_UMIs^2))) Returns best-fitting model multiple initial parameter values Issues warning relative error fitted model exceeds 7%","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_computation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit saturation-magnitude (S-M) curve between mapped reads and observed UMIs — library_computation","text":"","code":"# Get QC data and compute library parameters cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_data <- obtain_qc_read_umi_table(cellranger_path)  # Compute library size parameters lib_params <- library_computation(   QC_data = qc_data,   downsample_ratio = 0.7,   D2_rough = 0.3 )  # View parameters print(lib_params) #> Nonlinear regression model #>   model: num_UMIs ~ total_UMIs * (1 - exp(-num_reads/total_UMIs) * (1 +     D2 * num_reads^2/(2 * total_UMIs^2))) #>    data: down_sample_df #> total_UMIs         D2  #>     9.3137     0.3569  #>  residual sum-of-squares: 0.003823 #>  #> Number of iterations to convergence: 8  #> Achieved convergence tolerance: 1.49e-08"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"Compute average total UMI per cell UMI variation parameters.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"","code":"library_estimation(QC_data, downsample_ratio = 0.7, D2_rough = 0.3)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"QC_data Data frame. QC'd molecular data obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id. downsample_ratio Numeric. ratio downsampling dataset (default: 0.7). Must 0 1. D2_rough Numeric. Rough estimate D2 parameter S-M curve model (default: 0.3). Represents variation parameter saturation curve.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/library_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the average total UMI per cell and UMI variation parameters. — library_estimation","text":"list elements: UMI_per_cell Total UMI per cell parameter variation Variation parameter characterizing PCR bias","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate gene-level dispersion (theta) — obtain_expression_information","title":"Estimate gene-level dispersion (theta) — obtain_expression_information","text":"Estimate gene-level dispersion (theta)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate gene-level dispersion (theta) — obtain_expression_information","text":"","code":"obtain_expression_information(   response_matrix,   TPM_thres = 0.1,   rough = FALSE,   n_threads = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate gene-level dispersion (theta) — obtain_expression_information","text":"response_matrix CsparseMatrix (genes × cells). TPM_thres Numeric. Filter threshold TPM. Default 1. rough Logical. TRUE, use rough C++ estimator; otherwise use refined/MLE. Default FALSE. n_threads Integer controlling parallelism: NULL – auto-detect (prefer NSLOTS, else local cores) NA   – force use NSLOTS positive integer – user-supplied core count","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate gene-level dispersion (theta) — obtain_expression_information","text":"response_id Gene symbol passing TPM filter relative_expression Proportion total counts expression_size Estimated dispersion \\(\\theta\\)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_expression_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate gene-level dispersion (theta) — obtain_expression_information","text":"","code":"# Get response matrix from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") response_matrix <- obtain_qc_response_data(cellranger_path) #> 'as(<ngTMatrix>, \"dgTMatrix\")' is deprecated. #> Use 'as(., \"dMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\").  # Extract expression information expr_info <- obtain_expression_information(   response_matrix = response_matrix,   TPM_thres = 0.1,   rough = TRUE ) #> Start relative expression calculation @ 2025-10-05 22:40:08.979919 #> Finish relative expression calculation @ 2025-10-05 22:40:08.980529 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (12 thread(s)) @ 2025-10-05 22:40:08.980719 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_refined_row result = 0.220983 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_refined_row result = 251.069 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_refined_row result = 242.683 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_refined_row result = 242.683 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_refined_row result = 242.683 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-05 22:40:08.981767  # Examine results head(expr_info) #>                     response_id relative_expression expression_size #> ENSG00000243485 ENSG00000243485          0.09090909       0.2209832 #> ENSG00000238009 ENSG00000238009          0.36363636     251.0688935 #> ENSG00000239945 ENSG00000239945          0.18181818     242.6834302 #> ENSG00000241860 ENSG00000241860          0.18181818     242.6834302 #> ENSG00000286448 ENSG00000286448          0.18181818     242.6834302 dim(expr_info) #> [1] 5 3"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function determines optimal experimental design parameters (cells per target reads per cell) given total cost constraint. handles two optimization scenarios: reads_per_cell NULL: Calculates maximum reads per cell achievable given fixed cells_per_target within cost constraint cells_per_target NULL: Calculates maximum cells per target achievable given fixed reads_per_cell within cost constraint","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"","code":"obtain_fixed_variable_constraining_cost(   cost_per_captured_cell = 0.086,   cost_per_million_reads = 0.374,   cost_constraint,   MOI = 10,   num_targets = 100,   non_targeting_gRNAs = 10,   gRNAs_per_target = 4,   reads_per_cell,   cells_per_target,   mapping_efficiency = 0.72 )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"cost_per_captured_cell Numeric. Cost per captured cell dollars (default: 0.086). Used library preparation cost calculations. cost_per_million_reads Numeric. Cost per million sequencing reads dollars (default: 0.374). Used sequencing cost calculations. cost_constraint Numeric. Total budget constraint dollars. Must positive. MOI Numeric. Multiplicity infection parameter (default: 10). Used compute number captured cells cells per target. num_targets Integer. Number target genes experiment (default: 100). non_targeting_gRNAs Integer. Number non-targeting gRNAs (default: 10). gRNAs_per_target Integer. Number gRNAs per target gene (default: 4). reads_per_cell Numeric NULL. provided, parameter fixed cells_per_target optimized. NULL, parameter optimized. cells_per_target Numeric NULL. provided, parameter fixed reads_per_cell optimized. NULL, parameter optimized. mapping_efficiency Numeric. Mapping efficiency sequencing platform (default: 0.72). Used convert raw reads mapped reads.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"list containing: cells_per_target Numeric. Optimized provided cells per target value reads_per_cell Numeric. Optimized provided reads per cell value","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function uses cost model following components: Cost Model: Total experimental cost calculation: Total Cost = Library Cost + Sequencing Cost Component Formulas: Library Cost = cost_per_captured_cell * num_captured_cells Sequencing Cost = cost_per_million_reads * (total_reads / 1,000,000) num_captured_cells = ((gRNAs_per_target * num_targets + non_targeting_gRNAs) * cells_per_target) / (gRNAs_per_target * MOI) total_reads = (num_captured_cells * reads_per_cell) / mapping_efficiency Optimization Logic: Scenario 1 (reads_per_cell = NULL): Given fixed cells_per_target, maximizes reads_per_cell within cost constraint allocating remaining budget cell preparation costs sequencing. Scenario 2 (cells_per_target = NULL): Given fixed reads_per_cell, maximizes cells_per_target (equivalently, captured cells) within cost constraint using total cost per captured cell (including preparation sequencing costs).","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_fixed_variable_constraining_cost.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Calculate optimal experimental design parameters under cost constraints — obtain_fixed_variable_constraining_cost","text":"function validates cost constraint sufficient meaningful experiments: Ensures least 10 reads per cell can achieved Ensures least 10 captured cells can achieved Provides clear error messages constraints tight","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","title":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","text":"Mapping efficiency Cell Ranger run","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","text":"","code":"obtain_mapping_efficiency(QC_data, path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","text":"QC_data Output obtain_qc_read_umi_table(). path_to_cellranger_output Folder containing outs/metrics_summary.csv.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","text":"Numeric proportion: mapped / total reads.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_mapping_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mapping efficiency of a Cell Ranger run — obtain_mapping_efficiency","text":"","code":"# Get mapping efficiency from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_data <- obtain_qc_read_umi_table(cellranger_path) mapping_eff <- obtain_mapping_efficiency(qc_data, cellranger_path)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","title":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","text":"Extract QC-filtered molecule information Cell Ranger HDF5 files","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","text":"","code":"obtain_qc_read_umi_table(path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","text":"path_to_cellranger_output Character. Folder containing outs/molecule_info.h5 outs/filtered_feature_bc_matrix.h5.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","text":"Data frame columns num_reads, UMI_id, cell_id, response_id.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_read_umi_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract QC-filtered molecule information from Cell Ranger HDF5 files — obtain_qc_read_umi_table","text":"","code":"# Extract read/UMI information from Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_table <- obtain_qc_read_umi_table(cellranger_path) # Examine the data head(qc_table) #>   num_reads UMI_id            cell_id     response_id #> 1         2 139105 AAACCTGGTATATGAG-1 ENSG00000241860 #> 2         1 723247 AAACGGGTCAGCTCGG-1 ENSG00000238009 #> 3         1 998389 AAAGTAGCATCCCACT-1 ENSG00000239945 #> 4         1 622094 AAAGTAGTCCAAATGC-1 ENSG00000286448 #> 5         1 584568 AGCAGCCGTCCAAGTT-1 ENSG00000243485 #> 6         1 956290 AGCGGTCCATTCCTGC-1 ENSG00000238009 dim(qc_table) #> [1] 11  4 summary(qc_table) #>    num_reads         UMI_id          cell_id          response_id        #>  Min.   :1.000   Min.   : 139105   Length:11          Length:11          #>  1st Qu.:1.000   1st Qu.: 603331   Class :character   Class :character   #>  Median :1.000   Median : 723247   Mode  :character   Mode  :character   #>  Mean   :1.091   Mean   : 716680                                         #>  3rd Qu.:1.000   3rd Qu.: 932801                                         #>  Max.   :2.000   Max.   :1034530"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","title":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","text":"Reads sparse gene--cell matrix (matrix.mtx.gz) together feature annotations Cell Ranger run folder. required files located sub-directory outs/filtered_feature_bc_matrix/.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","text":"","code":"obtain_qc_response_data(path_to_cellranger_output)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","text":"path_to_cellranger_output Character. Path SRR-named folder (e.g. \"SRR12345678\"). folder must contain: outs/filtered_feature_bc_matrix/matrix.mtx.gz outs/filtered_feature_bc_matrix/features.tsv.gz outs/filtered_feature_bc_matrix/barcodes.tsv.gz","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","text":"dgCMatrix (genes × cells) cleaned, unique row names column names.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/obtain_qc_response_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and QC gene expression matrix from Cell Ranger output — obtain_qc_response_data","text":"","code":"# Load example Cell Ranger output cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") response_matrix <- obtain_qc_response_data(cellranger_path)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute approximate power of a CRISPR screen — power_function","title":"Compute approximate power of a CRISPR screen — power_function","text":"function computes approximate power detecting effect (gene perturbation) CRISPR screen given various experimental sequencing parameters. Internally, calculates average library size using provided parameters estimates baseline expression levels. function calls compute_power_posthoc obtain power estimates expected number discoveries.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute approximate power of a CRISPR screen — power_function","text":"","code":"power_function(   recovery_rate,   num_total_reads,   mapping_efficiency,   cells_per_grna,   baseline_relative_expression_stats,   fold_change_mean,   fold_change_sd,   num_planned_cells,   control_group,   UMI_per_cell,   variation,   side = \"both\",   multiple_testing_method = \"BH\",   multiple_testing_alpha = 0.1,   cutoff = NULL,   discovery_pairs,   n_nonzero_trt_thresh = 7L,   n_nonzero_cntrl_thresh = 7L )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute approximate power of a CRISPR screen — power_function","text":"recovery_rate numeric value (0 1) indicating fraction cells survive captured library preparation. num_total_reads numeric value specifying total number reads generated sequencing. used estimate library_size. mapping_efficiency numeric value (0 1) indicating fraction reads successfully map transcriptome. cells_per_grna data frame specifying number cells per gRNA, columns grna_id, grna_target, num_cells. baseline_relative_expression_stats data frame specifying relative expression levels gene, columns response_id relative_expression. fold_change_mean numeric value indicating mean fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). fold_change_sd numeric value indicating standard deviation fold change effect size gRNA-gene pairs (data frame grna_target response_id columns per-pair values). num_planned_cells numeric value indicating total planned number cells losses library preparation. control_group character string specifying control group, either \"complement\" \"nt_cells\". passed compute_power_posthoc. UMI_per_cell numeric value specifying theoretical saturation level (UMIs) cell. variation numeric value controlling overdispersion UMIs per read modeled. side (Optional) character string specifying side test, either \"left\", \"right\", \"\". Defaults \"\". multiple_testing_method (Optional) character string specifying multiple testing correction method, either \"BH\" \"bonferroni\". Defaults \"BH\". multiple_testing_alpha (Optional) numeric value (0 1) specifying alpha level multiple testing correction. Defaults 0.1. cutoff (Optional) numeric value 0 1 use p-value cutoff. NULL, function determines automatically using specified multiple_testing_method multiple_testing_alpha. discovery_pairs data frame specifying gRNA-gene pairs consider, columns grna_target response_id. n_nonzero_trt_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7. n_nonzero_cntrl_thresh (Optional) integer specifying sceptre QC parameter name; defaults 7.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/power_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute approximate power of a CRISPR screen — power_function","text":"list two elements: individual_power: data frame columns grna_target, response_id, power, giving power pair. expected_num_discoveries: numeric value indicating expected total number discoveries.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"process sequencing data extract gene-level expression library statistics required PerturbPlan simulation framework. Outputs compatible built-pilot examples.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"","code":"reference_data_preprocessing(   response_matrix = NULL,   read_umi_table,   mapping_efficiency = NULL,   n_threads = NULL,   TPM_thres = 0.1,   downsample_ratio = 0.7,   D2_rough = 0.3,   h5_only = FALSE,   TAP = FALSE,   primer_threshold = 0.2,   TAP_target_list = NULL,   TAP_origin_reference = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"response_matrix Matrix NULL. Gene--cell matrix normalized expression responses, typically reference_data_preprocessing_10x. h5_only = TRUE, can NULL. read_umi_table Data frame. QC information molecule_info.h5 filtered_feature_bc_matrix.h5, obtained via obtain_qc_read_umi_table. mapping_efficiency Numeric. Estimated mapping efficiency obtain_mapping_efficiency. n_threads Integer. Number threads used parallel processing. Default: NULL (single-threaded). TPM_thres Numeric. Threshold filtering low-expression genes preprocessing. downsample_ratio Numeric. Proportion downsampling used library size estimation. Default: 0.7. D2_rough Numeric. Rough prior value library variation parameter. Default: 0.3. h5_only Logical. TRUE, skips baseline expression estimation step (processes read_umi_table). Default: FALSE. TAP Logical. TRUE, applies Targeted Analysis Pipeline (TAP). primer_threshold Numeric. Threshold primer efficiency banding TAP. Default: 0.2. TAP_target_list Character vector. List target genes TAP filtering. NULL, filtering applied. TAP_origin_reference List. Reference data containing baseline expression statistics TAP.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"list containing: baseline_expression_stats Data frame gene-level expression statistics including response_id, relative_expression, expression_size columns. library_parameters List : UMI_per_cell: Estimated UMI/cell count. variation: Estimated variation parameter PCR bias. mapping_efficiency Numeric value representing mapping efficiency.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"function executes core steps pilot data setup PerturbPlan: Computes gene expression means variances response matrix. Extracts library-level statistics HDF5 molecule info. Outputs simplified list structure power analysis.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_preprocessing","text":"","code":"# First get raw data using reference_data_preprocessing_10x extdata_path <- system.file(\"extdata\", package = \"perturbplan\") # Get raw data from 10x output raw_data <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",   h5_rough = TRUE ) # Process into final pilot data format pilot_data <- reference_data_preprocessing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   TPM_thres = 0.1,   h5_only = FALSE ) #> Starting pilot data preprocessing @ 2025-09-29 01:41:17.255476 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-09-29 01:41:17.259449 #> Finish relative expression calculation @ 2025-09-29 01:41:17.259605 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (12 thread(s)) @ 2025-09-29 01:41:17.25977 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #>  - rel_expr size = 5 #>  - library_size size = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_mle_row result = 401.014 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_mle_row result = 484.176 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_mle_row result = 468.498 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_mle_row result = 468.498 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_mle_row result = 468.498 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-09-29 01:41:17.260165 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-09-29 01:41:17.262794 #> Processed 5 genes #> Library parameters: UMI_per_cell = 10, variation = 0 #> Mapping efficiency = 1"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"function aggregates gene expression matrices h5 molecule-level data multiple SRR-level Cell Ranger output directories. aligns matrices common set genes, performs basic consistency checks, optionally restricts user-defined subset run-level directories.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"","code":"reference_data_preprocessing_10x(   path_to_top_level_output,   path_to_run_level_output = NULL,   h5_rough = TRUE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"path_to_top_level_output Character. Path top-level directory containing Cell Ranger run-level subdirectories. path_to_run_level_output Optional character vector. subset run-level directory names (full paths). match basename folders inside path_to_top_level_output. Unmatched entries trigger warning. h5_rough Logical. TRUE (default), h5 data extracted first SRR folder. FALSE, data SRRs combined.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"list two elements: response_matrix matrix gene expression values (common genes ), combined across SRR directories. read_umi_table data frame molecule-level QC data one SRRs, including SRR label. mapping_efficiency numeric value representing mapping efficiency","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"function performs following steps: Lists SRR directories given top-level folder. Optionally filters subset run-level names. Reads response matrices retains shared genes across SRRs. Optionally reads h5 QC data one SRRs. Library Saturation (S-M) Model: function extracts QC data subsequently used fit saturation-magnitude (S-M) curve model relates mapped reads per cell observed UMIs per cell. model essential library size estimation single-cell RNA sequencing power analysis. S-M curve model follows nonlinear saturation formula: $$UMI = total\\_UMIs \\times \\left(1 - \\exp\\left(-\\frac{reads}{total\\_UMIs}\\right) \\times \\left(1 + variation \\times \\frac{reads^2}{2 \\times total\\_UMIs^2}\\right)\\right)$$ : total_UMIs: Maximum UMI per cell parameter (saturation level) variation: Variation parameter characterizing PCR amplification bias reads: Number mapped reads per cell UMI: Number observed UMIs per cell model accounts UMI saturation effects high read depths PCR amplification variability, enabling accurate power calculations across different sequencing scenarios.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_preprocessing_10x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Expression and QC Data from Multiple SRR-Level Cell Ranger Outputs — reference_data_preprocessing_10x","text":"","code":"# Process tiny example dataset extdata_path <- system.file(\"extdata\", package = \"perturbplan\") # Note: This is a minimal example dataset for testing result <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",   h5_rough = TRUE )  # Inspect structure str(result) #> List of 3 #>  $ response_matrix   :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:11] 0 1 2 3 4 1 2 1 4 1 ... #>   .. ..@ p       : int [1:9] 0 1 2 3 4 5 7 9 11 #>   .. ..@ Dim     : int [1:2] 5 8 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : chr [1:5] \"ENSG00000243485\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000241860\" ... #>   .. .. ..$ : chr [1:8] \"AGCAGCCGTCCAAGTT-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAACCTGGTATATGAG-1\" ... #>   .. ..@ x       : num [1:11] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ read_umi_table    :'data.frame':\t11 obs. of  5 variables: #>   ..$ num_reads  : int [1:11] 2 1 1 1 1 1 1 1 1 1 ... #>   ..$ UMI_id     : num [1:11] 139105 723247 998389 622094 584568 ... #>   ..$ cell_id    : chr [1:11] \"AAACCTGGTATATGAG-1\" \"AAACGGGTCAGCTCGG-1\" \"AAAGTAGCATCCCACT-1\" \"AAAGTAGTCCAAATGC-1\" ... #>   ..$ response_id: chr [1:11] \"ENSG00000241860\" \"ENSG00000238009\" \"ENSG00000239945\" \"ENSG00000286448\" ... #>   ..$ srr_idx    : chr [1:11] \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" \"cellranger_tiny\" ... #>  $ mapping_efficiency: num 1  # Access components result$response_matrix #> 5 x 8 sparse Matrix of class \"dgCMatrix\" #>                 AGCAGCCGTCCAAGTT-1 AAACGGGTCAGCTCGG-1 AAAGTAGCATCCCACT-1 #> ENSG00000243485                  1                  .                  . #> ENSG00000238009                  .                  1                  . #> ENSG00000239945                  .                  .                  1 #> ENSG00000241860                  .                  .                  . #> ENSG00000286448                  .                  .                  . #>                 AAACCTGGTATATGAG-1 AAAGTAGTCCAAATGC-1 AGCGGTCCATTCCTGC-1 #> ENSG00000243485                  .                  .                  . #> ENSG00000238009                  .                  .                  1 #> ENSG00000239945                  .                  .                  1 #> ENSG00000241860                  1                  .                  . #> ENSG00000286448                  .                  1                  . #>                 GAAACTCTCTAACTCT-1 GACACGCCAAGACGTG-1 #> ENSG00000243485                  .                  . #> ENSG00000238009                  1                  1 #> ENSG00000239945                  .                  . #> ENSG00000241860                  .                  1 #> ENSG00000286448                  1                  ."},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":null,"dir":"Reference","previous_headings":"","what":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"process sequencing data extract gene-level expression library statistics required PerturbPlan simulation framework. Outputs compatible built-pilot examples.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"","code":"reference_data_processing(   response_matrix = NULL,   read_umi_table,   mapping_efficiency = NULL,   n_threads = NULL,   TPM_thres = 0.1,   downsample_ratio = 0.7,   D2_rough = 0.3,   h5_only = FALSE )"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"response_matrix Matrix NULL. Gene--cell matrix normalized expression responses, typically reference_data_preprocessing_10x. h5_only = TRUE, can NULL. read_umi_table Data frame. QC information molecule_info.h5 filtered_feature_bc_matrix.h5, obtained via obtain_qc_read_umi_table. mapping_efficiency Numeric. Estimated mapping efficiency obtain_mapping_efficiency. n_threads Integer. Number threads used parallel processing. Default: NULL (single-threaded). TPM_thres Numeric. Threshold filtering low-expression genes preprocessing. downsample_ratio Numeric. Proportion downsampling used library size estimation. Default: 0.7. D2_rough Numeric. Rough prior value library variation parameter. Default: 0.3. h5_only Logical. TRUE, skips baseline expression estimation step (processes read_umi_table). Default: FALSE.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"list containing: baseline_expression_stats Data frame gene-level expression statistics including response_id, relative_expression, expression_size columns. library_parameters List : UMI_per_cell: Estimated UMI/cell count. variation: Estimated variation parameter PCR bias. mapping_efficiency Numeric value representing mapping efficiency.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"function executes core steps pilot data setup PerturbPlan: Computes gene expression means variances response matrix. Extracts library-level statistics HDF5 molecule info. Outputs simplified list structure power analysis.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_data_processing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pilot Dataset Preprocessing for Power Analysis — reference_data_processing","text":"","code":"# set seed for reproducibility set.seed(123) # First get raw data using reference_data_preprocessing_10x extdata_path <- system.file(\"extdata\", package = \"perturbplan\") # Get raw data from 10x output raw_data <- reference_data_preprocessing_10x(   path_to_top_level_output = extdata_path,   path_to_run_level_output = \"cellranger_tiny\",   h5_rough = TRUE ) # Process into final pilot data format pilot_data <- reference_data_processing(   response_matrix = raw_data$response_matrix,   read_umi_table = raw_data$read_umi_table,   mapping_efficiency = raw_data$mapping_efficiency,   TPM_thres = 0.1,   h5_only = FALSE ) #> Starting pilot data preprocessing @ 2025-10-05 22:40:09.737449 #> Step 1: Computing gene expression information... #> Start relative expression calculation @ 2025-10-05 22:40:09.741375 #> Finish relative expression calculation @ 2025-10-05 22:40:09.741534 #> Number of genes passing TPM threshold: 5 #> Start dispersion estimation (12 thread(s)) @ 2025-10-05 22:40:09.74171 #> [theta_batch_cpp] Starting computation #>  - G (genes) = 5 #>  - C (cells) = 8 #> [gene 0] rel_expr = 0.0909091 #> [gene 0] t_0 = 0.0747664 #> [gene 0] theta_mle_row result = 401.014 #> [gene 1] rel_expr = 0.363636 #> [gene 1] t_0 = 1.06889 #> [gene 1] theta_mle_row result = 484.176 #> [gene 2] rel_expr = 0.181818 #> [gene 2] t_0 = 0.272921 #> [gene 2] theta_mle_row result = 468.498 #> [gene 3] rel_expr = 0.181818 #> [gene 3] t_0 = 0.272921 #> [gene 3] theta_mle_row result = 468.498 #> [gene 4] rel_expr = 0.181818 #> [gene 4] t_0 = 0.272921 #> [gene 4] theta_mle_row result = 468.498 #> [theta_batch_cpp] Done. #> Finish dispersion estimation @ 2025-10-05 22:40:09.742343 #> Step 2: Estimating library parameters... #> Completed pilot data preprocessing @ 2025-10-05 22:40:09.744847 #> Processed 5 genes #> Library parameters: UMI_per_cell = 10, variation = 0 #> Mapping efficiency = 1"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference expression datasets metadata — reference_expression_datasets","title":"Reference expression datasets metadata — reference_expression_datasets","text":"Metadata table describing available reference expression datasets perturbplan package. table maps biological systems corresponding data processing configurations functions.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference expression datasets metadata — reference_expression_datasets","text":"","code":"reference_expression_datasets"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reference expression datasets metadata — reference_expression_datasets","text":"data frame 6 rows 4 columns: cell_type Character. biological system name platform Character. experimental platform used (\"10x\" 10x Chromium) config_name Character. Configuration variable name data source paths process_function Character. Name processing function dataset","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reference expression datasets metadata — reference_expression_datasets","text":"Internal metadata perturbplan package data management.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/reference_expression_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference expression datasets metadata — reference_expression_datasets","text":"metadata table used internally get_pilot_data_from_package map biological system names corresponding data objects processing functions.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the rejection probability of unadjusted score test. — rejection_computation","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"Compute rejection probability unadjusted score test.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"","code":"rejection_computation(mean_list, sd_list, side, cutoff)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"mean_list Numeric vector. Mean values test statistics hypothesis. sd_list Numeric vector. Standard deviation values test statistics hypothesis. side Character. Test sidedness: \"left\", \"right\", \"\". cutoff (Optional) numeric value 0 1 use p-value cutoff","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/rejection_computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the rejection probability of unadjusted score test. — rejection_computation","text":"rejection probablity.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the score test statistic. — score_test","title":"Compute the score test statistic. — score_test","text":"Compute score test statistic.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the score test statistic. — score_test","text":"","code":"score_test(X, Y, expression_size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the score test statistic. — score_test","text":"X Treatment/control indicator. Y Outcome two groups. expression_size Size parameter.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/score_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the score test statistic. — score_test","text":"Score test statistic.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain summary statistics of QC'd molecular data — summary_h5_data","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"function computes basic summary statistics quality-controlled molecular data, providing key metrics library size estimation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"","code":"summary_h5_data(QC_data)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"QC_data Data frame. QC'd data obtain_qc_read_umi_table containing columns num_reads, UMI_id, cell_id, response_id.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"named numeric vector elements: num_cells Total number unique cells avg_reads Average number reads per cell","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"function calculates: Total number unique cell barcodes Total reads summed across molecules Average reads per cell (total reads divided number cells)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/summary_h5_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain summary statistics of QC'd molecular data — summary_h5_data","text":"","code":"# Get QC data and summarize cellranger_path <- system.file(\"extdata/cellranger_tiny\", package = \"perturbplan\") qc_data <- obtain_qc_read_umi_table(cellranger_path) summary_stats <- summary_h5_data(qc_data)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"function validates structure combined pilot data RDS file contains baseline expression data library parameters single list. Also, checks whether value parameters makes sense.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"","code":"validate_combined_pilot_data(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"data list object loaded RDS file, expected contain: baseline_expression: list baseline expression data dispersion curve library_parameters: list UMI_per_cell variation parameters file_path Character. Path description uploaded file error messages.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"list elements: valid Logical indicating validation passed data validated data (valid) NULL errors Character vector error messages warnings Character vector warning messages summary HTML-formatted summary text display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_combined_pilot_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate combined pilot data RDS file structure — validate_combined_pilot_data","text":"function validates overall structure combined pilot data, delegates validation individual components validate_custom_baseline_rds validate_custom_library_rds. Expected structure:","code":"list(   baseline_expression = list(     baseline_expression = data.frame(...),     expression_dispersion_curve = function(v) {...}   ),   library_parameters = list(     UMI_per_cell = numeric_value,     variation = numeric_value   ) )"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom baseline expression data — validate_custom_baseline","title":"Validate custom baseline expression data — validate_custom_baseline","text":"function validates custom baseline expression data required structure data types use power analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom baseline expression data — validate_custom_baseline","text":"","code":"validate_custom_baseline(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom baseline expression data — validate_custom_baseline","text":"data Data frame containing custom baseline expression data file_path Character. Optional file path error messages (default: \"uploaded file\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom baseline expression data — validate_custom_baseline","text":"List validation results: valid Logical. TRUE data passes validation checks data Data frame. Cleaned validated data (valid=TRUE) errors Character vector. Error messages (valid=FALSE) warnings Character vector. Warning messages summary Character. Summary statistics display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom baseline expression data — validate_custom_baseline","text":"Required columns: response_id: Character vector gene IDs (preferably Ensembl IDs) relative_expression: Numeric vector expression values (TPM/1e6 scale) expression_size: Numeric vector dispersion parameters (positive values)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"function validates custom baseline expression RDS data required structure baseline expression data dispersion curve function.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"","code":"validate_custom_baseline_rds(data, file_path = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"data List object RDS file containing baseline expression data file_path Character. Optional file path error messages (default: \"uploaded file\")","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"List validation results: valid Logical. TRUE data passes validation checks data List. Validated data structure (valid=TRUE) errors Character vector. Error messages (valid=FALSE) warnings Character vector. Warning messages summary Character. Summary statistics display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_baseline_rds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom baseline expression RDS data — validate_custom_baseline_rds","text":"Required structure: List two elements: 'baseline_expression' 'expression_dispersion_curve' baseline_expression: Data frame columns 'response_id', 'relative_expression', 'expression_size' expression_dispersion_curve: Function takes numeric vector returns dispersion values","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate custom library RDS file structure and content — validate_custom_library_rds","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"function validates uploaded RDS file contains valid library parameters correct structure value ranges power analysis.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"","code":"validate_custom_library_rds(data, filename = \"uploaded file\")"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"data loaded RDS data validate filename Character. original filename error reporting (optional)","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"list validation results: valid Logical. TRUE validation passed data validated data valid, NULL otherwise errors Character vector error messages warnings Character vector warning messages summary Character. HTML summary display","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/validate_custom_library_rds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate custom library RDS file structure and content — validate_custom_library_rds","text":"Expected RDS structure:  list(   UMI_per_cell = numeric_value,  # Positive number   variation = numeric_value      # Positive number 0 1 )","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of NB distribution — var_nb","title":"Variance of NB distribution — var_nb","text":"Variance NB distribution","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of NB distribution — var_nb","text":"","code":"var_nb(mean, size)"},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of NB distribution — var_nb","text":"mean mean gene expression. size size parameter.","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/reference/var_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of NB distribution — var_nb","text":"variance NB distribution.","code":""},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"cost-optimization-functions-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Cost Optimization Functions","title":"perturbplan 0.1.0","text":"cost_power_computation(): Comprehensive power analysis cost minimization across multiple experimental parameters find_optimal_cost_design(): Binary search optimization find experimental designs meeting power targets obtain_fixed_variable_constraining_cost(): Helper function cost-constrained experimental design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"enhanced-parameter-support-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Enhanced Parameter Support","title":"perturbplan 0.1.0","text":"\"TPM_threshold\" - Expression threshold optimization \"minimum_fold_change\" - Effect size optimization \"cells_per_target\" - Cell count optimization (cost_power_computation ) \"reads_per_cell\" - Sequencing depth optimization (cost_power_computation ) \"cost\" - Total cost optimization Differentiated validation cost_power_computation find_optimal_cost_design","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"documentation-improvements-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Documentation Improvements","title":"perturbplan 0.1.0","text":"Added comprehensive @examples sections major functions Enhanced function documentation detailed parameter descriptions Added @keywords internal annotations helper functions","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"critical-fixes-0-1-0","dir":"Changelog","previous_headings":"Bug Fixes","what":"Critical Fixes","title":"perturbplan 0.1.0","text":"Fixed minimum_fold_change < 0.6 bug: Added safety check fallback mechanism cell range identification fails due small effect sizes Parameter naming standardization: Changed tmp_threshold variables TPM_threshold throughout codebase prevent typos","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"validation-improvements-0-1-0","dir":"Changelog","previous_headings":"Bug Fixes","what":"Validation Improvements","title":"perturbplan 0.1.0","text":"Enhanced input validation cost optimization functions Added NSE-safe dplyr operations using .data$ notation Improved error messages parameter checking","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"performance-improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"Performance Improvements","title":"perturbplan 0.1.0","text":"Optimized switch statement logic new minimizing variables Efficient handling cost calculations across experimental parameter grids Enhanced C++ integration computationally intensive operations","code":""},{"path":"https://katsevich-lab.github.io/perturbplan/news/index.html","id":"package-structure-0-1-0","dir":"Changelog","previous_headings":"","what":"Package Structure","title":"perturbplan 0.1.0","text":"Updated .Rbuildignore .gitignore pkgdown support Comprehensive test coverage new cost optimization features Maintained backward compatibility existing power analysis functions Breaking Changes: None - new features additive maintain full backward compatibility. Dependencies: new dependencies added core functionality.","code":""}]
