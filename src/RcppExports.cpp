// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rejection_computation_cpp
NumericVector rejection_computation_cpp(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff);
RcppExport SEXP _perturbplan_rejection_computation_cpp(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(rejection_computation_cpp(mean_list, sd_list, side, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// compute_FDP_posthoc
double compute_FDP_posthoc(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff, const NumericVector& QC_prob);
RcppExport SEXP _perturbplan_compute_FDP_posthoc(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP, SEXP QC_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type QC_prob(QC_probSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_FDP_posthoc(mean_list, sd_list, side, cutoff, QC_prob));
    return rcpp_result_gen;
END_RCPP
}
// compute_BH_posthoc
double compute_BH_posthoc(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double multiple_testing_alpha, const NumericVector& QC_prob);
RcppExport SEXP _perturbplan_compute_BH_posthoc(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP multiple_testing_alphaSEXP, SEXP QC_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type QC_prob(QC_probSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_BH_posthoc(mean_list, sd_list, side, multiple_testing_alpha, QC_prob));
    return rcpp_result_gen;
END_RCPP
}
// compute_FDP_plan
double compute_FDP_plan(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff, double prop_non_null);
RcppExport SEXP _perturbplan_compute_FDP_plan(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP, SEXP prop_non_nullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_FDP_plan(mean_list, sd_list, side, cutoff, prop_non_null));
    return rcpp_result_gen;
END_RCPP
}
// compute_BH_plan
double compute_BH_plan(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double multiple_testing_alpha, double prop_non_null);
RcppExport SEXP _perturbplan_compute_BH_plan(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP multiple_testing_alphaSEXP, SEXP prop_non_nullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_BH_plan(mean_list, sd_list, side, multiple_testing_alpha, prop_non_null));
    return rcpp_result_gen;
END_RCPP
}
// compute_QC_fixed_es_cpp
double compute_QC_fixed_es_cpp(NumericVector fold_change, NumericVector expression_mean, NumericVector expression_size, NumericVector num_cntrl_cells, NumericVector num_cells, int n_nonzero_trt_thresh, int n_nonzero_cntrl_thresh);
RcppExport SEXP _perturbplan_compute_QC_fixed_es_cpp(SEXP fold_changeSEXP, SEXP expression_meanSEXP, SEXP expression_sizeSEXP, SEXP num_cntrl_cellsSEXP, SEXP num_cellsSEXP, SEXP n_nonzero_trt_threshSEXP, SEXP n_nonzero_cntrl_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fold_change(fold_changeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_mean(expression_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_size(expression_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cells(num_cellsSEXP);
    Rcpp::traits::input_parameter< int >::type n_nonzero_trt_thresh(n_nonzero_trt_threshSEXP);
    Rcpp::traits::input_parameter< int >::type n_nonzero_cntrl_thresh(n_nonzero_cntrl_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_QC_fixed_es_cpp(fold_change, expression_mean, expression_size, num_cntrl_cells, num_cells, n_nonzero_trt_thresh, n_nonzero_cntrl_thresh));
    return rcpp_result_gen;
END_RCPP
}
// compute_distribution_teststat_fixed_es_cpp
List compute_distribution_teststat_fixed_es_cpp(NumericVector fold_change, NumericVector expression_mean, NumericVector expression_size, NumericVector num_trt_cells, NumericVector num_cntrl_cells, NumericVector num_cells);
RcppExport SEXP _perturbplan_compute_distribution_teststat_fixed_es_cpp(SEXP fold_changeSEXP, SEXP expression_meanSEXP, SEXP expression_sizeSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP, SEXP num_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fold_change(fold_changeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_mean(expression_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_size(expression_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cells(num_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_distribution_teststat_fixed_es_cpp(fold_change, expression_mean, expression_size, num_trt_cells, num_cntrl_cells, num_cells));
    return rcpp_result_gen;
END_RCPP
}
// compute_distribution_teststat_random_es_cpp
List compute_distribution_teststat_random_es_cpp(double num_trt_cell, double num_cntrl_cell, double expression_mean, double expression_size, double avg_fold_change, double avg_fold_change_sq);
RcppExport SEXP _perturbplan_compute_distribution_teststat_random_es_cpp(SEXP num_trt_cellSEXP, SEXP num_cntrl_cellSEXP, SEXP expression_meanSEXP, SEXP expression_sizeSEXP, SEXP avg_fold_changeSEXP, SEXP avg_fold_change_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type num_trt_cell(num_trt_cellSEXP);
    Rcpp::traits::input_parameter< double >::type num_cntrl_cell(num_cntrl_cellSEXP);
    Rcpp::traits::input_parameter< double >::type expression_mean(expression_meanSEXP);
    Rcpp::traits::input_parameter< double >::type expression_size(expression_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type avg_fold_change(avg_fold_changeSEXP);
    Rcpp::traits::input_parameter< double >::type avg_fold_change_sq(avg_fold_change_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_distribution_teststat_random_es_cpp(num_trt_cell, num_cntrl_cell, expression_mean, expression_size, avg_fold_change, avg_fold_change_sq));
    return rcpp_result_gen;
END_RCPP
}
// identify_cell_range_cpp
List identify_cell_range_cpp(double min_reads_per_cell, double max_reads_per_cell, DataFrame fc_expression_df, double UMI_per_cell, double variation, double MOI, int num_targets, int gRNAs_per_target, int non_targeting_gRNAs, std::string control_group, double multiple_testing_alpha, std::string side, double prop_non_null, double min_power_threshold, double max_power_threshold, double cell_lower_bound, double cell_upper_bound);
RcppExport SEXP _perturbplan_identify_cell_range_cpp(SEXP min_reads_per_cellSEXP, SEXP max_reads_per_cellSEXP, SEXP fc_expression_dfSEXP, SEXP UMI_per_cellSEXP, SEXP variationSEXP, SEXP MOISEXP, SEXP num_targetsSEXP, SEXP gRNAs_per_targetSEXP, SEXP non_targeting_gRNAsSEXP, SEXP control_groupSEXP, SEXP multiple_testing_alphaSEXP, SEXP sideSEXP, SEXP prop_non_nullSEXP, SEXP min_power_thresholdSEXP, SEXP max_power_thresholdSEXP, SEXP cell_lower_boundSEXP, SEXP cell_upper_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min_reads_per_cell(min_reads_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type max_reads_per_cell(max_reads_per_cellSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    Rcpp::traits::input_parameter< double >::type MOI(MOISEXP);
    Rcpp::traits::input_parameter< int >::type num_targets(num_targetsSEXP);
    Rcpp::traits::input_parameter< int >::type gRNAs_per_target(gRNAs_per_targetSEXP);
    Rcpp::traits::input_parameter< int >::type non_targeting_gRNAs(non_targeting_gRNAsSEXP);
    Rcpp::traits::input_parameter< std::string >::type control_group(control_groupSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    Rcpp::traits::input_parameter< double >::type min_power_threshold(min_power_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type max_power_threshold(max_power_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type cell_lower_bound(cell_lower_boundSEXP);
    Rcpp::traits::input_parameter< double >::type cell_upper_bound(cell_upper_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_cell_range_cpp(min_reads_per_cell, max_reads_per_cell, fc_expression_df, UMI_per_cell, variation, MOI, num_targets, gRNAs_per_target, non_targeting_gRNAs, control_group, multiple_testing_alpha, side, prop_non_null, min_power_threshold, max_power_threshold, cell_lower_bound, cell_upper_bound));
    return rcpp_result_gen;
END_RCPP
}
// fit_read_UMI_curve_cpp
NumericVector fit_read_UMI_curve_cpp(NumericVector reads_per_cell, double UMI_per_cell, double variation);
RcppExport SEXP _perturbplan_fit_read_UMI_curve_cpp(SEXP reads_per_cellSEXP, SEXP UMI_per_cellSEXP, SEXP variationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type reads_per_cell(reads_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_read_UMI_curve_cpp(reads_per_cell, UMI_per_cell, variation));
    return rcpp_result_gen;
END_RCPP
}
// identify_library_size_range_cpp
List identify_library_size_range_cpp(std::string experimental_platform, double UMI_per_cell, double variation);
RcppExport SEXP _perturbplan_identify_library_size_range_cpp(SEXP experimental_platformSEXP, SEXP UMI_per_cellSEXP, SEXP variationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type experimental_platform(experimental_platformSEXP);
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_library_size_range_cpp(experimental_platform, UMI_per_cell, variation));
    return rcpp_result_gen;
END_RCPP
}
// generate_reads_grid_cpp
NumericVector generate_reads_grid_cpp(std::string experimental_platform, double UMI_per_cell, double variation, int grid_size);
RcppExport SEXP _perturbplan_generate_reads_grid_cpp(SEXP experimental_platformSEXP, SEXP UMI_per_cellSEXP, SEXP variationSEXP, SEXP grid_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type experimental_platform(experimental_platformSEXP);
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    Rcpp::traits::input_parameter< int >::type grid_size(grid_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_reads_grid_cpp(experimental_platform, UMI_per_cell, variation, grid_size));
    return rcpp_result_gen;
END_RCPP
}
// identify_reads_range_cpp
List identify_reads_range_cpp(double UMI_per_cell, double variation);
RcppExport SEXP _perturbplan_identify_reads_range_cpp(SEXP UMI_per_cellSEXP, SEXP variationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_reads_range_cpp(UMI_per_cell, variation));
    return rcpp_result_gen;
END_RCPP
}
// generate_reads_grid_streamlined_cpp
NumericVector generate_reads_grid_streamlined_cpp(double UMI_per_cell, double variation, int grid_size);
RcppExport SEXP _perturbplan_generate_reads_grid_streamlined_cpp(SEXP UMI_per_cellSEXP, SEXP variationSEXP, SEXP grid_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    Rcpp::traits::input_parameter< int >::type grid_size(grid_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_reads_grid_streamlined_cpp(UMI_per_cell, variation, grid_size));
    return rcpp_result_gen;
END_RCPP
}
// compute_monte_carlo_teststat_cpp
List compute_monte_carlo_teststat_cpp(DataFrame fc_expression_df, double library_size, double num_trt_cells, double num_cntrl_cells);
RcppExport SEXP _perturbplan_compute_monte_carlo_teststat_cpp(SEXP fc_expression_dfSEXP, SEXP library_sizeSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type library_size(library_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_monte_carlo_teststat_cpp(fc_expression_df, library_size, num_trt_cells, num_cntrl_cells));
    return rcpp_result_gen;
END_RCPP
}
// compute_power_plan_overall_cpp
SEXP compute_power_plan_overall_cpp(DataFrame fc_expression_df, double library_size, double num_trt_cells, double num_cntrl_cells, double multiple_testing_alpha, std::string multiple_testing_method, std::string side, double prop_non_null, bool return_full_results);
RcppExport SEXP _perturbplan_compute_power_plan_overall_cpp(SEXP fc_expression_dfSEXP, SEXP library_sizeSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP, SEXP multiple_testing_alphaSEXP, SEXP multiple_testing_methodSEXP, SEXP sideSEXP, SEXP prop_non_nullSEXP, SEXP return_full_resultsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type library_size(library_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type multiple_testing_method(multiple_testing_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    Rcpp::traits::input_parameter< bool >::type return_full_results(return_full_resultsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_power_plan_overall_cpp(fc_expression_df, library_size, num_trt_cells, num_cntrl_cells, multiple_testing_alpha, multiple_testing_method, side, prop_non_null, return_full_results));
    return rcpp_result_gen;
END_RCPP
}
// compute_single_power_cpp
double compute_single_power_cpp(double num_cells, double reads_per_cell, DataFrame fc_expression_df, double UMI_per_cell, double variation, double MOI, int num_targets, int gRNAs_per_target, int non_targeting_gRNAs, std::string control_group, double multiple_testing_alpha, std::string side, double prop_non_null);
RcppExport SEXP _perturbplan_compute_single_power_cpp(SEXP num_cellsSEXP, SEXP reads_per_cellSEXP, SEXP fc_expression_dfSEXP, SEXP UMI_per_cellSEXP, SEXP variationSEXP, SEXP MOISEXP, SEXP num_targetsSEXP, SEXP gRNAs_per_targetSEXP, SEXP non_targeting_gRNAsSEXP, SEXP control_groupSEXP, SEXP multiple_testing_alphaSEXP, SEXP sideSEXP, SEXP prop_non_nullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type num_cells(num_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type reads_per_cell(reads_per_cellSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type UMI_per_cell(UMI_per_cellSEXP);
    Rcpp::traits::input_parameter< double >::type variation(variationSEXP);
    Rcpp::traits::input_parameter< double >::type MOI(MOISEXP);
    Rcpp::traits::input_parameter< int >::type num_targets(num_targetsSEXP);
    Rcpp::traits::input_parameter< int >::type gRNAs_per_target(gRNAs_per_targetSEXP);
    Rcpp::traits::input_parameter< int >::type non_targeting_gRNAs(non_targeting_gRNAsSEXP);
    Rcpp::traits::input_parameter< std::string >::type control_group(control_groupSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_single_power_cpp(num_cells, reads_per_cell, fc_expression_df, UMI_per_cell, variation, MOI, num_targets, gRNAs_per_target, non_targeting_gRNAs, control_group, multiple_testing_alpha, side, prop_non_null));
    return rcpp_result_gen;
END_RCPP
}
// theta_batch_cpp
Rcpp::NumericVector theta_batch_cpp(const Eigen::MappedSparseMatrix<double>& Y, const Rcpp::NumericVector& library_size, const Rcpp::NumericVector& rel_expr, bool rough, int n_threads);
RcppExport SEXP _perturbplan_theta_batch_cpp(SEXP YSEXP, SEXP library_sizeSEXP, SEXP rel_exprSEXP, SEXP roughSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type library_size(library_sizeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rel_expr(rel_exprSEXP);
    Rcpp::traits::input_parameter< bool >::type rough(roughSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_batch_cpp(Y, library_size, rel_expr, rough, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_perturbplan_rejection_computation_cpp", (DL_FUNC) &_perturbplan_rejection_computation_cpp, 4},
    {"_perturbplan_compute_FDP_posthoc", (DL_FUNC) &_perturbplan_compute_FDP_posthoc, 5},
    {"_perturbplan_compute_BH_posthoc", (DL_FUNC) &_perturbplan_compute_BH_posthoc, 5},
    {"_perturbplan_compute_FDP_plan", (DL_FUNC) &_perturbplan_compute_FDP_plan, 5},
    {"_perturbplan_compute_BH_plan", (DL_FUNC) &_perturbplan_compute_BH_plan, 5},
    {"_perturbplan_compute_QC_fixed_es_cpp", (DL_FUNC) &_perturbplan_compute_QC_fixed_es_cpp, 7},
    {"_perturbplan_compute_distribution_teststat_fixed_es_cpp", (DL_FUNC) &_perturbplan_compute_distribution_teststat_fixed_es_cpp, 6},
    {"_perturbplan_compute_distribution_teststat_random_es_cpp", (DL_FUNC) &_perturbplan_compute_distribution_teststat_random_es_cpp, 6},
    {"_perturbplan_identify_cell_range_cpp", (DL_FUNC) &_perturbplan_identify_cell_range_cpp, 17},
    {"_perturbplan_fit_read_UMI_curve_cpp", (DL_FUNC) &_perturbplan_fit_read_UMI_curve_cpp, 3},
    {"_perturbplan_identify_library_size_range_cpp", (DL_FUNC) &_perturbplan_identify_library_size_range_cpp, 3},
    {"_perturbplan_generate_reads_grid_cpp", (DL_FUNC) &_perturbplan_generate_reads_grid_cpp, 4},
    {"_perturbplan_identify_reads_range_cpp", (DL_FUNC) &_perturbplan_identify_reads_range_cpp, 2},
    {"_perturbplan_generate_reads_grid_streamlined_cpp", (DL_FUNC) &_perturbplan_generate_reads_grid_streamlined_cpp, 3},
    {"_perturbplan_compute_monte_carlo_teststat_cpp", (DL_FUNC) &_perturbplan_compute_monte_carlo_teststat_cpp, 4},
    {"_perturbplan_compute_power_plan_overall_cpp", (DL_FUNC) &_perturbplan_compute_power_plan_overall_cpp, 9},
    {"_perturbplan_compute_single_power_cpp", (DL_FUNC) &_perturbplan_compute_single_power_cpp, 13},
    {"_perturbplan_theta_batch_cpp", (DL_FUNC) &_perturbplan_theta_batch_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_perturbplan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
