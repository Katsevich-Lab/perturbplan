// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rejection_computation_cpp
NumericVector rejection_computation_cpp(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff);
RcppExport SEXP _perturbplan_rejection_computation_cpp(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(rejection_computation_cpp(mean_list, sd_list, side, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// compute_FDP_posthoc
double compute_FDP_posthoc(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff, const NumericVector& QC_prob);
RcppExport SEXP _perturbplan_compute_FDP_posthoc(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP, SEXP QC_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type QC_prob(QC_probSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_FDP_posthoc(mean_list, sd_list, side, cutoff, QC_prob));
    return rcpp_result_gen;
END_RCPP
}
// compute_BH_posthoc
double compute_BH_posthoc(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double multiple_testing_alpha, const NumericVector& QC_prob);
RcppExport SEXP _perturbplan_compute_BH_posthoc(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP multiple_testing_alphaSEXP, SEXP QC_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type QC_prob(QC_probSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_BH_posthoc(mean_list, sd_list, side, multiple_testing_alpha, QC_prob));
    return rcpp_result_gen;
END_RCPP
}
// compute_FDP_plan
double compute_FDP_plan(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double cutoff, double prop_non_null);
RcppExport SEXP _perturbplan_compute_FDP_plan(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP cutoffSEXP, SEXP prop_non_nullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_FDP_plan(mean_list, sd_list, side, cutoff, prop_non_null));
    return rcpp_result_gen;
END_RCPP
}
// compute_BH_plan
double compute_BH_plan(const NumericVector& mean_list, const NumericVector& sd_list, const std::string& side, double multiple_testing_alpha, double prop_non_null, int num_pairs);
RcppExport SEXP _perturbplan_compute_BH_plan(SEXP mean_listSEXP, SEXP sd_listSEXP, SEXP sideSEXP, SEXP multiple_testing_alphaSEXP, SEXP prop_non_nullSEXP, SEXP num_pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mean_list(mean_listSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd_list(sd_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type multiple_testing_alpha(multiple_testing_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prop_non_null(prop_non_nullSEXP);
    Rcpp::traits::input_parameter< int >::type num_pairs(num_pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_BH_plan(mean_list, sd_list, side, multiple_testing_alpha, prop_non_null, num_pairs));
    return rcpp_result_gen;
END_RCPP
}
// compute_QC_fixed_es_cpp
double compute_QC_fixed_es_cpp(NumericVector fold_change, NumericVector expression_mean, NumericVector expression_size, NumericVector num_cntrl_cells, NumericVector num_cells, int n_nonzero_trt_thresh, int n_nonzero_cntrl_thresh);
RcppExport SEXP _perturbplan_compute_QC_fixed_es_cpp(SEXP fold_changeSEXP, SEXP expression_meanSEXP, SEXP expression_sizeSEXP, SEXP num_cntrl_cellsSEXP, SEXP num_cellsSEXP, SEXP n_nonzero_trt_threshSEXP, SEXP n_nonzero_cntrl_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fold_change(fold_changeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_mean(expression_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_size(expression_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cells(num_cellsSEXP);
    Rcpp::traits::input_parameter< int >::type n_nonzero_trt_thresh(n_nonzero_trt_threshSEXP);
    Rcpp::traits::input_parameter< int >::type n_nonzero_cntrl_thresh(n_nonzero_cntrl_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_QC_fixed_es_cpp(fold_change, expression_mean, expression_size, num_cntrl_cells, num_cells, n_nonzero_trt_thresh, n_nonzero_cntrl_thresh));
    return rcpp_result_gen;
END_RCPP
}
// compute_distribution_teststat_fixed_es_cpp
List compute_distribution_teststat_fixed_es_cpp(NumericVector fold_change, NumericVector expression_mean, NumericVector expression_size, NumericVector num_trt_cells, NumericVector num_cntrl_cells, NumericVector num_cells);
RcppExport SEXP _perturbplan_compute_distribution_teststat_fixed_es_cpp(SEXP fold_changeSEXP, SEXP expression_meanSEXP, SEXP expression_sizeSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP, SEXP num_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fold_change(fold_changeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_mean(expression_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expression_size(expression_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type num_cells(num_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_distribution_teststat_fixed_es_cpp(fold_change, expression_mean, expression_size, num_trt_cells, num_cntrl_cells, num_cells));
    return rcpp_result_gen;
END_RCPP
}
// compute_fc_curve_cpp
DataFrame compute_fc_curve_cpp(NumericVector fc_output_grid, DataFrame fc_expression_df, double library_size, double num_trt_cells, double num_cntrl_cells, std::string side, double cutoff);
RcppExport SEXP _perturbplan_compute_fc_curve_cpp(SEXP fc_output_gridSEXP, SEXP fc_expression_dfSEXP, SEXP library_sizeSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP, SEXP sideSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fc_output_grid(fc_output_gridSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type library_size(library_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_fc_curve_cpp(fc_output_grid, fc_expression_df, library_size, num_trt_cells, num_cntrl_cells, side, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// compute_expression_curve_cpp
DataFrame compute_expression_curve_cpp(NumericVector expr_output_grid, DataFrame fc_expression_df, double library_size, Function expression_dispersion_curve, double num_trt_cells, double num_cntrl_cells, std::string side, double cutoff);
RcppExport SEXP _perturbplan_compute_expression_curve_cpp(SEXP expr_output_gridSEXP, SEXP fc_expression_dfSEXP, SEXP library_sizeSEXP, SEXP expression_dispersion_curveSEXP, SEXP num_trt_cellsSEXP, SEXP num_cntrl_cellsSEXP, SEXP sideSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type expr_output_grid(expr_output_gridSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type fc_expression_df(fc_expression_dfSEXP);
    Rcpp::traits::input_parameter< double >::type library_size(library_sizeSEXP);
    Rcpp::traits::input_parameter< Function >::type expression_dispersion_curve(expression_dispersion_curveSEXP);
    Rcpp::traits::input_parameter< double >::type num_trt_cells(num_trt_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type num_cntrl_cells(num_cntrl_cellsSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_expression_curve_cpp(expr_output_grid, fc_expression_df, library_size, expression_dispersion_curve, num_trt_cells, num_cntrl_cells, side, cutoff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_perturbplan_rejection_computation_cpp", (DL_FUNC) &_perturbplan_rejection_computation_cpp, 4},
    {"_perturbplan_compute_FDP_posthoc", (DL_FUNC) &_perturbplan_compute_FDP_posthoc, 5},
    {"_perturbplan_compute_BH_posthoc", (DL_FUNC) &_perturbplan_compute_BH_posthoc, 5},
    {"_perturbplan_compute_FDP_plan", (DL_FUNC) &_perturbplan_compute_FDP_plan, 5},
    {"_perturbplan_compute_BH_plan", (DL_FUNC) &_perturbplan_compute_BH_plan, 6},
    {"_perturbplan_compute_QC_fixed_es_cpp", (DL_FUNC) &_perturbplan_compute_QC_fixed_es_cpp, 7},
    {"_perturbplan_compute_distribution_teststat_fixed_es_cpp", (DL_FUNC) &_perturbplan_compute_distribution_teststat_fixed_es_cpp, 6},
    {"_perturbplan_compute_fc_curve_cpp", (DL_FUNC) &_perturbplan_compute_fc_curve_cpp, 7},
    {"_perturbplan_compute_expression_curve_cpp", (DL_FUNC) &_perturbplan_compute_expression_curve_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_perturbplan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
